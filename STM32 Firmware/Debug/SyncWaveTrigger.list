
SyncWaveTrigger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c00  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  08003d10  08003d10  00004d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ff8  08003ff8  00005010  2**0
                  CONTENTS
  4 .ARM          00000000  08003ff8  08003ff8  00005010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ff8  08003ff8  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ff8  08003ff8  00004ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ffc  08003ffc  00004ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004000  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  20000010  08004010  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08004010  00005090  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000082e9  00000000  00000000  00005039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001829  00000000  00000000  0000d322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a60  00000000  00000000  0000eb50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007ff  00000000  00000000  0000f5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017779  00000000  00000000  0000fdaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b56a  00000000  00000000  00027528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008857c  00000000  00000000  00032a92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bb00e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c08  00000000  00000000  000bb054  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000bdc5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08003cf8 	.word	0x08003cf8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08003cf8 	.word	0x08003cf8

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <LCD_Init>:

/************************************************************************/
/*                         FUNCIONES PUBLICAS                           */
/************************************************************************/

void LCD_Init(){
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0

	HAL_Delay(500);
 8000930:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000934:	f001 ff92 	bl	800285c <HAL_Delay>

	LCD_sendNibble(0x03);
 8000938:	2003      	movs	r0, #3
 800093a:	f000 f8b5 	bl	8000aa8 <LCD_sendNibble>
	HAL_Delay(6);
 800093e:	2006      	movs	r0, #6
 8000940:	f001 ff8c 	bl	800285c <HAL_Delay>
	LCD_sendNibble(0x03);
 8000944:	2003      	movs	r0, #3
 8000946:	f000 f8af 	bl	8000aa8 <LCD_sendNibble>
	HAL_Delay(1);
 800094a:	2001      	movs	r0, #1
 800094c:	f001 ff86 	bl	800285c <HAL_Delay>
	LCD_sendNibble(0x03);
 8000950:	2003      	movs	r0, #3
 8000952:	f000 f8a9 	bl	8000aa8 <LCD_sendNibble>
	HAL_Delay(1);
 8000956:	2001      	movs	r0, #1
 8000958:	f001 ff80 	bl	800285c <HAL_Delay>


	//4 Bits
	LCD_sendNibble(0x02);
 800095c:	2002      	movs	r0, #2
 800095e:	f000 f8a3 	bl	8000aa8 <LCD_sendNibble>

	//4 Bits + 2 Lineas
	LCD_Send(LCD_CMD_FUNCTION | 0b00001100, LCD_COMMAND);
 8000962:	2100      	movs	r1, #0
 8000964:	202c      	movs	r0, #44	@ 0x2c
 8000966:	f000 f875 	bl	8000a54 <LCD_Send>

	//Encender Pantalla + Cursor Apagado
	LCD_Send(LCD_CMD_DISPLAY | 0b00000100, LCD_COMMAND);
 800096a:	2100      	movs	r1, #0
 800096c:	200c      	movs	r0, #12
 800096e:	f000 f871 	bl	8000a54 <LCD_Send>

	//Cursor Incremental
	LCD_Send(LCD_CMD_MODE_SET | 0b00000010, LCD_COMMAND);
 8000972:	2100      	movs	r1, #0
 8000974:	2006      	movs	r0, #6
 8000976:	f000 f86d 	bl	8000a54 <LCD_Send>

	//Limpiar la pantalla
	LCD_Clear();
 800097a:	f000 f802 	bl	8000982 <LCD_Clear>





}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}

08000982 <LCD_Clear>:


void LCD_Clear(){
 8000982:	b580      	push	{r7, lr}
 8000984:	af00      	add	r7, sp, #0
	LCD_Send(LCD_CMD_CLEAR, LCD_COMMAND);
 8000986:	2100      	movs	r1, #0
 8000988:	2001      	movs	r0, #1
 800098a:	f000 f863 	bl	8000a54 <LCD_Send>
	HAL_Delay(5);
 800098e:	2005      	movs	r0, #5
 8000990:	f001 ff64 	bl	800285c <HAL_Delay>
}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}

08000998 <LCD_setCursor>:


void LCD_setCursor (uint8_t col, uint8_t row){
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	460a      	mov	r2, r1
 80009a2:	71fb      	strb	r3, [r7, #7]
 80009a4:	4613      	mov	r3, r2
 80009a6:	71bb      	strb	r3, [r7, #6]
	uint8_t offset[] = {0x00, 0x40, 0x14, 0x54};
 80009a8:	4b0d      	ldr	r3, [pc, #52]	@ (80009e0 <LCD_setCursor+0x48>)
 80009aa:	60fb      	str	r3, [r7, #12]
	if(row > 3) row=3;
 80009ac:	79bb      	ldrb	r3, [r7, #6]
 80009ae:	2b03      	cmp	r3, #3
 80009b0:	d901      	bls.n	80009b6 <LCD_setCursor+0x1e>
 80009b2:	2303      	movs	r3, #3
 80009b4:	71bb      	strb	r3, [r7, #6]
	LCD_Send(LCD_CMD_DDRAM_ADD | ((col) + offset[row]), LCD_COMMAND);
 80009b6:	79bb      	ldrb	r3, [r7, #6]
 80009b8:	3310      	adds	r3, #16
 80009ba:	443b      	add	r3, r7
 80009bc:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 80009c0:	79fb      	ldrb	r3, [r7, #7]
 80009c2:	4413      	add	r3, r2
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	b25b      	sxtb	r3, r3
 80009c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80009cc:	b25b      	sxtb	r3, r3
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	2100      	movs	r1, #0
 80009d2:	4618      	mov	r0, r3
 80009d4:	f000 f83e 	bl	8000a54 <LCD_Send>
}
 80009d8:	bf00      	nop
 80009da:	3710      	adds	r7, #16
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	54144000 	.word	0x54144000

080009e4 <LCD_printChar>:



void LCD_printChar (uint8_t data)	{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]
	LCD_Send(data, LCD_DATA);
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	2101      	movs	r1, #1
 80009f2:	4618      	mov	r0, r3
 80009f4:	f000 f82e 	bl	8000a54 <LCD_Send>
}
 80009f8:	bf00      	nop
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <LCD_printString>:



void LCD_printString (char *str) {
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
	while(*str != 0x00){
 8000a08:	e007      	b.n	8000a1a <LCD_printString+0x1a>
		LCD_printChar(*str);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff ffe8 	bl	80009e4 <LCD_printChar>
		str++;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	3301      	adds	r3, #1
 8000a18:	607b      	str	r3, [r7, #4]
	while(*str != 0x00){
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d1f3      	bne.n	8000a0a <LCD_printString+0xa>
	}
}
 8000a22:	bf00      	nop
 8000a24:	bf00      	nop
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <LCD_printInt>:


void LCD_printInt(uint16_t val){
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	80fb      	strh	r3, [r7, #6]
	itoa(val, LCD_buff, 10);
 8000a36:	88fb      	ldrh	r3, [r7, #6]
 8000a38:	220a      	movs	r2, #10
 8000a3a:	4905      	ldr	r1, [pc, #20]	@ (8000a50 <LCD_printInt+0x24>)
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f003 f8eb 	bl	8003c18 <itoa>
	LCD_printString(LCD_buff);
 8000a42:	4803      	ldr	r0, [pc, #12]	@ (8000a50 <LCD_printInt+0x24>)
 8000a44:	f7ff ffdc 	bl	8000a00 <LCD_printString>
}
 8000a48:	bf00      	nop
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	2000002c 	.word	0x2000002c

08000a54 <LCD_Send>:

/************************************************************************/
/*                         FUNCIONES PRIVADAS                           */
/************************************************************************/

static void LCD_Send(uint8_t cmd, type_data_send data){
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	460a      	mov	r2, r1
 8000a5e:	71fb      	strb	r3, [r7, #7]
 8000a60:	4613      	mov	r3, r2
 8000a62:	71bb      	strb	r3, [r7, #6]
	if(data == LCD_COMMAND)
 8000a64:	79bb      	ldrb	r3, [r7, #6]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d105      	bne.n	8000a76 <LCD_Send+0x22>
		LCD_RS_LOW;
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2102      	movs	r1, #2
 8000a6e:	480d      	ldr	r0, [pc, #52]	@ (8000aa4 <LCD_Send+0x50>)
 8000a70:	f002 f9f3 	bl	8002e5a <HAL_GPIO_WritePin>
 8000a74:	e007      	b.n	8000a86 <LCD_Send+0x32>
	else if(data == LCD_DATA)
 8000a76:	79bb      	ldrb	r3, [r7, #6]
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d104      	bne.n	8000a86 <LCD_Send+0x32>
		LCD_RS_HIGH;
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	2102      	movs	r1, #2
 8000a80:	4808      	ldr	r0, [pc, #32]	@ (8000aa4 <LCD_Send+0x50>)
 8000a82:	f002 f9ea 	bl	8002e5a <HAL_GPIO_WritePin>

	LCD_sendNibble(cmd >> 4);
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	091b      	lsrs	r3, r3, #4
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f000 f80b 	bl	8000aa8 <LCD_sendNibble>
	LCD_sendNibble(cmd);
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f000 f807 	bl	8000aa8 <LCD_sendNibble>

}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40010800 	.word	0x40010800

08000aa8 <LCD_sendNibble>:




static void LCD_sendNibble(uint8_t data){
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	71fb      	strb	r3, [r7, #7]
	LCD_DB4(data & 0x01);
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	f003 0301 	and.w	r3, r3, #1
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d005      	beq.n	8000ac8 <LCD_sendNibble+0x20>
 8000abc:	2201      	movs	r2, #1
 8000abe:	2108      	movs	r1, #8
 8000ac0:	4827      	ldr	r0, [pc, #156]	@ (8000b60 <LCD_sendNibble+0xb8>)
 8000ac2:	f002 f9ca 	bl	8002e5a <HAL_GPIO_WritePin>
 8000ac6:	e004      	b.n	8000ad2 <LCD_sendNibble+0x2a>
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2108      	movs	r1, #8
 8000acc:	4824      	ldr	r0, [pc, #144]	@ (8000b60 <LCD_sendNibble+0xb8>)
 8000ace:	f002 f9c4 	bl	8002e5a <HAL_GPIO_WritePin>
	LCD_DB5((data >> 1) & 0x01);
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	085b      	lsrs	r3, r3, #1
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	f003 0301 	and.w	r3, r3, #1
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d005      	beq.n	8000aec <LCD_sendNibble+0x44>
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	2110      	movs	r1, #16
 8000ae4:	481e      	ldr	r0, [pc, #120]	@ (8000b60 <LCD_sendNibble+0xb8>)
 8000ae6:	f002 f9b8 	bl	8002e5a <HAL_GPIO_WritePin>
 8000aea:	e004      	b.n	8000af6 <LCD_sendNibble+0x4e>
 8000aec:	2200      	movs	r2, #0
 8000aee:	2110      	movs	r1, #16
 8000af0:	481b      	ldr	r0, [pc, #108]	@ (8000b60 <LCD_sendNibble+0xb8>)
 8000af2:	f002 f9b2 	bl	8002e5a <HAL_GPIO_WritePin>
	LCD_DB6((data >> 2) & 0x01);
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	089b      	lsrs	r3, r3, #2
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	f003 0301 	and.w	r3, r3, #1
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d005      	beq.n	8000b10 <LCD_sendNibble+0x68>
 8000b04:	2201      	movs	r2, #1
 8000b06:	2120      	movs	r1, #32
 8000b08:	4815      	ldr	r0, [pc, #84]	@ (8000b60 <LCD_sendNibble+0xb8>)
 8000b0a:	f002 f9a6 	bl	8002e5a <HAL_GPIO_WritePin>
 8000b0e:	e004      	b.n	8000b1a <LCD_sendNibble+0x72>
 8000b10:	2200      	movs	r2, #0
 8000b12:	2120      	movs	r1, #32
 8000b14:	4812      	ldr	r0, [pc, #72]	@ (8000b60 <LCD_sendNibble+0xb8>)
 8000b16:	f002 f9a0 	bl	8002e5a <HAL_GPIO_WritePin>
	LCD_DB7((data >> 3) & 0x01);
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	08db      	lsrs	r3, r3, #3
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	f003 0301 	and.w	r3, r3, #1
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d005      	beq.n	8000b34 <LCD_sendNibble+0x8c>
 8000b28:	2201      	movs	r2, #1
 8000b2a:	2140      	movs	r1, #64	@ 0x40
 8000b2c:	480c      	ldr	r0, [pc, #48]	@ (8000b60 <LCD_sendNibble+0xb8>)
 8000b2e:	f002 f994 	bl	8002e5a <HAL_GPIO_WritePin>
 8000b32:	e004      	b.n	8000b3e <LCD_sendNibble+0x96>
 8000b34:	2200      	movs	r2, #0
 8000b36:	2140      	movs	r1, #64	@ 0x40
 8000b38:	4809      	ldr	r0, [pc, #36]	@ (8000b60 <LCD_sendNibble+0xb8>)
 8000b3a:	f002 f98e 	bl	8002e5a <HAL_GPIO_WritePin>

	LCD_E_HIGH;
 8000b3e:	2201      	movs	r2, #1
 8000b40:	2104      	movs	r1, #4
 8000b42:	4807      	ldr	r0, [pc, #28]	@ (8000b60 <LCD_sendNibble+0xb8>)
 8000b44:	f002 f989 	bl	8002e5a <HAL_GPIO_WritePin>
	delay_us(100);
 8000b48:	2064      	movs	r0, #100	@ 0x64
 8000b4a:	f001 fc07 	bl	800235c <delay_us>
	LCD_E_LOW;
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2104      	movs	r1, #4
 8000b52:	4803      	ldr	r0, [pc, #12]	@ (8000b60 <LCD_sendNibble+0xb8>)
 8000b54:	f002 f981 	bl	8002e5a <HAL_GPIO_WritePin>
}
 8000b58:	bf00      	nop
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40010800 	.word	0x40010800

08000b64 <printHome>:

#include "LCD.h"

#define DELAY_POST_PRINT HAL_Delay(150)

void printHome(uint8_t clear){
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]
	if(clear)
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d002      	beq.n	8000b7a <printHome+0x16>
		LCD_Clear();
 8000b74:	f7ff ff05 	bl	8000982 <LCD_Clear>
 8000b78:	e003      	b.n	8000b82 <printHome+0x1e>
	else
		LCD_setCursor(0,0);
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	f7ff ff0b 	bl	8000998 <LCD_setCursor>

	LCD_printString(">MENU PRINCIPAL");
 8000b82:	4808      	ldr	r0, [pc, #32]	@ (8000ba4 <printHome+0x40>)
 8000b84:	f7ff ff3c 	bl	8000a00 <LCD_printString>
	LCD_setCursor(6, 2);
 8000b88:	2102      	movs	r1, #2
 8000b8a:	2006      	movs	r0, #6
 8000b8c:	f7ff ff04 	bl	8000998 <LCD_setCursor>
	LCD_printString("En Espera...");
 8000b90:	4805      	ldr	r0, [pc, #20]	@ (8000ba8 <printHome+0x44>)
 8000b92:	f7ff ff35 	bl	8000a00 <LCD_printString>

	DELAY_POST_PRINT;
 8000b96:	2096      	movs	r0, #150	@ 0x96
 8000b98:	f001 fe60 	bl	800285c <HAL_Delay>
}
 8000b9c:	bf00      	nop
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	08003d10 	.word	0x08003d10
 8000ba8:	08003d20 	.word	0x08003d20

08000bac <printViewT1>:




void printViewT1(uint8_t clear, uint16_t T, type_data_t1 mode){
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	71fb      	strb	r3, [r7, #7]
 8000bb6:	460b      	mov	r3, r1
 8000bb8:	80bb      	strh	r3, [r7, #4]
 8000bba:	4613      	mov	r3, r2
 8000bbc:	71bb      	strb	r3, [r7, #6]
	if(clear)
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d002      	beq.n	8000bca <printViewT1+0x1e>
		LCD_Clear();
 8000bc4:	f7ff fedd 	bl	8000982 <LCD_Clear>
 8000bc8:	e003      	b.n	8000bd2 <printViewT1+0x26>
	else
		LCD_setCursor(0,0);
 8000bca:	2100      	movs	r1, #0
 8000bcc:	2000      	movs	r0, #0
 8000bce:	f7ff fee3 	bl	8000998 <LCD_setCursor>


	LCD_printString(">MENU PRINCIPAL");
 8000bd2:	481f      	ldr	r0, [pc, #124]	@ (8000c50 <printViewT1+0xa4>)
 8000bd4:	f7ff ff14 	bl	8000a00 <LCD_printString>
	LCD_setCursor(1, 2);
 8000bd8:	2102      	movs	r1, #2
 8000bda:	2001      	movs	r0, #1
 8000bdc:	f7ff fedc 	bl	8000998 <LCD_setCursor>
	LCD_printString("T1:");
 8000be0:	481c      	ldr	r0, [pc, #112]	@ (8000c54 <printViewT1+0xa8>)
 8000be2:	f7ff ff0d 	bl	8000a00 <LCD_printString>


	if(T <= 9)
 8000be6:	88bb      	ldrh	r3, [r7, #4]
 8000be8:	2b09      	cmp	r3, #9
 8000bea:	d804      	bhi.n	8000bf6 <printViewT1+0x4a>
		LCD_setCursor(11, 2);
 8000bec:	2102      	movs	r1, #2
 8000bee:	200b      	movs	r0, #11
 8000bf0:	f7ff fed2 	bl	8000998 <LCD_setCursor>
 8000bf4:	e01e      	b.n	8000c34 <printViewT1+0x88>
	else if(T <= 99)
 8000bf6:	88bb      	ldrh	r3, [r7, #4]
 8000bf8:	2b63      	cmp	r3, #99	@ 0x63
 8000bfa:	d804      	bhi.n	8000c06 <printViewT1+0x5a>
		LCD_setCursor(10, 2);
 8000bfc:	2102      	movs	r1, #2
 8000bfe:	200a      	movs	r0, #10
 8000c00:	f7ff feca 	bl	8000998 <LCD_setCursor>
 8000c04:	e016      	b.n	8000c34 <printViewT1+0x88>
	else if(T <= 999)
 8000c06:	88bb      	ldrh	r3, [r7, #4]
 8000c08:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000c0c:	d204      	bcs.n	8000c18 <printViewT1+0x6c>
		LCD_setCursor(9, 2);
 8000c0e:	2102      	movs	r1, #2
 8000c10:	2009      	movs	r0, #9
 8000c12:	f7ff fec1 	bl	8000998 <LCD_setCursor>
 8000c16:	e00d      	b.n	8000c34 <printViewT1+0x88>
	else if(T <= 9999)
 8000c18:	88bb      	ldrh	r3, [r7, #4]
 8000c1a:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d804      	bhi.n	8000c2c <printViewT1+0x80>
		LCD_setCursor(8, 2);
 8000c22:	2102      	movs	r1, #2
 8000c24:	2008      	movs	r0, #8
 8000c26:	f7ff feb7 	bl	8000998 <LCD_setCursor>
 8000c2a:	e003      	b.n	8000c34 <printViewT1+0x88>
	else
		LCD_setCursor(7, 2);
 8000c2c:	2102      	movs	r1, #2
 8000c2e:	2007      	movs	r0, #7
 8000c30:	f7ff feb2 	bl	8000998 <LCD_setCursor>

	LCD_printInt(T);
 8000c34:	88bb      	ldrh	r3, [r7, #4]
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff fef8 	bl	8000a2c <LCD_printInt>
	LCD_printString("   us");
 8000c3c:	4806      	ldr	r0, [pc, #24]	@ (8000c58 <printViewT1+0xac>)
 8000c3e:	f7ff fedf 	bl	8000a00 <LCD_printString>

	DELAY_POST_PRINT;
 8000c42:	2096      	movs	r0, #150	@ 0x96
 8000c44:	f001 fe0a 	bl	800285c <HAL_Delay>

}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	08003d10 	.word	0x08003d10
 8000c54:	08003d30 	.word	0x08003d30
 8000c58:	08003d34 	.word	0x08003d34

08000c5c <printViewT2>:


void printViewT2(uint8_t clear, uint16_t T){
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	460a      	mov	r2, r1
 8000c66:	71fb      	strb	r3, [r7, #7]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	80bb      	strh	r3, [r7, #4]
	if(clear)
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d002      	beq.n	8000c78 <printViewT2+0x1c>
		LCD_Clear();
 8000c72:	f7ff fe86 	bl	8000982 <LCD_Clear>
 8000c76:	e003      	b.n	8000c80 <printViewT2+0x24>
	else
		LCD_setCursor(0,0);
 8000c78:	2100      	movs	r1, #0
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	f7ff fe8c 	bl	8000998 <LCD_setCursor>


	LCD_printString(">MENU PRINCIPAL");
 8000c80:	481a      	ldr	r0, [pc, #104]	@ (8000cec <printViewT2+0x90>)
 8000c82:	f7ff febd 	bl	8000a00 <LCD_printString>
	LCD_setCursor(1, 2);
 8000c86:	2102      	movs	r1, #2
 8000c88:	2001      	movs	r0, #1
 8000c8a:	f7ff fe85 	bl	8000998 <LCD_setCursor>
	LCD_printString("T2:");
 8000c8e:	4818      	ldr	r0, [pc, #96]	@ (8000cf0 <printViewT2+0x94>)
 8000c90:	f7ff feb6 	bl	8000a00 <LCD_printString>


	if(T <= 9)
 8000c94:	88bb      	ldrh	r3, [r7, #4]
 8000c96:	2b09      	cmp	r3, #9
 8000c98:	d804      	bhi.n	8000ca4 <printViewT2+0x48>
		LCD_setCursor(11, 2);
 8000c9a:	2102      	movs	r1, #2
 8000c9c:	200b      	movs	r0, #11
 8000c9e:	f7ff fe7b 	bl	8000998 <LCD_setCursor>
 8000ca2:	e014      	b.n	8000cce <printViewT2+0x72>
	else if(T <= 99)
 8000ca4:	88bb      	ldrh	r3, [r7, #4]
 8000ca6:	2b63      	cmp	r3, #99	@ 0x63
 8000ca8:	d804      	bhi.n	8000cb4 <printViewT2+0x58>
		LCD_setCursor(10, 2);
 8000caa:	2102      	movs	r1, #2
 8000cac:	200a      	movs	r0, #10
 8000cae:	f7ff fe73 	bl	8000998 <LCD_setCursor>
 8000cb2:	e00c      	b.n	8000cce <printViewT2+0x72>
	else if(T <= 999)
 8000cb4:	88bb      	ldrh	r3, [r7, #4]
 8000cb6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000cba:	d204      	bcs.n	8000cc6 <printViewT2+0x6a>
		LCD_setCursor(9, 2);
 8000cbc:	2102      	movs	r1, #2
 8000cbe:	2009      	movs	r0, #9
 8000cc0:	f7ff fe6a 	bl	8000998 <LCD_setCursor>
 8000cc4:	e003      	b.n	8000cce <printViewT2+0x72>
	else
		LCD_setCursor(8, 2);
 8000cc6:	2102      	movs	r1, #2
 8000cc8:	2008      	movs	r0, #8
 8000cca:	f7ff fe65 	bl	8000998 <LCD_setCursor>


	LCD_printInt(T);
 8000cce:	88bb      	ldrh	r3, [r7, #4]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff feab 	bl	8000a2c <LCD_printInt>
	LCD_printString(" ms");
 8000cd6:	4807      	ldr	r0, [pc, #28]	@ (8000cf4 <printViewT2+0x98>)
 8000cd8:	f7ff fe92 	bl	8000a00 <LCD_printString>

	DELAY_POST_PRINT;
 8000cdc:	2096      	movs	r0, #150	@ 0x96
 8000cde:	f001 fdbd 	bl	800285c <HAL_Delay>

}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	08003d10 	.word	0x08003d10
 8000cf0:	08003d3c 	.word	0x08003d3c
 8000cf4:	08003d40 	.word	0x08003d40

08000cf8 <printViewT3>:



void printViewT3(uint8_t clear, uint16_t T){
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	460a      	mov	r2, r1
 8000d02:	71fb      	strb	r3, [r7, #7]
 8000d04:	4613      	mov	r3, r2
 8000d06:	80bb      	strh	r3, [r7, #4]
	if(clear)
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d002      	beq.n	8000d14 <printViewT3+0x1c>
		LCD_Clear();
 8000d0e:	f7ff fe38 	bl	8000982 <LCD_Clear>
 8000d12:	e003      	b.n	8000d1c <printViewT3+0x24>
	else
		LCD_setCursor(0,0);
 8000d14:	2100      	movs	r1, #0
 8000d16:	2000      	movs	r0, #0
 8000d18:	f7ff fe3e 	bl	8000998 <LCD_setCursor>


	LCD_printString(">MENU PRINCIPAL");
 8000d1c:	481a      	ldr	r0, [pc, #104]	@ (8000d88 <printViewT3+0x90>)
 8000d1e:	f7ff fe6f 	bl	8000a00 <LCD_printString>
	LCD_setCursor(1, 2);
 8000d22:	2102      	movs	r1, #2
 8000d24:	2001      	movs	r0, #1
 8000d26:	f7ff fe37 	bl	8000998 <LCD_setCursor>
	LCD_printString("T3:");
 8000d2a:	4818      	ldr	r0, [pc, #96]	@ (8000d8c <printViewT3+0x94>)
 8000d2c:	f7ff fe68 	bl	8000a00 <LCD_printString>


	if(T <= 9)
 8000d30:	88bb      	ldrh	r3, [r7, #4]
 8000d32:	2b09      	cmp	r3, #9
 8000d34:	d804      	bhi.n	8000d40 <printViewT3+0x48>
		LCD_setCursor(11, 2);
 8000d36:	2102      	movs	r1, #2
 8000d38:	200b      	movs	r0, #11
 8000d3a:	f7ff fe2d 	bl	8000998 <LCD_setCursor>
 8000d3e:	e014      	b.n	8000d6a <printViewT3+0x72>
	else if(T <= 99)
 8000d40:	88bb      	ldrh	r3, [r7, #4]
 8000d42:	2b63      	cmp	r3, #99	@ 0x63
 8000d44:	d804      	bhi.n	8000d50 <printViewT3+0x58>
		LCD_setCursor(10, 2);
 8000d46:	2102      	movs	r1, #2
 8000d48:	200a      	movs	r0, #10
 8000d4a:	f7ff fe25 	bl	8000998 <LCD_setCursor>
 8000d4e:	e00c      	b.n	8000d6a <printViewT3+0x72>
	else if(T <= 999)
 8000d50:	88bb      	ldrh	r3, [r7, #4]
 8000d52:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000d56:	d204      	bcs.n	8000d62 <printViewT3+0x6a>
		LCD_setCursor(9, 2);
 8000d58:	2102      	movs	r1, #2
 8000d5a:	2009      	movs	r0, #9
 8000d5c:	f7ff fe1c 	bl	8000998 <LCD_setCursor>
 8000d60:	e003      	b.n	8000d6a <printViewT3+0x72>
	else
		LCD_setCursor(8, 2);
 8000d62:	2102      	movs	r1, #2
 8000d64:	2008      	movs	r0, #8
 8000d66:	f7ff fe17 	bl	8000998 <LCD_setCursor>


	LCD_printInt(T);
 8000d6a:	88bb      	ldrh	r3, [r7, #4]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fe5d 	bl	8000a2c <LCD_printInt>
	LCD_printString(" ms");
 8000d72:	4807      	ldr	r0, [pc, #28]	@ (8000d90 <printViewT3+0x98>)
 8000d74:	f7ff fe44 	bl	8000a00 <LCD_printString>

	DELAY_POST_PRINT;
 8000d78:	2096      	movs	r0, #150	@ 0x96
 8000d7a:	f001 fd6f 	bl	800285c <HAL_Delay>

}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	08003d10 	.word	0x08003d10
 8000d8c:	08003d44 	.word	0x08003d44
 8000d90:	08003d40 	.word	0x08003d40

08000d94 <printEditT1>:





void printEditT1(uint8_t clear, uint16_t T, type_data_t1 mode){
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]
 8000d9e:	460b      	mov	r3, r1
 8000da0:	80bb      	strh	r3, [r7, #4]
 8000da2:	4613      	mov	r3, r2
 8000da4:	71bb      	strb	r3, [r7, #6]
	if(clear)
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d002      	beq.n	8000db2 <printEditT1+0x1e>
		LCD_Clear();
 8000dac:	f7ff fde9 	bl	8000982 <LCD_Clear>
 8000db0:	e003      	b.n	8000dba <printEditT1+0x26>
	else
		LCD_setCursor(0,0);
 8000db2:	2100      	movs	r1, #0
 8000db4:	2000      	movs	r0, #0
 8000db6:	f7ff fdef 	bl	8000998 <LCD_setCursor>

	LCD_printString(">MENU PRINCIPAL");
 8000dba:	4826      	ldr	r0, [pc, #152]	@ (8000e54 <printEditT1+0xc0>)
 8000dbc:	f7ff fe20 	bl	8000a00 <LCD_printString>
	LCD_setCursor(1, 2);
 8000dc0:	2102      	movs	r1, #2
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	f7ff fde8 	bl	8000998 <LCD_setCursor>
	LCD_printString("T1: > ");
 8000dc8:	4823      	ldr	r0, [pc, #140]	@ (8000e58 <printEditT1+0xc4>)
 8000dca:	f7ff fe19 	bl	8000a00 <LCD_printString>

	if(T <= 9)
 8000dce:	88bb      	ldrh	r3, [r7, #4]
 8000dd0:	2b09      	cmp	r3, #9
 8000dd2:	d803      	bhi.n	8000ddc <printEditT1+0x48>
		LCD_printString("    ");
 8000dd4:	4821      	ldr	r0, [pc, #132]	@ (8000e5c <printEditT1+0xc8>)
 8000dd6:	f7ff fe13 	bl	8000a00 <LCD_printString>
 8000dda:	e016      	b.n	8000e0a <printEditT1+0x76>
	else if(T <= 99)
 8000ddc:	88bb      	ldrh	r3, [r7, #4]
 8000dde:	2b63      	cmp	r3, #99	@ 0x63
 8000de0:	d803      	bhi.n	8000dea <printEditT1+0x56>
		LCD_printString("   ");
 8000de2:	481f      	ldr	r0, [pc, #124]	@ (8000e60 <printEditT1+0xcc>)
 8000de4:	f7ff fe0c 	bl	8000a00 <LCD_printString>
 8000de8:	e00f      	b.n	8000e0a <printEditT1+0x76>
	else if(T <= 999)
 8000dea:	88bb      	ldrh	r3, [r7, #4]
 8000dec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000df0:	d203      	bcs.n	8000dfa <printEditT1+0x66>
		LCD_printString("  ");
 8000df2:	481c      	ldr	r0, [pc, #112]	@ (8000e64 <printEditT1+0xd0>)
 8000df4:	f7ff fe04 	bl	8000a00 <LCD_printString>
 8000df8:	e007      	b.n	8000e0a <printEditT1+0x76>
	else if(T <= 9999)
 8000dfa:	88bb      	ldrh	r3, [r7, #4]
 8000dfc:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d802      	bhi.n	8000e0a <printEditT1+0x76>
		LCD_printString(" ");
 8000e04:	4818      	ldr	r0, [pc, #96]	@ (8000e68 <printEditT1+0xd4>)
 8000e06:	f7ff fdfb 	bl	8000a00 <LCD_printString>


	LCD_printInt(T);
 8000e0a:	88bb      	ldrh	r3, [r7, #4]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff fe0d 	bl	8000a2c <LCD_printInt>

	switch(mode){
 8000e12:	79bb      	ldrb	r3, [r7, #6]
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d011      	beq.n	8000e3c <printEditT1+0xa8>
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	dc13      	bgt.n	8000e44 <printEditT1+0xb0>
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d002      	beq.n	8000e26 <printEditT1+0x92>
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d007      	beq.n	8000e34 <printEditT1+0xa0>
 8000e24:	e00e      	b.n	8000e44 <printEditT1+0xb0>
		case T1_GRADOS:
			LCD_printString(" <  ");
 8000e26:	4811      	ldr	r0, [pc, #68]	@ (8000e6c <printEditT1+0xd8>)
 8000e28:	f7ff fdea 	bl	8000a00 <LCD_printString>
			LCD_printChar(223);
 8000e2c:	20df      	movs	r0, #223	@ 0xdf
 8000e2e:	f7ff fdd9 	bl	80009e4 <LCD_printChar>
			break;
 8000e32:	e007      	b.n	8000e44 <printEditT1+0xb0>
		case T1_US:
			LCD_printString(" < us");
 8000e34:	480e      	ldr	r0, [pc, #56]	@ (8000e70 <printEditT1+0xdc>)
 8000e36:	f7ff fde3 	bl	8000a00 <LCD_printString>
			break;
 8000e3a:	e003      	b.n	8000e44 <printEditT1+0xb0>
		case T1_MS:
			LCD_printString(" < ms");
 8000e3c:	480d      	ldr	r0, [pc, #52]	@ (8000e74 <printEditT1+0xe0>)
 8000e3e:	f7ff fddf 	bl	8000a00 <LCD_printString>
			break;
 8000e42:	bf00      	nop
	}

	DELAY_POST_PRINT;
 8000e44:	2096      	movs	r0, #150	@ 0x96
 8000e46:	f001 fd09 	bl	800285c <HAL_Delay>
}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	08003d10 	.word	0x08003d10
 8000e58:	08003d48 	.word	0x08003d48
 8000e5c:	08003d50 	.word	0x08003d50
 8000e60:	08003d58 	.word	0x08003d58
 8000e64:	08003d5c 	.word	0x08003d5c
 8000e68:	08003d60 	.word	0x08003d60
 8000e6c:	08003d64 	.word	0x08003d64
 8000e70:	08003d6c 	.word	0x08003d6c
 8000e74:	08003d74 	.word	0x08003d74

08000e78 <printEditT2>:



void printEditT2(uint8_t clear, uint16_t T){
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	460a      	mov	r2, r1
 8000e82:	71fb      	strb	r3, [r7, #7]
 8000e84:	4613      	mov	r3, r2
 8000e86:	80bb      	strh	r3, [r7, #4]
	if(clear)
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d002      	beq.n	8000e94 <printEditT2+0x1c>
		LCD_Clear();
 8000e8e:	f7ff fd78 	bl	8000982 <LCD_Clear>
 8000e92:	e003      	b.n	8000e9c <printEditT2+0x24>
	else
		LCD_setCursor(0,0);
 8000e94:	2100      	movs	r1, #0
 8000e96:	2000      	movs	r0, #0
 8000e98:	f7ff fd7e 	bl	8000998 <LCD_setCursor>

	LCD_printString(">MENU PRINCIPAL");
 8000e9c:	4814      	ldr	r0, [pc, #80]	@ (8000ef0 <printEditT2+0x78>)
 8000e9e:	f7ff fdaf 	bl	8000a00 <LCD_printString>
	LCD_setCursor(1, 2);
 8000ea2:	2102      	movs	r1, #2
 8000ea4:	2001      	movs	r0, #1
 8000ea6:	f7ff fd77 	bl	8000998 <LCD_setCursor>
	LCD_printString("T2: >  ");
 8000eaa:	4812      	ldr	r0, [pc, #72]	@ (8000ef4 <printEditT2+0x7c>)
 8000eac:	f7ff fda8 	bl	8000a00 <LCD_printString>

	if(T <= 9)
 8000eb0:	88bb      	ldrh	r3, [r7, #4]
 8000eb2:	2b09      	cmp	r3, #9
 8000eb4:	d803      	bhi.n	8000ebe <printEditT2+0x46>
		LCD_printString("   ");
 8000eb6:	4810      	ldr	r0, [pc, #64]	@ (8000ef8 <printEditT2+0x80>)
 8000eb8:	f7ff fda2 	bl	8000a00 <LCD_printString>
 8000ebc:	e009      	b.n	8000ed2 <printEditT2+0x5a>
	else if(T <= 99)
 8000ebe:	88bb      	ldrh	r3, [r7, #4]
 8000ec0:	2b63      	cmp	r3, #99	@ 0x63
 8000ec2:	d803      	bhi.n	8000ecc <printEditT2+0x54>
		LCD_printString("  ");
 8000ec4:	480d      	ldr	r0, [pc, #52]	@ (8000efc <printEditT2+0x84>)
 8000ec6:	f7ff fd9b 	bl	8000a00 <LCD_printString>
 8000eca:	e002      	b.n	8000ed2 <printEditT2+0x5a>
	else
		LCD_printString(" ");
 8000ecc:	480c      	ldr	r0, [pc, #48]	@ (8000f00 <printEditT2+0x88>)
 8000ece:	f7ff fd97 	bl	8000a00 <LCD_printString>


	LCD_printInt(T);
 8000ed2:	88bb      	ldrh	r3, [r7, #4]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff fda9 	bl	8000a2c <LCD_printInt>
	LCD_printString(" < ms");
 8000eda:	480a      	ldr	r0, [pc, #40]	@ (8000f04 <printEditT2+0x8c>)
 8000edc:	f7ff fd90 	bl	8000a00 <LCD_printString>

	DELAY_POST_PRINT;
 8000ee0:	2096      	movs	r0, #150	@ 0x96
 8000ee2:	f001 fcbb 	bl	800285c <HAL_Delay>
}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	08003d10 	.word	0x08003d10
 8000ef4:	08003d7c 	.word	0x08003d7c
 8000ef8:	08003d58 	.word	0x08003d58
 8000efc:	08003d5c 	.word	0x08003d5c
 8000f00:	08003d60 	.word	0x08003d60
 8000f04:	08003d74 	.word	0x08003d74

08000f08 <printEditT3>:



void printEditT3(uint8_t clear, uint16_t T){
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	460a      	mov	r2, r1
 8000f12:	71fb      	strb	r3, [r7, #7]
 8000f14:	4613      	mov	r3, r2
 8000f16:	80bb      	strh	r3, [r7, #4]
	if(clear)
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d002      	beq.n	8000f24 <printEditT3+0x1c>
		LCD_Clear();
 8000f1e:	f7ff fd30 	bl	8000982 <LCD_Clear>
 8000f22:	e003      	b.n	8000f2c <printEditT3+0x24>
	else
		LCD_setCursor(0,0);
 8000f24:	2100      	movs	r1, #0
 8000f26:	2000      	movs	r0, #0
 8000f28:	f7ff fd36 	bl	8000998 <LCD_setCursor>

	LCD_printString(">MENU PRINCIPAL");
 8000f2c:	4814      	ldr	r0, [pc, #80]	@ (8000f80 <printEditT3+0x78>)
 8000f2e:	f7ff fd67 	bl	8000a00 <LCD_printString>
	LCD_setCursor(1, 2);
 8000f32:	2102      	movs	r1, #2
 8000f34:	2001      	movs	r0, #1
 8000f36:	f7ff fd2f 	bl	8000998 <LCD_setCursor>
	LCD_printString("T3: >  ");
 8000f3a:	4812      	ldr	r0, [pc, #72]	@ (8000f84 <printEditT3+0x7c>)
 8000f3c:	f7ff fd60 	bl	8000a00 <LCD_printString>

	if(T <= 9)
 8000f40:	88bb      	ldrh	r3, [r7, #4]
 8000f42:	2b09      	cmp	r3, #9
 8000f44:	d803      	bhi.n	8000f4e <printEditT3+0x46>
		LCD_printString("   ");
 8000f46:	4810      	ldr	r0, [pc, #64]	@ (8000f88 <printEditT3+0x80>)
 8000f48:	f7ff fd5a 	bl	8000a00 <LCD_printString>
 8000f4c:	e009      	b.n	8000f62 <printEditT3+0x5a>
	else if(T <= 99)
 8000f4e:	88bb      	ldrh	r3, [r7, #4]
 8000f50:	2b63      	cmp	r3, #99	@ 0x63
 8000f52:	d803      	bhi.n	8000f5c <printEditT3+0x54>
		LCD_printString("  ");
 8000f54:	480d      	ldr	r0, [pc, #52]	@ (8000f8c <printEditT3+0x84>)
 8000f56:	f7ff fd53 	bl	8000a00 <LCD_printString>
 8000f5a:	e002      	b.n	8000f62 <printEditT3+0x5a>
	else
		LCD_printString(" ");
 8000f5c:	480c      	ldr	r0, [pc, #48]	@ (8000f90 <printEditT3+0x88>)
 8000f5e:	f7ff fd4f 	bl	8000a00 <LCD_printString>

	LCD_printInt(T);
 8000f62:	88bb      	ldrh	r3, [r7, #4]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff fd61 	bl	8000a2c <LCD_printInt>
	LCD_printString(" < ms");
 8000f6a:	480a      	ldr	r0, [pc, #40]	@ (8000f94 <printEditT3+0x8c>)
 8000f6c:	f7ff fd48 	bl	8000a00 <LCD_printString>


	DELAY_POST_PRINT;
 8000f70:	2096      	movs	r0, #150	@ 0x96
 8000f72:	f001 fc73 	bl	800285c <HAL_Delay>
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	08003d10 	.word	0x08003d10
 8000f84:	08003d84 	.word	0x08003d84
 8000f88:	08003d58 	.word	0x08003d58
 8000f8c:	08003d5c 	.word	0x08003d5c
 8000f90:	08003d60 	.word	0x08003d60
 8000f94:	08003d74 	.word	0x08003d74

08000f98 <printEditT1Unit>:




void printEditT1Unit(uint8_t clear, uint16_t T, type_data_t1 mode){
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	80bb      	strh	r3, [r7, #4]
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	71bb      	strb	r3, [r7, #6]
	if(clear)
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d002      	beq.n	8000fb6 <printEditT1Unit+0x1e>
		LCD_Clear();
 8000fb0:	f7ff fce7 	bl	8000982 <LCD_Clear>
 8000fb4:	e003      	b.n	8000fbe <printEditT1Unit+0x26>
	else
		LCD_setCursor(0,0);
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	2000      	movs	r0, #0
 8000fba:	f7ff fced 	bl	8000998 <LCD_setCursor>


	LCD_printString(">MENU PRINCIPAL");
 8000fbe:	482c      	ldr	r0, [pc, #176]	@ (8001070 <printEditT1Unit+0xd8>)
 8000fc0:	f7ff fd1e 	bl	8000a00 <LCD_printString>
	LCD_setCursor(1, 2);
 8000fc4:	2102      	movs	r1, #2
 8000fc6:	2001      	movs	r0, #1
 8000fc8:	f7ff fce6 	bl	8000998 <LCD_setCursor>
	LCD_printString("T1:");
 8000fcc:	4829      	ldr	r0, [pc, #164]	@ (8001074 <printEditT1Unit+0xdc>)
 8000fce:	f7ff fd17 	bl	8000a00 <LCD_printString>


	if(T <= 9)
 8000fd2:	88bb      	ldrh	r3, [r7, #4]
 8000fd4:	2b09      	cmp	r3, #9
 8000fd6:	d804      	bhi.n	8000fe2 <printEditT1Unit+0x4a>
		LCD_setCursor(11, 2);
 8000fd8:	2102      	movs	r1, #2
 8000fda:	200b      	movs	r0, #11
 8000fdc:	f7ff fcdc 	bl	8000998 <LCD_setCursor>
 8000fe0:	e01e      	b.n	8001020 <printEditT1Unit+0x88>
	else if(T <= 99)
 8000fe2:	88bb      	ldrh	r3, [r7, #4]
 8000fe4:	2b63      	cmp	r3, #99	@ 0x63
 8000fe6:	d804      	bhi.n	8000ff2 <printEditT1Unit+0x5a>
		LCD_setCursor(10, 2);
 8000fe8:	2102      	movs	r1, #2
 8000fea:	200a      	movs	r0, #10
 8000fec:	f7ff fcd4 	bl	8000998 <LCD_setCursor>
 8000ff0:	e016      	b.n	8001020 <printEditT1Unit+0x88>
	else if(T <= 999)
 8000ff2:	88bb      	ldrh	r3, [r7, #4]
 8000ff4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000ff8:	d204      	bcs.n	8001004 <printEditT1Unit+0x6c>
		LCD_setCursor(9, 2);
 8000ffa:	2102      	movs	r1, #2
 8000ffc:	2009      	movs	r0, #9
 8000ffe:	f7ff fccb 	bl	8000998 <LCD_setCursor>
 8001002:	e00d      	b.n	8001020 <printEditT1Unit+0x88>
	else if(T <= 9999)
 8001004:	88bb      	ldrh	r3, [r7, #4]
 8001006:	f242 720f 	movw	r2, #9999	@ 0x270f
 800100a:	4293      	cmp	r3, r2
 800100c:	d804      	bhi.n	8001018 <printEditT1Unit+0x80>
		LCD_setCursor(8, 2);
 800100e:	2102      	movs	r1, #2
 8001010:	2008      	movs	r0, #8
 8001012:	f7ff fcc1 	bl	8000998 <LCD_setCursor>
 8001016:	e003      	b.n	8001020 <printEditT1Unit+0x88>
	else
		LCD_setCursor(7, 2);
 8001018:	2102      	movs	r1, #2
 800101a:	2007      	movs	r0, #7
 800101c:	f7ff fcbc 	bl	8000998 <LCD_setCursor>

	LCD_printInt(T);
 8001020:	88bb      	ldrh	r3, [r7, #4]
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff fd02 	bl	8000a2c <LCD_printInt>

	switch(mode){
 8001028:	79bb      	ldrb	r3, [r7, #6]
 800102a:	2b02      	cmp	r3, #2
 800102c:	d014      	beq.n	8001058 <printEditT1Unit+0xc0>
 800102e:	2b02      	cmp	r3, #2
 8001030:	dc16      	bgt.n	8001060 <printEditT1Unit+0xc8>
 8001032:	2b00      	cmp	r3, #0
 8001034:	d002      	beq.n	800103c <printEditT1Unit+0xa4>
 8001036:	2b01      	cmp	r3, #1
 8001038:	d00a      	beq.n	8001050 <printEditT1Unit+0xb8>
 800103a:	e011      	b.n	8001060 <printEditT1Unit+0xc8>
		case T1_GRADOS:
			LCD_printString(" >  ");
 800103c:	480e      	ldr	r0, [pc, #56]	@ (8001078 <printEditT1Unit+0xe0>)
 800103e:	f7ff fcdf 	bl	8000a00 <LCD_printString>
			LCD_printChar(223);
 8001042:	20df      	movs	r0, #223	@ 0xdf
 8001044:	f7ff fcce 	bl	80009e4 <LCD_printChar>
			LCD_printString(" <");
 8001048:	480c      	ldr	r0, [pc, #48]	@ (800107c <printEditT1Unit+0xe4>)
 800104a:	f7ff fcd9 	bl	8000a00 <LCD_printString>
			break;
 800104e:	e007      	b.n	8001060 <printEditT1Unit+0xc8>
		case T1_US:
			LCD_printString(" > us <");
 8001050:	480b      	ldr	r0, [pc, #44]	@ (8001080 <printEditT1Unit+0xe8>)
 8001052:	f7ff fcd5 	bl	8000a00 <LCD_printString>
			break;
 8001056:	e003      	b.n	8001060 <printEditT1Unit+0xc8>
		case T1_MS:
			LCD_printString(" > ms <");
 8001058:	480a      	ldr	r0, [pc, #40]	@ (8001084 <printEditT1Unit+0xec>)
 800105a:	f7ff fcd1 	bl	8000a00 <LCD_printString>
			break;
 800105e:	bf00      	nop
	}

	DELAY_POST_PRINT;
 8001060:	2096      	movs	r0, #150	@ 0x96
 8001062:	f001 fbfb 	bl	800285c <HAL_Delay>

}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	08003d10 	.word	0x08003d10
 8001074:	08003d30 	.word	0x08003d30
 8001078:	08003d8c 	.word	0x08003d8c
 800107c:	08003d94 	.word	0x08003d94
 8001080:	08003d98 	.word	0x08003d98
 8001084:	08003da0 	.word	0x08003da0

08001088 <printPreRun>:





void printPreRun(uint8_t clear, uint16_t T1, uint16_t T2, uint16_t T3){
 8001088:	b590      	push	{r4, r7, lr}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	4604      	mov	r4, r0
 8001090:	4608      	mov	r0, r1
 8001092:	4611      	mov	r1, r2
 8001094:	461a      	mov	r2, r3
 8001096:	4623      	mov	r3, r4
 8001098:	71fb      	strb	r3, [r7, #7]
 800109a:	4603      	mov	r3, r0
 800109c:	80bb      	strh	r3, [r7, #4]
 800109e:	460b      	mov	r3, r1
 80010a0:	807b      	strh	r3, [r7, #2]
 80010a2:	4613      	mov	r3, r2
 80010a4:	803b      	strh	r3, [r7, #0]
	if(clear)
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d002      	beq.n	80010b2 <printPreRun+0x2a>
		LCD_Clear();
 80010ac:	f7ff fc69 	bl	8000982 <LCD_Clear>
 80010b0:	e003      	b.n	80010ba <printPreRun+0x32>
	else
		LCD_setCursor(0,0);
 80010b2:	2100      	movs	r1, #0
 80010b4:	2000      	movs	r0, #0
 80010b6:	f7ff fc6f 	bl	8000998 <LCD_setCursor>

	LCD_printString(">MENU PRINCIPAL");
 80010ba:	4843      	ldr	r0, [pc, #268]	@ (80011c8 <printPreRun+0x140>)
 80010bc:	f7ff fca0 	bl	8000a00 <LCD_printString>
	LCD_setCursor(1, 2);
 80010c0:	2102      	movs	r1, #2
 80010c2:	2001      	movs	r0, #1
 80010c4:	f7ff fc68 	bl	8000998 <LCD_setCursor>

	LCD_printString("Iniciar?");
 80010c8:	4840      	ldr	r0, [pc, #256]	@ (80011cc <printPreRun+0x144>)
 80010ca:	f7ff fc99 	bl	8000a00 <LCD_printString>

	//Imprimo T1
	LCD_setCursor(10, 1);
 80010ce:	2101      	movs	r1, #1
 80010d0:	200a      	movs	r0, #10
 80010d2:	f7ff fc61 	bl	8000998 <LCD_setCursor>
	if(T1 < 10)
 80010d6:	88bb      	ldrh	r3, [r7, #4]
 80010d8:	2b09      	cmp	r3, #9
 80010da:	d803      	bhi.n	80010e4 <printPreRun+0x5c>
		LCD_printString("T1:    ");
 80010dc:	483c      	ldr	r0, [pc, #240]	@ (80011d0 <printPreRun+0x148>)
 80010de:	f7ff fc8f 	bl	8000a00 <LCD_printString>
 80010e2:	e01a      	b.n	800111a <printPreRun+0x92>
	else if(T1 < 100)
 80010e4:	88bb      	ldrh	r3, [r7, #4]
 80010e6:	2b63      	cmp	r3, #99	@ 0x63
 80010e8:	d803      	bhi.n	80010f2 <printPreRun+0x6a>
		LCD_printString("T1:   ");
 80010ea:	483a      	ldr	r0, [pc, #232]	@ (80011d4 <printPreRun+0x14c>)
 80010ec:	f7ff fc88 	bl	8000a00 <LCD_printString>
 80010f0:	e013      	b.n	800111a <printPreRun+0x92>
	else if(T1 < 1000)
 80010f2:	88bb      	ldrh	r3, [r7, #4]
 80010f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80010f8:	d203      	bcs.n	8001102 <printPreRun+0x7a>
		LCD_printString("T1:  ");
 80010fa:	4837      	ldr	r0, [pc, #220]	@ (80011d8 <printPreRun+0x150>)
 80010fc:	f7ff fc80 	bl	8000a00 <LCD_printString>
 8001100:	e00b      	b.n	800111a <printPreRun+0x92>
	else if(T1 < 10000)
 8001102:	88bb      	ldrh	r3, [r7, #4]
 8001104:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001108:	4293      	cmp	r3, r2
 800110a:	d803      	bhi.n	8001114 <printPreRun+0x8c>
		LCD_printString("T1: ");
 800110c:	4833      	ldr	r0, [pc, #204]	@ (80011dc <printPreRun+0x154>)
 800110e:	f7ff fc77 	bl	8000a00 <LCD_printString>
 8001112:	e002      	b.n	800111a <printPreRun+0x92>
	else
		LCD_printString("T1:");
 8001114:	4832      	ldr	r0, [pc, #200]	@ (80011e0 <printPreRun+0x158>)
 8001116:	f7ff fc73 	bl	8000a00 <LCD_printString>

	LCD_printInt(T1);
 800111a:	88bb      	ldrh	r3, [r7, #4]
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff fc85 	bl	8000a2c <LCD_printInt>
	LCD_printString("us");
 8001122:	4830      	ldr	r0, [pc, #192]	@ (80011e4 <printPreRun+0x15c>)
 8001124:	f7ff fc6c 	bl	8000a00 <LCD_printString>

	//Imprimo T2
	LCD_setCursor(10, 2);
 8001128:	2102      	movs	r1, #2
 800112a:	200a      	movs	r0, #10
 800112c:	f7ff fc34 	bl	8000998 <LCD_setCursor>
	if(T2 < 10)
 8001130:	887b      	ldrh	r3, [r7, #2]
 8001132:	2b09      	cmp	r3, #9
 8001134:	d803      	bhi.n	800113e <printPreRun+0xb6>
		LCD_printString("T2:    ");
 8001136:	482c      	ldr	r0, [pc, #176]	@ (80011e8 <printPreRun+0x160>)
 8001138:	f7ff fc62 	bl	8000a00 <LCD_printString>
 800113c:	e011      	b.n	8001162 <printPreRun+0xda>
	else if(T2 < 100)
 800113e:	887b      	ldrh	r3, [r7, #2]
 8001140:	2b63      	cmp	r3, #99	@ 0x63
 8001142:	d803      	bhi.n	800114c <printPreRun+0xc4>
		LCD_printString("T2:   ");
 8001144:	4829      	ldr	r0, [pc, #164]	@ (80011ec <printPreRun+0x164>)
 8001146:	f7ff fc5b 	bl	8000a00 <LCD_printString>
 800114a:	e00a      	b.n	8001162 <printPreRun+0xda>
	else if(T2 < 1000)
 800114c:	887b      	ldrh	r3, [r7, #2]
 800114e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001152:	d203      	bcs.n	800115c <printPreRun+0xd4>
		LCD_printString("T2:  ");
 8001154:	4826      	ldr	r0, [pc, #152]	@ (80011f0 <printPreRun+0x168>)
 8001156:	f7ff fc53 	bl	8000a00 <LCD_printString>
 800115a:	e002      	b.n	8001162 <printPreRun+0xda>
	else
		LCD_printString("T2: ");
 800115c:	4825      	ldr	r0, [pc, #148]	@ (80011f4 <printPreRun+0x16c>)
 800115e:	f7ff fc4f 	bl	8000a00 <LCD_printString>

	LCD_printInt(T2);
 8001162:	887b      	ldrh	r3, [r7, #2]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff fc61 	bl	8000a2c <LCD_printInt>
	LCD_printString("ms");
 800116a:	4823      	ldr	r0, [pc, #140]	@ (80011f8 <printPreRun+0x170>)
 800116c:	f7ff fc48 	bl	8000a00 <LCD_printString>

	//Imprimo T3
	LCD_setCursor(10, 3);
 8001170:	2103      	movs	r1, #3
 8001172:	200a      	movs	r0, #10
 8001174:	f7ff fc10 	bl	8000998 <LCD_setCursor>
	if(T3 < 10)
 8001178:	883b      	ldrh	r3, [r7, #0]
 800117a:	2b09      	cmp	r3, #9
 800117c:	d803      	bhi.n	8001186 <printPreRun+0xfe>
		LCD_printString("T3:    ");
 800117e:	481f      	ldr	r0, [pc, #124]	@ (80011fc <printPreRun+0x174>)
 8001180:	f7ff fc3e 	bl	8000a00 <LCD_printString>
 8001184:	e011      	b.n	80011aa <printPreRun+0x122>
	else if(T3 < 100)
 8001186:	883b      	ldrh	r3, [r7, #0]
 8001188:	2b63      	cmp	r3, #99	@ 0x63
 800118a:	d803      	bhi.n	8001194 <printPreRun+0x10c>
		LCD_printString("T3:   ");
 800118c:	481c      	ldr	r0, [pc, #112]	@ (8001200 <printPreRun+0x178>)
 800118e:	f7ff fc37 	bl	8000a00 <LCD_printString>
 8001192:	e00a      	b.n	80011aa <printPreRun+0x122>
	else if(T3 < 1000)
 8001194:	883b      	ldrh	r3, [r7, #0]
 8001196:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800119a:	d203      	bcs.n	80011a4 <printPreRun+0x11c>
		LCD_printString("T3:  ");
 800119c:	4819      	ldr	r0, [pc, #100]	@ (8001204 <printPreRun+0x17c>)
 800119e:	f7ff fc2f 	bl	8000a00 <LCD_printString>
 80011a2:	e002      	b.n	80011aa <printPreRun+0x122>
	else
		LCD_printString("T3: ");
 80011a4:	4818      	ldr	r0, [pc, #96]	@ (8001208 <printPreRun+0x180>)
 80011a6:	f7ff fc2b 	bl	8000a00 <LCD_printString>

	LCD_printInt(T3);
 80011aa:	883b      	ldrh	r3, [r7, #0]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff fc3d 	bl	8000a2c <LCD_printInt>
	LCD_printString("ms");
 80011b2:	4811      	ldr	r0, [pc, #68]	@ (80011f8 <printPreRun+0x170>)
 80011b4:	f7ff fc24 	bl	8000a00 <LCD_printString>

	DELAY_POST_PRINT;
 80011b8:	2096      	movs	r0, #150	@ 0x96
 80011ba:	f001 fb4f 	bl	800285c <HAL_Delay>
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd90      	pop	{r4, r7, pc}
 80011c6:	bf00      	nop
 80011c8:	08003d10 	.word	0x08003d10
 80011cc:	08003da8 	.word	0x08003da8
 80011d0:	08003db4 	.word	0x08003db4
 80011d4:	08003dbc 	.word	0x08003dbc
 80011d8:	08003dc4 	.word	0x08003dc4
 80011dc:	08003dcc 	.word	0x08003dcc
 80011e0:	08003d30 	.word	0x08003d30
 80011e4:	08003dd4 	.word	0x08003dd4
 80011e8:	08003dd8 	.word	0x08003dd8
 80011ec:	08003de0 	.word	0x08003de0
 80011f0:	08003de8 	.word	0x08003de8
 80011f4:	08003df0 	.word	0x08003df0
 80011f8:	08003df8 	.word	0x08003df8
 80011fc:	08003dfc 	.word	0x08003dfc
 8001200:	08003e04 	.word	0x08003e04
 8001204:	08003e0c 	.word	0x08003e0c
 8001208:	08003e14 	.word	0x08003e14

0800120c <printRunning>:



void printRunning(uint16_t T1, uint16_t T2, uint16_t T3){
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	80fb      	strh	r3, [r7, #6]
 8001216:	460b      	mov	r3, r1
 8001218:	80bb      	strh	r3, [r7, #4]
 800121a:	4613      	mov	r3, r2
 800121c:	807b      	strh	r3, [r7, #2]
	LCD_Clear();
 800121e:	f7ff fbb0 	bl	8000982 <LCD_Clear>
	LCD_printString("ARMANDO EN   ...");
 8001222:	4850      	ldr	r0, [pc, #320]	@ (8001364 <printRunning+0x158>)
 8001224:	f7ff fbec 	bl	8000a00 <LCD_printString>
	LCD_setCursor(1, 2);
 8001228:	2102      	movs	r1, #2
 800122a:	2001      	movs	r0, #1
 800122c:	f7ff fbb4 	bl	8000998 <LCD_setCursor>

	//Imprimo T1
	LCD_setCursor(2, 1);
 8001230:	2101      	movs	r1, #1
 8001232:	2002      	movs	r0, #2
 8001234:	f7ff fbb0 	bl	8000998 <LCD_setCursor>
	if(T1 < 10)
 8001238:	88fb      	ldrh	r3, [r7, #6]
 800123a:	2b09      	cmp	r3, #9
 800123c:	d803      	bhi.n	8001246 <printRunning+0x3a>
		LCD_printString("T1:        ");
 800123e:	484a      	ldr	r0, [pc, #296]	@ (8001368 <printRunning+0x15c>)
 8001240:	f7ff fbde 	bl	8000a00 <LCD_printString>
 8001244:	e01a      	b.n	800127c <printRunning+0x70>
	else if(T1 < 100)
 8001246:	88fb      	ldrh	r3, [r7, #6]
 8001248:	2b63      	cmp	r3, #99	@ 0x63
 800124a:	d803      	bhi.n	8001254 <printRunning+0x48>
		LCD_printString("T1:       ");
 800124c:	4847      	ldr	r0, [pc, #284]	@ (800136c <printRunning+0x160>)
 800124e:	f7ff fbd7 	bl	8000a00 <LCD_printString>
 8001252:	e013      	b.n	800127c <printRunning+0x70>
	else if(T1 < 1000)
 8001254:	88fb      	ldrh	r3, [r7, #6]
 8001256:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800125a:	d203      	bcs.n	8001264 <printRunning+0x58>
		LCD_printString("T1:      ");
 800125c:	4844      	ldr	r0, [pc, #272]	@ (8001370 <printRunning+0x164>)
 800125e:	f7ff fbcf 	bl	8000a00 <LCD_printString>
 8001262:	e00b      	b.n	800127c <printRunning+0x70>
	else if(T1 < 10000)
 8001264:	88fb      	ldrh	r3, [r7, #6]
 8001266:	f242 720f 	movw	r2, #9999	@ 0x270f
 800126a:	4293      	cmp	r3, r2
 800126c:	d803      	bhi.n	8001276 <printRunning+0x6a>
		LCD_printString("T1:     ");
 800126e:	4841      	ldr	r0, [pc, #260]	@ (8001374 <printRunning+0x168>)
 8001270:	f7ff fbc6 	bl	8000a00 <LCD_printString>
 8001274:	e002      	b.n	800127c <printRunning+0x70>
	else
		LCD_printString("T1:    ");
 8001276:	4840      	ldr	r0, [pc, #256]	@ (8001378 <printRunning+0x16c>)
 8001278:	f7ff fbc2 	bl	8000a00 <LCD_printString>

	LCD_printInt(T1);
 800127c:	88fb      	ldrh	r3, [r7, #6]
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff fbd4 	bl	8000a2c <LCD_printInt>
	LCD_printString("  us");
 8001284:	483d      	ldr	r0, [pc, #244]	@ (800137c <printRunning+0x170>)
 8001286:	f7ff fbbb 	bl	8000a00 <LCD_printString>

	//Imprimo T2
	LCD_setCursor(2, 2);
 800128a:	2102      	movs	r1, #2
 800128c:	2002      	movs	r0, #2
 800128e:	f7ff fb83 	bl	8000998 <LCD_setCursor>
	if(T2 < 10)
 8001292:	88bb      	ldrh	r3, [r7, #4]
 8001294:	2b09      	cmp	r3, #9
 8001296:	d803      	bhi.n	80012a0 <printRunning+0x94>
		LCD_printString("T2:        ");
 8001298:	4839      	ldr	r0, [pc, #228]	@ (8001380 <printRunning+0x174>)
 800129a:	f7ff fbb1 	bl	8000a00 <LCD_printString>
 800129e:	e011      	b.n	80012c4 <printRunning+0xb8>
	else if(T2 < 100)
 80012a0:	88bb      	ldrh	r3, [r7, #4]
 80012a2:	2b63      	cmp	r3, #99	@ 0x63
 80012a4:	d803      	bhi.n	80012ae <printRunning+0xa2>
		LCD_printString("T2:       ");
 80012a6:	4837      	ldr	r0, [pc, #220]	@ (8001384 <printRunning+0x178>)
 80012a8:	f7ff fbaa 	bl	8000a00 <LCD_printString>
 80012ac:	e00a      	b.n	80012c4 <printRunning+0xb8>
	else if(T2 < 1000)
 80012ae:	88bb      	ldrh	r3, [r7, #4]
 80012b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80012b4:	d203      	bcs.n	80012be <printRunning+0xb2>
		LCD_printString("T2:      ");
 80012b6:	4834      	ldr	r0, [pc, #208]	@ (8001388 <printRunning+0x17c>)
 80012b8:	f7ff fba2 	bl	8000a00 <LCD_printString>
 80012bc:	e002      	b.n	80012c4 <printRunning+0xb8>
	else
		LCD_printString("T2:     ");
 80012be:	4833      	ldr	r0, [pc, #204]	@ (800138c <printRunning+0x180>)
 80012c0:	f7ff fb9e 	bl	8000a00 <LCD_printString>

	LCD_printInt(T2);
 80012c4:	88bb      	ldrh	r3, [r7, #4]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fbb0 	bl	8000a2c <LCD_printInt>
	LCD_printString("  ms");
 80012cc:	4830      	ldr	r0, [pc, #192]	@ (8001390 <printRunning+0x184>)
 80012ce:	f7ff fb97 	bl	8000a00 <LCD_printString>

	//Imprimo T3
	LCD_setCursor(2, 3);
 80012d2:	2103      	movs	r1, #3
 80012d4:	2002      	movs	r0, #2
 80012d6:	f7ff fb5f 	bl	8000998 <LCD_setCursor>
	if(T3 < 10)
 80012da:	887b      	ldrh	r3, [r7, #2]
 80012dc:	2b09      	cmp	r3, #9
 80012de:	d803      	bhi.n	80012e8 <printRunning+0xdc>
		LCD_printString("T3:        ");
 80012e0:	482c      	ldr	r0, [pc, #176]	@ (8001394 <printRunning+0x188>)
 80012e2:	f7ff fb8d 	bl	8000a00 <LCD_printString>
 80012e6:	e011      	b.n	800130c <printRunning+0x100>
	else if(T3 < 100)
 80012e8:	887b      	ldrh	r3, [r7, #2]
 80012ea:	2b63      	cmp	r3, #99	@ 0x63
 80012ec:	d803      	bhi.n	80012f6 <printRunning+0xea>
		LCD_printString("T3:       ");
 80012ee:	482a      	ldr	r0, [pc, #168]	@ (8001398 <printRunning+0x18c>)
 80012f0:	f7ff fb86 	bl	8000a00 <LCD_printString>
 80012f4:	e00a      	b.n	800130c <printRunning+0x100>
	else if(T3 < 1000)
 80012f6:	887b      	ldrh	r3, [r7, #2]
 80012f8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80012fc:	d203      	bcs.n	8001306 <printRunning+0xfa>
		LCD_printString("T3:      ");
 80012fe:	4827      	ldr	r0, [pc, #156]	@ (800139c <printRunning+0x190>)
 8001300:	f7ff fb7e 	bl	8000a00 <LCD_printString>
 8001304:	e002      	b.n	800130c <printRunning+0x100>
	else
		LCD_printString("T3:     ");
 8001306:	4826      	ldr	r0, [pc, #152]	@ (80013a0 <printRunning+0x194>)
 8001308:	f7ff fb7a 	bl	8000a00 <LCD_printString>

	LCD_printInt(T3);
 800130c:	887b      	ldrh	r3, [r7, #2]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff fb8c 	bl	8000a2c <LCD_printInt>
	LCD_printString("  ms");
 8001314:	481e      	ldr	r0, [pc, #120]	@ (8001390 <printRunning+0x184>)
 8001316:	f7ff fb73 	bl	8000a00 <LCD_printString>

	for(uint8_t t = 5; t > 0; t--){
 800131a:	2305      	movs	r3, #5
 800131c:	73fb      	strb	r3, [r7, #15]
 800131e:	e00f      	b.n	8001340 <printRunning+0x134>
		LCD_setCursor(12, 0);
 8001320:	2100      	movs	r1, #0
 8001322:	200c      	movs	r0, #12
 8001324:	f7ff fb38 	bl	8000998 <LCD_setCursor>
		LCD_printInt(t);
 8001328:	7bfb      	ldrb	r3, [r7, #15]
 800132a:	b29b      	uxth	r3, r3
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff fb7d 	bl	8000a2c <LCD_printInt>
		HAL_Delay(1000);
 8001332:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001336:	f001 fa91 	bl	800285c <HAL_Delay>
	for(uint8_t t = 5; t > 0; t--){
 800133a:	7bfb      	ldrb	r3, [r7, #15]
 800133c:	3b01      	subs	r3, #1
 800133e:	73fb      	strb	r3, [r7, #15]
 8001340:	7bfb      	ldrb	r3, [r7, #15]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1ec      	bne.n	8001320 <printRunning+0x114>
	}

	LCD_setCursor(0, 0);
 8001346:	2100      	movs	r1, #0
 8001348:	2000      	movs	r0, #0
 800134a:	f7ff fb25 	bl	8000998 <LCD_setCursor>
	LCD_printString(">ESPERANDO FLANCO...");
 800134e:	4815      	ldr	r0, [pc, #84]	@ (80013a4 <printRunning+0x198>)
 8001350:	f7ff fb56 	bl	8000a00 <LCD_printString>


	DELAY_POST_PRINT;
 8001354:	2096      	movs	r0, #150	@ 0x96
 8001356:	f001 fa81 	bl	800285c <HAL_Delay>

}
 800135a:	bf00      	nop
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	08003e1c 	.word	0x08003e1c
 8001368:	08003e30 	.word	0x08003e30
 800136c:	08003e3c 	.word	0x08003e3c
 8001370:	08003e48 	.word	0x08003e48
 8001374:	08003e54 	.word	0x08003e54
 8001378:	08003db4 	.word	0x08003db4
 800137c:	08003e60 	.word	0x08003e60
 8001380:	08003e68 	.word	0x08003e68
 8001384:	08003e74 	.word	0x08003e74
 8001388:	08003e80 	.word	0x08003e80
 800138c:	08003e8c 	.word	0x08003e8c
 8001390:	08003e98 	.word	0x08003e98
 8001394:	08003ea0 	.word	0x08003ea0
 8001398:	08003eac 	.word	0x08003eac
 800139c:	08003eb8 	.word	0x08003eb8
 80013a0:	08003ec4 	.word	0x08003ec4
 80013a4:	08003ed0 	.word	0x08003ed0

080013a8 <printTriggered>:



void printTriggered(){
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
	LCD_Clear();
 80013ac:	f7ff fae9 	bl	8000982 <LCD_Clear>

	LCD_setCursor(1, 1);
 80013b0:	2101      	movs	r1, #1
 80013b2:	2001      	movs	r0, #1
 80013b4:	f7ff faf0 	bl	8000998 <LCD_setCursor>
	LCD_printString("DISPARO EFECTUADO!");
 80013b8:	4802      	ldr	r0, [pc, #8]	@ (80013c4 <printTriggered+0x1c>)
 80013ba:	f7ff fb21 	bl	8000a00 <LCD_printString>

}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	08003ee8 	.word	0x08003ee8

080013c8 <printViewConfigLogT1>:





void printViewConfigLogT1(uint8_t clear, uint8_t logicaT){
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	460a      	mov	r2, r1
 80013d2:	71fb      	strb	r3, [r7, #7]
 80013d4:	4613      	mov	r3, r2
 80013d6:	71bb      	strb	r3, [r7, #6]
	if(clear)
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d002      	beq.n	80013e4 <printViewConfigLogT1+0x1c>
		LCD_Clear();
 80013de:	f7ff fad0 	bl	8000982 <LCD_Clear>
 80013e2:	e003      	b.n	80013ec <printViewConfigLogT1+0x24>
	else
		LCD_setCursor(0,0);
 80013e4:	2100      	movs	r1, #0
 80013e6:	2000      	movs	r0, #0
 80013e8:	f7ff fad6 	bl	8000998 <LCD_setCursor>

	LCD_printString(">CONFIGURACIONES");
 80013ec:	480d      	ldr	r0, [pc, #52]	@ (8001424 <printViewConfigLogT1+0x5c>)
 80013ee:	f7ff fb07 	bl	8000a00 <LCD_printString>

	LCD_setCursor(1, 2);
 80013f2:	2102      	movs	r1, #2
 80013f4:	2001      	movs	r0, #1
 80013f6:	f7ff facf 	bl	8000998 <LCD_setCursor>
	LCD_printString("Q1_on:   ");
 80013fa:	480b      	ldr	r0, [pc, #44]	@ (8001428 <printViewConfigLogT1+0x60>)
 80013fc:	f7ff fb00 	bl	8000a00 <LCD_printString>
	if(logicaT) {
 8001400:	79bb      	ldrb	r3, [r7, #6]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d003      	beq.n	800140e <printViewConfigLogT1+0x46>
		LCD_printString("HIGH");
 8001406:	4809      	ldr	r0, [pc, #36]	@ (800142c <printViewConfigLogT1+0x64>)
 8001408:	f7ff fafa 	bl	8000a00 <LCD_printString>
 800140c:	e002      	b.n	8001414 <printViewConfigLogT1+0x4c>
	} else {
		LCD_printString(" LOW");
 800140e:	4808      	ldr	r0, [pc, #32]	@ (8001430 <printViewConfigLogT1+0x68>)
 8001410:	f7ff faf6 	bl	8000a00 <LCD_printString>
	}

	DELAY_POST_PRINT;
 8001414:	2096      	movs	r0, #150	@ 0x96
 8001416:	f001 fa21 	bl	800285c <HAL_Delay>
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	08003efc 	.word	0x08003efc
 8001428:	08003f2c 	.word	0x08003f2c
 800142c:	08003f38 	.word	0x08003f38
 8001430:	08003f40 	.word	0x08003f40

08001434 <printViewConfigLogT2>:


void printViewConfigLogT2(uint8_t clear, uint8_t logicaT){
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	460a      	mov	r2, r1
 800143e:	71fb      	strb	r3, [r7, #7]
 8001440:	4613      	mov	r3, r2
 8001442:	71bb      	strb	r3, [r7, #6]
	if(clear)
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d002      	beq.n	8001450 <printViewConfigLogT2+0x1c>
		LCD_Clear();
 800144a:	f7ff fa9a 	bl	8000982 <LCD_Clear>
 800144e:	e003      	b.n	8001458 <printViewConfigLogT2+0x24>
	else
		LCD_setCursor(0,0);
 8001450:	2100      	movs	r1, #0
 8001452:	2000      	movs	r0, #0
 8001454:	f7ff faa0 	bl	8000998 <LCD_setCursor>

	LCD_printString(">CONFIGURACIONES");
 8001458:	480d      	ldr	r0, [pc, #52]	@ (8001490 <printViewConfigLogT2+0x5c>)
 800145a:	f7ff fad1 	bl	8000a00 <LCD_printString>

	LCD_setCursor(1, 2);
 800145e:	2102      	movs	r1, #2
 8001460:	2001      	movs	r0, #1
 8001462:	f7ff fa99 	bl	8000998 <LCD_setCursor>
	LCD_printString("Q2_on:   ");
 8001466:	480b      	ldr	r0, [pc, #44]	@ (8001494 <printViewConfigLogT2+0x60>)
 8001468:	f7ff faca 	bl	8000a00 <LCD_printString>
	if(logicaT) {
 800146c:	79bb      	ldrb	r3, [r7, #6]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d003      	beq.n	800147a <printViewConfigLogT2+0x46>
		LCD_printString("HIGH");
 8001472:	4809      	ldr	r0, [pc, #36]	@ (8001498 <printViewConfigLogT2+0x64>)
 8001474:	f7ff fac4 	bl	8000a00 <LCD_printString>
 8001478:	e002      	b.n	8001480 <printViewConfigLogT2+0x4c>
	} else {
		LCD_printString(" LOW");
 800147a:	4808      	ldr	r0, [pc, #32]	@ (800149c <printViewConfigLogT2+0x68>)
 800147c:	f7ff fac0 	bl	8000a00 <LCD_printString>
	}

	DELAY_POST_PRINT;
 8001480:	2096      	movs	r0, #150	@ 0x96
 8001482:	f001 f9eb 	bl	800285c <HAL_Delay>
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	08003efc 	.word	0x08003efc
 8001494:	08003f48 	.word	0x08003f48
 8001498:	08003f38 	.word	0x08003f38
 800149c:	08003f40 	.word	0x08003f40

080014a0 <printEditConfigLogT1>:





void printEditConfigLogT1(uint8_t clear, uint8_t logicaT){
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	460a      	mov	r2, r1
 80014aa:	71fb      	strb	r3, [r7, #7]
 80014ac:	4613      	mov	r3, r2
 80014ae:	71bb      	strb	r3, [r7, #6]
	if(clear)
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d002      	beq.n	80014bc <printEditConfigLogT1+0x1c>
		LCD_Clear();
 80014b6:	f7ff fa64 	bl	8000982 <LCD_Clear>
 80014ba:	e003      	b.n	80014c4 <printEditConfigLogT1+0x24>
	else
		LCD_setCursor(0,0);
 80014bc:	2100      	movs	r1, #0
 80014be:	2000      	movs	r0, #0
 80014c0:	f7ff fa6a 	bl	8000998 <LCD_setCursor>

	LCD_printString(">CONFIGURACIONES");
 80014c4:	480e      	ldr	r0, [pc, #56]	@ (8001500 <printEditConfigLogT1+0x60>)
 80014c6:	f7ff fa9b 	bl	8000a00 <LCD_printString>

	LCD_setCursor(1, 2);
 80014ca:	2102      	movs	r1, #2
 80014cc:	2001      	movs	r0, #1
 80014ce:	f7ff fa63 	bl	8000998 <LCD_setCursor>
	LCD_printString("Q1_on: > ");
 80014d2:	480c      	ldr	r0, [pc, #48]	@ (8001504 <printEditConfigLogT1+0x64>)
 80014d4:	f7ff fa94 	bl	8000a00 <LCD_printString>
	if(logicaT) {
 80014d8:	79bb      	ldrb	r3, [r7, #6]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d003      	beq.n	80014e6 <printEditConfigLogT1+0x46>
		LCD_printString("HIGH");
 80014de:	480a      	ldr	r0, [pc, #40]	@ (8001508 <printEditConfigLogT1+0x68>)
 80014e0:	f7ff fa8e 	bl	8000a00 <LCD_printString>
 80014e4:	e002      	b.n	80014ec <printEditConfigLogT1+0x4c>
	} else {
		LCD_printString(" LOW");
 80014e6:	4809      	ldr	r0, [pc, #36]	@ (800150c <printEditConfigLogT1+0x6c>)
 80014e8:	f7ff fa8a 	bl	8000a00 <LCD_printString>
	}

	LCD_printString(" <");
 80014ec:	4808      	ldr	r0, [pc, #32]	@ (8001510 <printEditConfigLogT1+0x70>)
 80014ee:	f7ff fa87 	bl	8000a00 <LCD_printString>

	DELAY_POST_PRINT;
 80014f2:	2096      	movs	r0, #150	@ 0x96
 80014f4:	f001 f9b2 	bl	800285c <HAL_Delay>
}
 80014f8:	bf00      	nop
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	08003efc 	.word	0x08003efc
 8001504:	08003f54 	.word	0x08003f54
 8001508:	08003f38 	.word	0x08003f38
 800150c:	08003f40 	.word	0x08003f40
 8001510:	08003d94 	.word	0x08003d94

08001514 <printEditConfigLogT2>:




void printEditConfigLogT2(uint8_t clear, uint8_t logicaT){
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	460a      	mov	r2, r1
 800151e:	71fb      	strb	r3, [r7, #7]
 8001520:	4613      	mov	r3, r2
 8001522:	71bb      	strb	r3, [r7, #6]
	if(clear)
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d002      	beq.n	8001530 <printEditConfigLogT2+0x1c>
		LCD_Clear();
 800152a:	f7ff fa2a 	bl	8000982 <LCD_Clear>
 800152e:	e003      	b.n	8001538 <printEditConfigLogT2+0x24>
	else
		LCD_setCursor(0,0);
 8001530:	2100      	movs	r1, #0
 8001532:	2000      	movs	r0, #0
 8001534:	f7ff fa30 	bl	8000998 <LCD_setCursor>

	LCD_printString(">CONFIGURACIONES");
 8001538:	480e      	ldr	r0, [pc, #56]	@ (8001574 <printEditConfigLogT2+0x60>)
 800153a:	f7ff fa61 	bl	8000a00 <LCD_printString>

	LCD_setCursor(1, 2);
 800153e:	2102      	movs	r1, #2
 8001540:	2001      	movs	r0, #1
 8001542:	f7ff fa29 	bl	8000998 <LCD_setCursor>
	LCD_printString("Q2_on: > ");
 8001546:	480c      	ldr	r0, [pc, #48]	@ (8001578 <printEditConfigLogT2+0x64>)
 8001548:	f7ff fa5a 	bl	8000a00 <LCD_printString>
	if(logicaT) {
 800154c:	79bb      	ldrb	r3, [r7, #6]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d003      	beq.n	800155a <printEditConfigLogT2+0x46>
		LCD_printString("HIGH");
 8001552:	480a      	ldr	r0, [pc, #40]	@ (800157c <printEditConfigLogT2+0x68>)
 8001554:	f7ff fa54 	bl	8000a00 <LCD_printString>
 8001558:	e002      	b.n	8001560 <printEditConfigLogT2+0x4c>
	} else {
		LCD_printString(" LOW");
 800155a:	4809      	ldr	r0, [pc, #36]	@ (8001580 <printEditConfigLogT2+0x6c>)
 800155c:	f7ff fa50 	bl	8000a00 <LCD_printString>
	}

	LCD_printString(" <");
 8001560:	4808      	ldr	r0, [pc, #32]	@ (8001584 <printEditConfigLogT2+0x70>)
 8001562:	f7ff fa4d 	bl	8000a00 <LCD_printString>

	DELAY_POST_PRINT;
 8001566:	2096      	movs	r0, #150	@ 0x96
 8001568:	f001 f978 	bl	800285c <HAL_Delay>
}
 800156c:	bf00      	nop
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	08003efc 	.word	0x08003efc
 8001578:	08003f60 	.word	0x08003f60
 800157c:	08003f38 	.word	0x08003f38
 8001580:	08003f40 	.word	0x08003f40
 8001584:	08003d94 	.word	0x08003d94

08001588 <printConfigVolver>:



void printConfigVolver(uint8_t clear){
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	71fb      	strb	r3, [r7, #7]
	if(clear)
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d002      	beq.n	800159e <printConfigVolver+0x16>
		LCD_Clear();
 8001598:	f7ff f9f3 	bl	8000982 <LCD_Clear>
 800159c:	e003      	b.n	80015a6 <printConfigVolver+0x1e>
	else
		LCD_setCursor(0,0);
 800159e:	2100      	movs	r1, #0
 80015a0:	2000      	movs	r0, #0
 80015a2:	f7ff f9f9 	bl	8000998 <LCD_setCursor>

	LCD_printString(">CONFIGURACIONES");
 80015a6:	4808      	ldr	r0, [pc, #32]	@ (80015c8 <printConfigVolver+0x40>)
 80015a8:	f7ff fa2a 	bl	8000a00 <LCD_printString>

	LCD_setCursor(1, 2);
 80015ac:	2102      	movs	r1, #2
 80015ae:	2001      	movs	r0, #1
 80015b0:	f7ff f9f2 	bl	8000998 <LCD_setCursor>
	LCD_printString("Volver?");
 80015b4:	4805      	ldr	r0, [pc, #20]	@ (80015cc <printConfigVolver+0x44>)
 80015b6:	f7ff fa23 	bl	8000a00 <LCD_printString>

	DELAY_POST_PRINT;
 80015ba:	2096      	movs	r0, #150	@ 0x96
 80015bc:	f001 f94e 	bl	800285c <HAL_Delay>
}
 80015c0:	bf00      	nop
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	08003efc 	.word	0x08003efc
 80015cc:	08003f6c 	.word	0x08003f6c

080015d0 <printConfigEntrar>:





void printConfigEntrar(uint8_t clear){
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	71fb      	strb	r3, [r7, #7]
	if(clear)
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d002      	beq.n	80015e6 <printConfigEntrar+0x16>
		LCD_Clear();
 80015e0:	f7ff f9cf 	bl	8000982 <LCD_Clear>
 80015e4:	e003      	b.n	80015ee <printConfigEntrar+0x1e>
	else
		LCD_setCursor(0,0);
 80015e6:	2100      	movs	r1, #0
 80015e8:	2000      	movs	r0, #0
 80015ea:	f7ff f9d5 	bl	8000998 <LCD_setCursor>

	LCD_printString(">MENU PRINCIPAL");
 80015ee:	4808      	ldr	r0, [pc, #32]	@ (8001610 <printConfigEntrar+0x40>)
 80015f0:	f7ff fa06 	bl	8000a00 <LCD_printString>

	LCD_setCursor(1, 2);
 80015f4:	2102      	movs	r1, #2
 80015f6:	2001      	movs	r0, #1
 80015f8:	f7ff f9ce 	bl	8000998 <LCD_setCursor>
	LCD_printString("Configuraciones");
 80015fc:	4805      	ldr	r0, [pc, #20]	@ (8001614 <printConfigEntrar+0x44>)
 80015fe:	f7ff f9ff 	bl	8000a00 <LCD_printString>

	DELAY_POST_PRINT;
 8001602:	2096      	movs	r0, #150	@ 0x96
 8001604:	f001 f92a 	bl	800285c <HAL_Delay>
}
 8001608:	bf00      	nop
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	08003d10 	.word	0x08003d10
 8001614:	08003f74 	.word	0x08003f74

08001618 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800161e:	f001 f8bb 	bl	8002798 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001622:	f000 fc95 	bl	8001f50 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001626:	f000 fd29 	bl	800207c <MX_GPIO_Init>
	MX_TIM1_Init();
 800162a:	f000 fcd7 	bl	8001fdc <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	//Apago las interrupciones
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800162e:	2028      	movs	r0, #40	@ 0x28
 8001630:	f001 fa5d 	bl	8002aee <HAL_NVIC_DisableIRQ>
	HAL_TIM_Base_Start(&htim1);
 8001634:	48b6      	ldr	r0, [pc, #728]	@ (8001910 <main+0x2f8>)
 8001636:	f002 f86f 	bl	8003718 <HAL_TIM_Base_Start>

	//Inicializacion del LCD
	LCD_Init();
 800163a:	f7ff f977 	bl	800092c <LCD_Init>
	LCD_setCursor(4, 0);
 800163e:	2100      	movs	r1, #0
 8001640:	2004      	movs	r0, #4
 8001642:	f7ff f9a9 	bl	8000998 <LCD_setCursor>
	LCD_printString("TEMPORIZADOR");
 8001646:	48b3      	ldr	r0, [pc, #716]	@ (8001914 <main+0x2fc>)
 8001648:	f7ff f9da 	bl	8000a00 <LCD_printString>
	LCD_setCursor(4, 1);
 800164c:	2101      	movs	r1, #1
 800164e:	2004      	movs	r0, #4
 8001650:	f7ff f9a2 	bl	8000998 <LCD_setCursor>
	LCD_printString("DE  DISPAROS");
 8001654:	48b0      	ldr	r0, [pc, #704]	@ (8001918 <main+0x300>)
 8001656:	f7ff f9d3 	bl	8000a00 <LCD_printString>
	LCD_setCursor(5, 3);
 800165a:	2103      	movs	r1, #3
 800165c:	2005      	movs	r0, #5
 800165e:	f7ff f99b 	bl	8000998 <LCD_setCursor>
	LCD_printString("-  LEME  -");
 8001662:	48ae      	ldr	r0, [pc, #696]	@ (800191c <main+0x304>)
 8001664:	f7ff f9cc 	bl	8000a00 <LCD_printString>
	HAL_Delay(2500);
 8001668:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 800166c:	f001 f8f6 	bl	800285c <HAL_Delay>
	printHome(1);
 8001670:	2001      	movs	r0, #1
 8001672:	f7ff fa77 	bl	8000b64 <printHome>

	menu = HOME;
 8001676:	4baa      	ldr	r3, [pc, #680]	@ (8001920 <main+0x308>)
 8001678:	2200      	movs	r2, #0
 800167a:	701a      	strb	r2, [r3, #0]
	int8_t encRead = readEncoder();
 800167c:	f000 ff5a 	bl	8002534 <readEncoder>
 8001680:	4603      	mov	r3, r0
 8001682:	71fb      	strb	r3, [r7, #7]
	T1_lcd = 10;
 8001684:	4ba7      	ldr	r3, [pc, #668]	@ (8001924 <main+0x30c>)
 8001686:	220a      	movs	r2, #10
 8001688:	801a      	strh	r2, [r3, #0]
	T2 = 0;
 800168a:	4ba7      	ldr	r3, [pc, #668]	@ (8001928 <main+0x310>)
 800168c:	2200      	movs	r2, #0
 800168e:	801a      	strh	r2, [r3, #0]
	T3 = 0;
 8001690:	4ba6      	ldr	r3, [pc, #664]	@ (800192c <main+0x314>)
 8001692:	2200      	movs	r2, #0
 8001694:	801a      	strh	r2, [r3, #0]
	modeT1 = T1_MS;
 8001696:	4ba6      	ldr	r3, [pc, #664]	@ (8001930 <main+0x318>)
 8001698:	2202      	movs	r2, #2
 800169a:	701a      	strb	r2, [r3, #0]
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		encRead = readEncoder();
 800169c:	f000 ff4a 	bl	8002534 <readEncoder>
 80016a0:	4603      	mov	r3, r0
 80016a2:	71fb      	strb	r3, [r7, #7]
		//HAL_Delay(1);

		switch (menu) {
 80016a4:	4b9e      	ldr	r3, [pc, #632]	@ (8001920 <main+0x308>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2b10      	cmp	r3, #16
 80016ac:	f200 8423 	bhi.w	8001ef6 <main+0x8de>
 80016b0:	a201      	add	r2, pc, #4	@ (adr r2, 80016b8 <main+0xa0>)
 80016b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016b6:	bf00      	nop
 80016b8:	080016fd 	.word	0x080016fd
 80016bc:	08001711 	.word	0x08001711
 80016c0:	0800197f 	.word	0x0800197f
 80016c4:	08001b93 	.word	0x08001b93
 80016c8:	080017af 	.word	0x080017af
 80016cc:	080019b3 	.word	0x080019b3
 80016d0:	08001be1 	.word	0x08001be1
 80016d4:	08001a31 	.word	0x08001a31
 80016d8:	08001c5f 	.word	0x08001c5f
 80016dc:	08001ef7 	.word	0x08001ef7
 80016e0:	08001d03 	.word	0x08001d03
 80016e4:	08001d55 	.word	0x08001d55
 80016e8:	08001d79 	.word	0x08001d79
 80016ec:	08001e11 	.word	0x08001e11
 80016f0:	08001d9b 	.word	0x08001d9b
 80016f4:	08001e45 	.word	0x08001e45
 80016f8:	08001ed5 	.word	0x08001ed5
		case HOME: //============================================================================== HOME
			if (readButton() == 1) {
 80016fc:	f000 ff4e 	bl	800259c <readButton>
 8001700:	4603      	mov	r3, r0
 8001702:	2b01      	cmp	r3, #1
 8001704:	f040 83fa 	bne.w	8001efc <main+0x8e4>
				switchToMenu(SELECT_T1);
 8001708:	2001      	movs	r0, #1
 800170a:	f000 fe3f 	bl	800238c <switchToMenu>
			}
			break;
 800170e:	e3f5      	b.n	8001efc <main+0x8e4>

		case SELECT_T1: //========================================================================= SELECT_T1
			if (encRead == 1) {
 8001710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d102      	bne.n	800171e <main+0x106>
				switchToMenu(SELECT_T2);
 8001718:	2002      	movs	r0, #2
 800171a:	f000 fe37 	bl	800238c <switchToMenu>
			}

			if (readButton() == 1) {
 800171e:	f000 ff3d 	bl	800259c <readButton>
 8001722:	4603      	mov	r3, r0
 8001724:	2b01      	cmp	r3, #1
 8001726:	f040 83ec 	bne.w	8001f02 <main+0x8ea>
				//Si las unidades son Grados o ms, entonces convierto el actual (que siempre estara en us)
				//a la unidad correspondiente.
				if (modeT1 == T1_GRADOS)
 800172a:	4b81      	ldr	r3, [pc, #516]	@ (8001930 <main+0x318>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d11f      	bne.n	8001772 <main+0x15a>
					T1_lcd = (uint16_t) (T1_lcd * 360.0 / 20000.0);
 8001732:	4b7c      	ldr	r3, [pc, #496]	@ (8001924 <main+0x30c>)
 8001734:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001738:	4618      	mov	r0, r3
 800173a:	f7fe fe5b 	bl	80003f4 <__aeabi_i2d>
 800173e:	f04f 0200 	mov.w	r2, #0
 8001742:	4b7c      	ldr	r3, [pc, #496]	@ (8001934 <main+0x31c>)
 8001744:	f7fe fec0 	bl	80004c8 <__aeabi_dmul>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	4610      	mov	r0, r2
 800174e:	4619      	mov	r1, r3
 8001750:	a36d      	add	r3, pc, #436	@ (adr r3, 8001908 <main+0x2f0>)
 8001752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001756:	f7fe ffe1 	bl	800071c <__aeabi_ddiv>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4610      	mov	r0, r2
 8001760:	4619      	mov	r1, r3
 8001762:	f7ff f8c3 	bl	80008ec <__aeabi_d2uiz>
 8001766:	4603      	mov	r3, r0
 8001768:	b29b      	uxth	r3, r3
 800176a:	b21a      	sxth	r2, r3
 800176c:	4b6d      	ldr	r3, [pc, #436]	@ (8001924 <main+0x30c>)
 800176e:	801a      	strh	r2, [r3, #0]
 8001770:	e019      	b.n	80017a6 <main+0x18e>
				else if (modeT1 == T1_MS)
 8001772:	4b6f      	ldr	r3, [pc, #444]	@ (8001930 <main+0x318>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b02      	cmp	r3, #2
 8001778:	d115      	bne.n	80017a6 <main+0x18e>
					T1_lcd = (uint16_t) (T1_lcd / 1000.0);
 800177a:	4b6a      	ldr	r3, [pc, #424]	@ (8001924 <main+0x30c>)
 800177c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001780:	4618      	mov	r0, r3
 8001782:	f7fe fe37 	bl	80003f4 <__aeabi_i2d>
 8001786:	f04f 0200 	mov.w	r2, #0
 800178a:	4b6b      	ldr	r3, [pc, #428]	@ (8001938 <main+0x320>)
 800178c:	f7fe ffc6 	bl	800071c <__aeabi_ddiv>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	4610      	mov	r0, r2
 8001796:	4619      	mov	r1, r3
 8001798:	f7ff f8a8 	bl	80008ec <__aeabi_d2uiz>
 800179c:	4603      	mov	r3, r0
 800179e:	b29b      	uxth	r3, r3
 80017a0:	b21a      	sxth	r2, r3
 80017a2:	4b60      	ldr	r3, [pc, #384]	@ (8001924 <main+0x30c>)
 80017a4:	801a      	strh	r2, [r3, #0]

				switchToMenu(EDIT_T1);
 80017a6:	2004      	movs	r0, #4
 80017a8:	f000 fdf0 	bl	800238c <switchToMenu>
			}
			break;
 80017ac:	e3a9      	b.n	8001f02 <main+0x8ea>

		case EDIT_T1: //========================================================================== EDIT_T1
			if (encRead != 0) {
 80017ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d079      	beq.n	80018aa <main+0x292>
				//Si giro el encoder, incrementa o decrementa segun la unidad.
				//Finalmente, actualizo el LCD.
				switch (modeT1) {
 80017b6:	4b5e      	ldr	r3, [pc, #376]	@ (8001930 <main+0x318>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d02a      	beq.n	8001814 <main+0x1fc>
 80017be:	2b02      	cmp	r3, #2
 80017c0:	dc69      	bgt.n	8001896 <main+0x27e>
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d043      	beq.n	800184e <main+0x236>
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d165      	bne.n	8001896 <main+0x27e>
				case T1_US:
					T1_lcd += encRead * MIN_SALTO_T1;
 80017ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	461a      	mov	r2, r3
 80017d2:	0092      	lsls	r2, r2, #2
 80017d4:	4413      	add	r3, r2
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	b29a      	uxth	r2, r3
 80017da:	4b52      	ldr	r3, [pc, #328]	@ (8001924 <main+0x30c>)
 80017dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	4413      	add	r3, r2
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	b21a      	sxth	r2, r3
 80017e8:	4b4e      	ldr	r3, [pc, #312]	@ (8001924 <main+0x30c>)
 80017ea:	801a      	strh	r2, [r3, #0]
					if (T1_lcd < 0)
 80017ec:	4b4d      	ldr	r3, [pc, #308]	@ (8001924 <main+0x30c>)
 80017ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	da02      	bge.n	80017fc <main+0x1e4>
						T1_lcd = 0;
 80017f6:	4b4b      	ldr	r3, [pc, #300]	@ (8001924 <main+0x30c>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	801a      	strh	r2, [r3, #0]
					if (T1_lcd > MAX_T1_US)
 80017fc:	4b49      	ldr	r3, [pc, #292]	@ (8001924 <main+0x30c>)
 80017fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001802:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001806:	4293      	cmp	r3, r2
 8001808:	dd40      	ble.n	800188c <main+0x274>
						T1_lcd = MAX_T1_US;
 800180a:	4b46      	ldr	r3, [pc, #280]	@ (8001924 <main+0x30c>)
 800180c:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001810:	801a      	strh	r2, [r3, #0]
					break;
 8001812:	e03b      	b.n	800188c <main+0x274>
				case T1_MS:
					T1_lcd += encRead;
 8001814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001818:	b29a      	uxth	r2, r3
 800181a:	4b42      	ldr	r3, [pc, #264]	@ (8001924 <main+0x30c>)
 800181c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001820:	b29b      	uxth	r3, r3
 8001822:	4413      	add	r3, r2
 8001824:	b29b      	uxth	r3, r3
 8001826:	b21a      	sxth	r2, r3
 8001828:	4b3e      	ldr	r3, [pc, #248]	@ (8001924 <main+0x30c>)
 800182a:	801a      	strh	r2, [r3, #0]
					if (T1_lcd < 0)
 800182c:	4b3d      	ldr	r3, [pc, #244]	@ (8001924 <main+0x30c>)
 800182e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001832:	2b00      	cmp	r3, #0
 8001834:	da02      	bge.n	800183c <main+0x224>
						T1_lcd = 0;
 8001836:	4b3b      	ldr	r3, [pc, #236]	@ (8001924 <main+0x30c>)
 8001838:	2200      	movs	r2, #0
 800183a:	801a      	strh	r2, [r3, #0]
					if (T1_lcd > MAX_T1_MS)
 800183c:	4b39      	ldr	r3, [pc, #228]	@ (8001924 <main+0x30c>)
 800183e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001842:	2b14      	cmp	r3, #20
 8001844:	dd24      	ble.n	8001890 <main+0x278>
						T1_lcd = MAX_T1_MS;
 8001846:	4b37      	ldr	r3, [pc, #220]	@ (8001924 <main+0x30c>)
 8001848:	2214      	movs	r2, #20
 800184a:	801a      	strh	r2, [r3, #0]
					break;
 800184c:	e020      	b.n	8001890 <main+0x278>
				case T1_GRADOS:
					T1_lcd += encRead;
 800184e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001852:	b29a      	uxth	r2, r3
 8001854:	4b33      	ldr	r3, [pc, #204]	@ (8001924 <main+0x30c>)
 8001856:	f9b3 3000 	ldrsh.w	r3, [r3]
 800185a:	b29b      	uxth	r3, r3
 800185c:	4413      	add	r3, r2
 800185e:	b29b      	uxth	r3, r3
 8001860:	b21a      	sxth	r2, r3
 8001862:	4b30      	ldr	r3, [pc, #192]	@ (8001924 <main+0x30c>)
 8001864:	801a      	strh	r2, [r3, #0]
					if (T1_lcd < 0)
 8001866:	4b2f      	ldr	r3, [pc, #188]	@ (8001924 <main+0x30c>)
 8001868:	f9b3 3000 	ldrsh.w	r3, [r3]
 800186c:	2b00      	cmp	r3, #0
 800186e:	da02      	bge.n	8001876 <main+0x25e>
						T1_lcd = 0;
 8001870:	4b2c      	ldr	r3, [pc, #176]	@ (8001924 <main+0x30c>)
 8001872:	2200      	movs	r2, #0
 8001874:	801a      	strh	r2, [r3, #0]
					if (T1_lcd > MAX_T1_GRADOS)
 8001876:	4b2b      	ldr	r3, [pc, #172]	@ (8001924 <main+0x30c>)
 8001878:	f9b3 3000 	ldrsh.w	r3, [r3]
 800187c:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8001880:	dd08      	ble.n	8001894 <main+0x27c>
						T1_lcd = MAX_T1_GRADOS;
 8001882:	4b28      	ldr	r3, [pc, #160]	@ (8001924 <main+0x30c>)
 8001884:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8001888:	801a      	strh	r2, [r3, #0]
					break;
 800188a:	e003      	b.n	8001894 <main+0x27c>
					break;
 800188c:	bf00      	nop
 800188e:	e002      	b.n	8001896 <main+0x27e>
					break;
 8001890:	bf00      	nop
 8001892:	e000      	b.n	8001896 <main+0x27e>
					break;
 8001894:	bf00      	nop
				}
				printEditT1(1, T1_lcd, modeT1);
 8001896:	4b23      	ldr	r3, [pc, #140]	@ (8001924 <main+0x30c>)
 8001898:	f9b3 3000 	ldrsh.w	r3, [r3]
 800189c:	b29b      	uxth	r3, r3
 800189e:	4a24      	ldr	r2, [pc, #144]	@ (8001930 <main+0x318>)
 80018a0:	7812      	ldrb	r2, [r2, #0]
 80018a2:	4619      	mov	r1, r3
 80018a4:	2001      	movs	r0, #1
 80018a6:	f7ff fa75 	bl	8000d94 <printEditT1>
			}

			switch (readButton()) {
 80018aa:	f000 fe77 	bl	800259c <readButton>
 80018ae:	4603      	mov	r3, r0
 80018b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b4:	d05d      	beq.n	8001972 <main+0x35a>
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d15f      	bne.n	800197a <main+0x362>
			case 1:
				switch (modeT1) {
 80018ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001930 <main+0x318>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d002      	beq.n	80018c8 <main+0x2b0>
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d03a      	beq.n	800193c <main+0x324>
					break;
				case T1_MS:
					T1_lcd = (uint16_t) (T1_lcd * 1000.0);
					break;
				default:
					break;
 80018c6:	e050      	b.n	800196a <main+0x352>
					T1_lcd = (uint16_t) (T1_lcd * 20000.0 / 360.0);
 80018c8:	4b16      	ldr	r3, [pc, #88]	@ (8001924 <main+0x30c>)
 80018ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7fe fd90 	bl	80003f4 <__aeabi_i2d>
 80018d4:	a30c      	add	r3, pc, #48	@ (adr r3, 8001908 <main+0x2f0>)
 80018d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018da:	f7fe fdf5 	bl	80004c8 <__aeabi_dmul>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	4610      	mov	r0, r2
 80018e4:	4619      	mov	r1, r3
 80018e6:	f04f 0200 	mov.w	r2, #0
 80018ea:	4b12      	ldr	r3, [pc, #72]	@ (8001934 <main+0x31c>)
 80018ec:	f7fe ff16 	bl	800071c <__aeabi_ddiv>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	4610      	mov	r0, r2
 80018f6:	4619      	mov	r1, r3
 80018f8:	f7fe fff8 	bl	80008ec <__aeabi_d2uiz>
 80018fc:	4603      	mov	r3, r0
 80018fe:	b29b      	uxth	r3, r3
 8001900:	b21a      	sxth	r2, r3
 8001902:	4b08      	ldr	r3, [pc, #32]	@ (8001924 <main+0x30c>)
 8001904:	801a      	strh	r2, [r3, #0]
					break;
 8001906:	e030      	b.n	800196a <main+0x352>
 8001908:	00000000 	.word	0x00000000
 800190c:	40d38800 	.word	0x40d38800
 8001910:	20000038 	.word	0x20000038
 8001914:	08003f84 	.word	0x08003f84
 8001918:	08003f94 	.word	0x08003f94
 800191c:	08003fa4 	.word	0x08003fa4
 8001920:	20000080 	.word	0x20000080
 8001924:	20000088 	.word	0x20000088
 8001928:	20000084 	.word	0x20000084
 800192c:	20000086 	.word	0x20000086
 8001930:	20000081 	.word	0x20000081
 8001934:	40768000 	.word	0x40768000
 8001938:	408f4000 	.word	0x408f4000
					T1_lcd = (uint16_t) (T1_lcd * 1000.0);
 800193c:	4ba2      	ldr	r3, [pc, #648]	@ (8001bc8 <main+0x5b0>)
 800193e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001942:	4618      	mov	r0, r3
 8001944:	f7fe fd56 	bl	80003f4 <__aeabi_i2d>
 8001948:	f04f 0200 	mov.w	r2, #0
 800194c:	4b9f      	ldr	r3, [pc, #636]	@ (8001bcc <main+0x5b4>)
 800194e:	f7fe fdbb 	bl	80004c8 <__aeabi_dmul>
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	4610      	mov	r0, r2
 8001958:	4619      	mov	r1, r3
 800195a:	f7fe ffc7 	bl	80008ec <__aeabi_d2uiz>
 800195e:	4603      	mov	r3, r0
 8001960:	b29b      	uxth	r3, r3
 8001962:	b21a      	sxth	r2, r3
 8001964:	4b98      	ldr	r3, [pc, #608]	@ (8001bc8 <main+0x5b0>)
 8001966:	801a      	strh	r2, [r3, #0]
					break;
 8001968:	bf00      	nop
				}
				switchToMenu(SELECT_T1);
 800196a:	2001      	movs	r0, #1
 800196c:	f000 fd0e 	bl	800238c <switchToMenu>
				break;
 8001970:	e004      	b.n	800197c <main+0x364>
			case -1:
				//Si realizo una pulsacion larga, entonces voy directo al menu de edicion de unidad
				switchToMenu(EDIT_UNIT_T1);
 8001972:	2007      	movs	r0, #7
 8001974:	f000 fd0a 	bl	800238c <switchToMenu>
				break;
 8001978:	e000      	b.n	800197c <main+0x364>
			default:
				break;
 800197a:	bf00      	nop
			}
			break;
 800197c:	e2e6      	b.n	8001f4c <main+0x934>

		case SELECT_T2: //======================================================================== SELECT_T2
			if (encRead == 1) {
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d103      	bne.n	800198e <main+0x376>
				switchToMenu(SELECT_T3);
 8001986:	2003      	movs	r0, #3
 8001988:	f000 fd00 	bl	800238c <switchToMenu>
 800198c:	e007      	b.n	800199e <main+0x386>
			}
			else if (encRead == -1) {
 800198e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001996:	d102      	bne.n	800199e <main+0x386>
				switchToMenu(SELECT_T1);
 8001998:	2001      	movs	r0, #1
 800199a:	f000 fcf7 	bl	800238c <switchToMenu>
			}

			if (readButton() == 1) {
 800199e:	f000 fdfd 	bl	800259c <readButton>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	f040 82af 	bne.w	8001f08 <main+0x8f0>
				switchToMenu(EDIT_T2);
 80019aa:	2005      	movs	r0, #5
 80019ac:	f000 fcee 	bl	800238c <switchToMenu>
			}
			break;
 80019b0:	e2aa      	b.n	8001f08 <main+0x8f0>

		case EDIT_T2: //========================================================================== EDIT_T2
			if (encRead != 0) {
 80019b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d030      	beq.n	8001a1c <main+0x404>
				T2 += encRead * MIN_SALTO_T2;
 80019ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019be:	b29b      	uxth	r3, r3
 80019c0:	461a      	mov	r2, r3
 80019c2:	0092      	lsls	r2, r2, #2
 80019c4:	4413      	add	r3, r2
 80019c6:	461a      	mov	r2, r3
 80019c8:	0091      	lsls	r1, r2, #2
 80019ca:	461a      	mov	r2, r3
 80019cc:	460b      	mov	r3, r1
 80019ce:	4413      	add	r3, r2
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	4b7e      	ldr	r3, [pc, #504]	@ (8001bd0 <main+0x5b8>)
 80019d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019da:	b29b      	uxth	r3, r3
 80019dc:	4413      	add	r3, r2
 80019de:	b29b      	uxth	r3, r3
 80019e0:	b21a      	sxth	r2, r3
 80019e2:	4b7b      	ldr	r3, [pc, #492]	@ (8001bd0 <main+0x5b8>)
 80019e4:	801a      	strh	r2, [r3, #0]
				if (T2 < MIN_SALTO_T2)
 80019e6:	4b7a      	ldr	r3, [pc, #488]	@ (8001bd0 <main+0x5b8>)
 80019e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ec:	2b31      	cmp	r3, #49	@ 0x31
 80019ee:	dc02      	bgt.n	80019f6 <main+0x3de>
					T2 = MIN_SALTO_T2;
 80019f0:	4b77      	ldr	r3, [pc, #476]	@ (8001bd0 <main+0x5b8>)
 80019f2:	2232      	movs	r2, #50	@ 0x32
 80019f4:	801a      	strh	r2, [r3, #0]
				if (T2 > MAX_T2)
 80019f6:	4b76      	ldr	r3, [pc, #472]	@ (8001bd0 <main+0x5b8>)
 80019f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a00:	4293      	cmp	r3, r2
 8001a02:	dd03      	ble.n	8001a0c <main+0x3f4>
					T2 = MAX_T2;
 8001a04:	4b72      	ldr	r3, [pc, #456]	@ (8001bd0 <main+0x5b8>)
 8001a06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a0a:	801a      	strh	r2, [r3, #0]
				printEditT2(0, T2);
 8001a0c:	4b70      	ldr	r3, [pc, #448]	@ (8001bd0 <main+0x5b8>)
 8001a0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	4619      	mov	r1, r3
 8001a16:	2000      	movs	r0, #0
 8001a18:	f7ff fa2e 	bl	8000e78 <printEditT2>
			}

			if (readButton()) {
 8001a1c:	f000 fdbe 	bl	800259c <readButton>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f000 8273 	beq.w	8001f0e <main+0x8f6>
				switchToMenu(SELECT_T2);
 8001a28:	2002      	movs	r0, #2
 8001a2a:	f000 fcaf 	bl	800238c <switchToMenu>
			}
			break;
 8001a2e:	e26e      	b.n	8001f0e <main+0x8f6>

		case EDIT_UNIT_T1: //===================================================================== EDIT_UNIT_T1
			//Segun el sentido de giro y la unidad actual, cambio a la nueva unidad
			//pero ademas, actualizo el valor actual a la nueva unidad.
			if (encRead == 1) {
 8001a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d14e      	bne.n	8001ad6 <main+0x4be>
				if (modeT1 == T1_US) { //[us]  -->  [ms]
 8001a38:	4b66      	ldr	r3, [pc, #408]	@ (8001bd4 <main+0x5bc>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d119      	bne.n	8001a74 <main+0x45c>
					modeT1 = T1_MS;
 8001a40:	4b64      	ldr	r3, [pc, #400]	@ (8001bd4 <main+0x5bc>)
 8001a42:	2202      	movs	r2, #2
 8001a44:	701a      	strb	r2, [r3, #0]
					T1_lcd = (uint16_t) (T1_lcd / 1000.0);
 8001a46:	4b60      	ldr	r3, [pc, #384]	@ (8001bc8 <main+0x5b0>)
 8001a48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7fe fcd1 	bl	80003f4 <__aeabi_i2d>
 8001a52:	f04f 0200 	mov.w	r2, #0
 8001a56:	4b5d      	ldr	r3, [pc, #372]	@ (8001bcc <main+0x5b4>)
 8001a58:	f7fe fe60 	bl	800071c <__aeabi_ddiv>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4610      	mov	r0, r2
 8001a62:	4619      	mov	r1, r3
 8001a64:	f7fe ff42 	bl	80008ec <__aeabi_d2uiz>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	b21a      	sxth	r2, r3
 8001a6e:	4b56      	ldr	r3, [pc, #344]	@ (8001bc8 <main+0x5b0>)
 8001a70:	801a      	strh	r2, [r3, #0]
 8001a72:	e025      	b.n	8001ac0 <main+0x4a8>
				}
				else if (modeT1 == T1_MS) {  //[ms]  -->  [grados]
 8001a74:	4b57      	ldr	r3, [pc, #348]	@ (8001bd4 <main+0x5bc>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d121      	bne.n	8001ac0 <main+0x4a8>
					modeT1 = T1_GRADOS;
 8001a7c:	4b55      	ldr	r3, [pc, #340]	@ (8001bd4 <main+0x5bc>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	701a      	strb	r2, [r3, #0]
					T1_lcd = (uint16_t) (T1_lcd * 360.0 / 20.0);
 8001a82:	4b51      	ldr	r3, [pc, #324]	@ (8001bc8 <main+0x5b0>)
 8001a84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7fe fcb3 	bl	80003f4 <__aeabi_i2d>
 8001a8e:	f04f 0200 	mov.w	r2, #0
 8001a92:	4b51      	ldr	r3, [pc, #324]	@ (8001bd8 <main+0x5c0>)
 8001a94:	f7fe fd18 	bl	80004c8 <__aeabi_dmul>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	4610      	mov	r0, r2
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	f04f 0200 	mov.w	r2, #0
 8001aa4:	4b4d      	ldr	r3, [pc, #308]	@ (8001bdc <main+0x5c4>)
 8001aa6:	f7fe fe39 	bl	800071c <__aeabi_ddiv>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	4610      	mov	r0, r2
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	f7fe ff1b 	bl	80008ec <__aeabi_d2uiz>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	b21a      	sxth	r2, r3
 8001abc:	4b42      	ldr	r3, [pc, #264]	@ (8001bc8 <main+0x5b0>)
 8001abe:	801a      	strh	r2, [r3, #0]
				}
				printEditT1Unit(1, T1_lcd, modeT1);
 8001ac0:	4b41      	ldr	r3, [pc, #260]	@ (8001bc8 <main+0x5b0>)
 8001ac2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	4a42      	ldr	r2, [pc, #264]	@ (8001bd4 <main+0x5bc>)
 8001aca:	7812      	ldrb	r2, [r2, #0]
 8001acc:	4619      	mov	r1, r3
 8001ace:	2001      	movs	r0, #1
 8001ad0:	f7ff fa62 	bl	8000f98 <printEditT1Unit>
 8001ad4:	e052      	b.n	8001b7c <main+0x564>
			}
			else if (encRead == -1) {
 8001ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ade:	d14d      	bne.n	8001b7c <main+0x564>
				if (modeT1 == T1_GRADOS) {  //[grados]  -->  [ms]
 8001ae0:	4b3c      	ldr	r3, [pc, #240]	@ (8001bd4 <main+0x5bc>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d122      	bne.n	8001b2e <main+0x516>
					modeT1 = T1_MS;
 8001ae8:	4b3a      	ldr	r3, [pc, #232]	@ (8001bd4 <main+0x5bc>)
 8001aea:	2202      	movs	r2, #2
 8001aec:	701a      	strb	r2, [r3, #0]
					T1_lcd = (uint16_t) (T1_lcd * 20.0 / 360.0);
 8001aee:	4b36      	ldr	r3, [pc, #216]	@ (8001bc8 <main+0x5b0>)
 8001af0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7fe fc7d 	bl	80003f4 <__aeabi_i2d>
 8001afa:	f04f 0200 	mov.w	r2, #0
 8001afe:	4b37      	ldr	r3, [pc, #220]	@ (8001bdc <main+0x5c4>)
 8001b00:	f7fe fce2 	bl	80004c8 <__aeabi_dmul>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	4610      	mov	r0, r2
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	f04f 0200 	mov.w	r2, #0
 8001b10:	4b31      	ldr	r3, [pc, #196]	@ (8001bd8 <main+0x5c0>)
 8001b12:	f7fe fe03 	bl	800071c <__aeabi_ddiv>
 8001b16:	4602      	mov	r2, r0
 8001b18:	460b      	mov	r3, r1
 8001b1a:	4610      	mov	r0, r2
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	f7fe fee5 	bl	80008ec <__aeabi_d2uiz>
 8001b22:	4603      	mov	r3, r0
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	b21a      	sxth	r2, r3
 8001b28:	4b27      	ldr	r3, [pc, #156]	@ (8001bc8 <main+0x5b0>)
 8001b2a:	801a      	strh	r2, [r3, #0]
 8001b2c:	e01c      	b.n	8001b68 <main+0x550>
				}
				else if (modeT1 == T1_MS) {  //[ms]  -->  [us]
 8001b2e:	4b29      	ldr	r3, [pc, #164]	@ (8001bd4 <main+0x5bc>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d118      	bne.n	8001b68 <main+0x550>
					modeT1 = T1_US;
 8001b36:	4b27      	ldr	r3, [pc, #156]	@ (8001bd4 <main+0x5bc>)
 8001b38:	2201      	movs	r2, #1
 8001b3a:	701a      	strb	r2, [r3, #0]
					T1_lcd = (uint16_t) (T1_lcd * 1000.0);
 8001b3c:	4b22      	ldr	r3, [pc, #136]	@ (8001bc8 <main+0x5b0>)
 8001b3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7fe fc56 	bl	80003f4 <__aeabi_i2d>
 8001b48:	f04f 0200 	mov.w	r2, #0
 8001b4c:	4b1f      	ldr	r3, [pc, #124]	@ (8001bcc <main+0x5b4>)
 8001b4e:	f7fe fcbb 	bl	80004c8 <__aeabi_dmul>
 8001b52:	4602      	mov	r2, r0
 8001b54:	460b      	mov	r3, r1
 8001b56:	4610      	mov	r0, r2
 8001b58:	4619      	mov	r1, r3
 8001b5a:	f7fe fec7 	bl	80008ec <__aeabi_d2uiz>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	b21a      	sxth	r2, r3
 8001b64:	4b18      	ldr	r3, [pc, #96]	@ (8001bc8 <main+0x5b0>)
 8001b66:	801a      	strh	r2, [r3, #0]
				}
				printEditT1Unit(1, T1_lcd, modeT1);
 8001b68:	4b17      	ldr	r3, [pc, #92]	@ (8001bc8 <main+0x5b0>)
 8001b6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	4a18      	ldr	r2, [pc, #96]	@ (8001bd4 <main+0x5bc>)
 8001b72:	7812      	ldrb	r2, [r2, #0]
 8001b74:	4619      	mov	r1, r3
 8001b76:	2001      	movs	r0, #1
 8001b78:	f7ff fa0e 	bl	8000f98 <printEditT1Unit>
			}

			if (readButton() == -1) {
 8001b7c:	f000 fd0e 	bl	800259c <readButton>
 8001b80:	4603      	mov	r3, r0
 8001b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b86:	f040 81c5 	bne.w	8001f14 <main+0x8fc>
				switchToMenu(EDIT_T1);
 8001b8a:	2004      	movs	r0, #4
 8001b8c:	f000 fbfe 	bl	800238c <switchToMenu>
			}
			break;
 8001b90:	e1c0      	b.n	8001f14 <main+0x8fc>

		case SELECT_T3: //======================================================================== SELECT_T3
			if (encRead == 1) {
 8001b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d103      	bne.n	8001ba2 <main+0x58a>
				switchToMenu(PRE_RUN);
 8001b9a:	2008      	movs	r0, #8
 8001b9c:	f000 fbf6 	bl	800238c <switchToMenu>
 8001ba0:	e007      	b.n	8001bb2 <main+0x59a>
			}
			else if (encRead == -1) {
 8001ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001baa:	d102      	bne.n	8001bb2 <main+0x59a>
				switchToMenu(SELECT_T2);
 8001bac:	2002      	movs	r0, #2
 8001bae:	f000 fbed 	bl	800238c <switchToMenu>
			}

			if (readButton()) {
 8001bb2:	f000 fcf3 	bl	800259c <readButton>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f000 81ae 	beq.w	8001f1a <main+0x902>
				switchToMenu(EDIT_T3);
 8001bbe:	2006      	movs	r0, #6
 8001bc0:	f000 fbe4 	bl	800238c <switchToMenu>
			}
			break;
 8001bc4:	e1a9      	b.n	8001f1a <main+0x902>
 8001bc6:	bf00      	nop
 8001bc8:	20000088 	.word	0x20000088
 8001bcc:	408f4000 	.word	0x408f4000
 8001bd0:	20000084 	.word	0x20000084
 8001bd4:	20000081 	.word	0x20000081
 8001bd8:	40768000 	.word	0x40768000
 8001bdc:	40340000 	.word	0x40340000

		case EDIT_T3: //========================================================================== EDIT_T3
			if (encRead != 0) {
 8001be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d030      	beq.n	8001c4a <main+0x632>
				T3 += encRead * MIN_SALTO_T3;
 8001be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	461a      	mov	r2, r3
 8001bf0:	0092      	lsls	r2, r2, #2
 8001bf2:	4413      	add	r3, r2
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	0091      	lsls	r1, r2, #2
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4413      	add	r3, r2
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	b29a      	uxth	r2, r3
 8001c02:	4bad      	ldr	r3, [pc, #692]	@ (8001eb8 <main+0x8a0>)
 8001c04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	4413      	add	r3, r2
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	b21a      	sxth	r2, r3
 8001c10:	4ba9      	ldr	r3, [pc, #676]	@ (8001eb8 <main+0x8a0>)
 8001c12:	801a      	strh	r2, [r3, #0]
				if (T3 < MIN_SALTO_T3)
 8001c14:	4ba8      	ldr	r3, [pc, #672]	@ (8001eb8 <main+0x8a0>)
 8001c16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c1a:	2b31      	cmp	r3, #49	@ 0x31
 8001c1c:	dc02      	bgt.n	8001c24 <main+0x60c>
					T3 = MIN_SALTO_T3;
 8001c1e:	4ba6      	ldr	r3, [pc, #664]	@ (8001eb8 <main+0x8a0>)
 8001c20:	2232      	movs	r2, #50	@ 0x32
 8001c22:	801a      	strh	r2, [r3, #0]
				if (T3 > MAX_T3)
 8001c24:	4ba4      	ldr	r3, [pc, #656]	@ (8001eb8 <main+0x8a0>)
 8001c26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	dd03      	ble.n	8001c3a <main+0x622>
					T3 = MAX_T3;
 8001c32:	4ba1      	ldr	r3, [pc, #644]	@ (8001eb8 <main+0x8a0>)
 8001c34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c38:	801a      	strh	r2, [r3, #0]
				printEditT3(1, T3);
 8001c3a:	4b9f      	ldr	r3, [pc, #636]	@ (8001eb8 <main+0x8a0>)
 8001c3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	4619      	mov	r1, r3
 8001c44:	2001      	movs	r0, #1
 8001c46:	f7ff f95f 	bl	8000f08 <printEditT3>
			}

			if (readButton()) {
 8001c4a:	f000 fca7 	bl	800259c <readButton>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f000 8165 	beq.w	8001f20 <main+0x908>
				switchToMenu(SELECT_T3);
 8001c56:	2003      	movs	r0, #3
 8001c58:	f000 fb98 	bl	800238c <switchToMenu>
			}
			break;
 8001c5c:	e160      	b.n	8001f20 <main+0x908>

		case PRE_RUN: //========================================================================== PRE_RUN (Iniciar?)
			if (encRead == -1) {
 8001c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c66:	d103      	bne.n	8001c70 <main+0x658>
				switchToMenu(SELECT_T3);
 8001c68:	2003      	movs	r0, #3
 8001c6a:	f000 fb8f 	bl	800238c <switchToMenu>
 8001c6e:	e006      	b.n	8001c7e <main+0x666>
			}
			else if (encRead == 1) {
 8001c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d102      	bne.n	8001c7e <main+0x666>
				switchToMenu(CONFIG);
 8001c78:	200b      	movs	r0, #11
 8001c7a:	f000 fb87 	bl	800238c <switchToMenu>
			}

			if (readButton() == -1) {
 8001c7e:	f000 fc8d 	bl	800259c <readButton>
 8001c82:	4603      	mov	r3, r0
 8001c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c88:	f040 814d 	bne.w	8001f26 <main+0x90e>
				OUT1_OFF(logicaQ1);
 8001c8c:	4b8b      	ldr	r3, [pc, #556]	@ (8001ebc <main+0x8a4>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	bf0c      	ite	eq
 8001c94:	2301      	moveq	r3, #1
 8001c96:	2300      	movne	r3, #0
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ca0:	4887      	ldr	r0, [pc, #540]	@ (8001ec0 <main+0x8a8>)
 8001ca2:	f001 f8da 	bl	8002e5a <HAL_GPIO_WritePin>
				OUT2_OFF(logicaQ2);
 8001ca6:	4b87      	ldr	r3, [pc, #540]	@ (8001ec4 <main+0x8ac>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	bf0c      	ite	eq
 8001cae:	2301      	moveq	r3, #1
 8001cb0:	2300      	movne	r3, #0
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001cba:	4881      	ldr	r0, [pc, #516]	@ (8001ec0 <main+0x8a8>)
 8001cbc:	f001 f8cd 	bl	8002e5a <HAL_GPIO_WritePin>
				switchToMenu(RUN);
 8001cc0:	2009      	movs	r0, #9
 8001cc2:	f000 fb63 	bl	800238c <switchToMenu>

				/************************************************************************/
				/*                      PREPARACION PARA DISPARO                        */
				/************************************************************************/
				T1 = T1_lcd;
 8001cc6:	4b80      	ldr	r3, [pc, #512]	@ (8001ec8 <main+0x8b0>)
 8001cc8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ccc:	4b7f      	ldr	r3, [pc, #508]	@ (8001ecc <main+0x8b4>)
 8001cce:	801a      	strh	r2, [r3, #0]
				if (T1_lcd < MIN_T1_TO_ADD_20MS)
 8001cd0:	4b7d      	ldr	r3, [pc, #500]	@ (8001ec8 <main+0x8b0>)
 8001cd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cd6:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001cda:	da0a      	bge.n	8001cf2 <main+0x6da>
					T1 += 20000;
 8001cdc:	4b7b      	ldr	r3, [pc, #492]	@ (8001ecc <main+0x8b4>)
 8001cde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	f503 439c 	add.w	r3, r3, #19968	@ 0x4e00
 8001ce8:	3320      	adds	r3, #32
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	b21a      	sxth	r2, r3
 8001cee:	4b77      	ldr	r3, [pc, #476]	@ (8001ecc <main+0x8b4>)
 8001cf0:	801a      	strh	r2, [r3, #0]

				__HAL_GPIO_EXTI_CLEAR_IT(SIG_INPUT_Pin); //Limpio el flag de la interrupcion
 8001cf2:	4b77      	ldr	r3, [pc, #476]	@ (8001ed0 <main+0x8b8>)
 8001cf4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001cf8:	615a      	str	r2, [r3, #20]
				HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);	//Habilito la interrupcion
 8001cfa:	2028      	movs	r0, #40	@ 0x28
 8001cfc:	f000 fee9 	bl	8002ad2 <HAL_NVIC_EnableIRQ>
				/************************************************************************/
			}
			break;
 8001d00:	e111      	b.n	8001f26 <main+0x90e>

		case TRIGGERED: //======================================================================== TRIGGERED
			printTriggered();
 8001d02:	f7ff fb51 	bl	80013a8 <printTriggered>
			while (!readButton()) {
 8001d06:	e002      	b.n	8001d0e <main+0x6f6>
				HAL_Delay(1);
 8001d08:	2001      	movs	r0, #1
 8001d0a:	f000 fda7 	bl	800285c <HAL_Delay>
			while (!readButton()) {
 8001d0e:	f000 fc45 	bl	800259c <readButton>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d0f7      	beq.n	8001d08 <main+0x6f0>
			}
			OUT1_OFF(logicaQ1);
 8001d18:	4b68      	ldr	r3, [pc, #416]	@ (8001ebc <main+0x8a4>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	bf0c      	ite	eq
 8001d20:	2301      	moveq	r3, #1
 8001d22:	2300      	movne	r3, #0
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	461a      	mov	r2, r3
 8001d28:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d2c:	4864      	ldr	r0, [pc, #400]	@ (8001ec0 <main+0x8a8>)
 8001d2e:	f001 f894 	bl	8002e5a <HAL_GPIO_WritePin>
			OUT2_OFF(logicaQ2);
 8001d32:	4b64      	ldr	r3, [pc, #400]	@ (8001ec4 <main+0x8ac>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	bf0c      	ite	eq
 8001d3a:	2301      	moveq	r3, #1
 8001d3c:	2300      	movne	r3, #0
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	461a      	mov	r2, r3
 8001d42:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001d46:	485e      	ldr	r0, [pc, #376]	@ (8001ec0 <main+0x8a8>)
 8001d48:	f001 f887 	bl	8002e5a <HAL_GPIO_WritePin>
			switchToMenu(HOME);
 8001d4c:	2000      	movs	r0, #0
 8001d4e:	f000 fb1d 	bl	800238c <switchToMenu>
			break;
 8001d52:	e0fb      	b.n	8001f4c <main+0x934>

		case CONFIG: //=========================================================================== CONFIG (Entrar?)
			if (encRead == -1) {
 8001d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d5c:	d102      	bne.n	8001d64 <main+0x74c>
				switchToMenu(PRE_RUN);
 8001d5e:	2008      	movs	r0, #8
 8001d60:	f000 fb14 	bl	800238c <switchToMenu>
			}

			if (readButton()) {
 8001d64:	f000 fc1a 	bl	800259c <readButton>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f000 80de 	beq.w	8001f2c <main+0x914>
				switchToMenu(CONFIG_LOGIC_OUT1);
 8001d70:	200c      	movs	r0, #12
 8001d72:	f000 fb0b 	bl	800238c <switchToMenu>
			}
			break;
 8001d76:	e0d9      	b.n	8001f2c <main+0x914>

		case CONFIG_LOGIC_OUT1: //================================================================ CONFIG_LOGIC_OUT1
			if (encRead == 1) {
 8001d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d102      	bne.n	8001d86 <main+0x76e>
				switchToMenu(CONFIG_LOGIC_OUT2);
 8001d80:	200d      	movs	r0, #13
 8001d82:	f000 fb03 	bl	800238c <switchToMenu>
			}

			if (readButton()) {
 8001d86:	f000 fc09 	bl	800259c <readButton>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f000 80d0 	beq.w	8001f32 <main+0x91a>
				switchToMenu(EDIT_CONFIG_LOGIC_OUT1);
 8001d92:	200e      	movs	r0, #14
 8001d94:	f000 fafa 	bl	800238c <switchToMenu>
			}
			break;
 8001d98:	e0cb      	b.n	8001f32 <main+0x91a>

		case EDIT_CONFIG_LOGIC_OUT1: //=========================================================== EDIT_CONFIG_LOGIC_OUT1
			if (logicaQ1 && encRead == -1) {
 8001d9a:	4b48      	ldr	r3, [pc, #288]	@ (8001ebc <main+0x8a4>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d00e      	beq.n	8001dc0 <main+0x7a8>
 8001da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001daa:	d109      	bne.n	8001dc0 <main+0x7a8>
				logicaQ1 = 0;
 8001dac:	4b43      	ldr	r3, [pc, #268]	@ (8001ebc <main+0x8a4>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	701a      	strb	r2, [r3, #0]
				printEditConfigLogT1(1, logicaQ1);
 8001db2:	4b42      	ldr	r3, [pc, #264]	@ (8001ebc <main+0x8a4>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	4619      	mov	r1, r3
 8001db8:	2001      	movs	r0, #1
 8001dba:	f7ff fb71 	bl	80014a0 <printEditConfigLogT1>
 8001dbe:	e010      	b.n	8001de2 <main+0x7ca>
			}
			else if (!logicaQ1 && encRead == 1) {
 8001dc0:	4b3e      	ldr	r3, [pc, #248]	@ (8001ebc <main+0x8a4>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d10c      	bne.n	8001de2 <main+0x7ca>
 8001dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d108      	bne.n	8001de2 <main+0x7ca>
				logicaQ1 = 1;
 8001dd0:	4b3a      	ldr	r3, [pc, #232]	@ (8001ebc <main+0x8a4>)
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	701a      	strb	r2, [r3, #0]
				printEditConfigLogT1(1, logicaQ1);
 8001dd6:	4b39      	ldr	r3, [pc, #228]	@ (8001ebc <main+0x8a4>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	4619      	mov	r1, r3
 8001ddc:	2001      	movs	r0, #1
 8001dde:	f7ff fb5f 	bl	80014a0 <printEditConfigLogT1>
			}

			if (readButton()) {
 8001de2:	f000 fbdb 	bl	800259c <readButton>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f000 80a5 	beq.w	8001f38 <main+0x920>
				OUT1_OFF(logicaQ1);
 8001dee:	4b33      	ldr	r3, [pc, #204]	@ (8001ebc <main+0x8a4>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	bf0c      	ite	eq
 8001df6:	2301      	moveq	r3, #1
 8001df8:	2300      	movne	r3, #0
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e02:	482f      	ldr	r0, [pc, #188]	@ (8001ec0 <main+0x8a8>)
 8001e04:	f001 f829 	bl	8002e5a <HAL_GPIO_WritePin>
				switchToMenu(CONFIG_LOGIC_OUT1);
 8001e08:	200c      	movs	r0, #12
 8001e0a:	f000 fabf 	bl	800238c <switchToMenu>
			}
			break;
 8001e0e:	e093      	b.n	8001f38 <main+0x920>

		case CONFIG_LOGIC_OUT2: //================================================================ CONFIG_LOGIC_T2
			if (encRead == -1) {
 8001e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e18:	d103      	bne.n	8001e22 <main+0x80a>
				switchToMenu(CONFIG_LOGIC_OUT1);
 8001e1a:	200c      	movs	r0, #12
 8001e1c:	f000 fab6 	bl	800238c <switchToMenu>
 8001e20:	e006      	b.n	8001e30 <main+0x818>
			}
			else if (encRead == 1) {
 8001e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d102      	bne.n	8001e30 <main+0x818>
				switchToMenu(EXIT);
 8001e2a:	2010      	movs	r0, #16
 8001e2c:	f000 faae 	bl	800238c <switchToMenu>
			}

			if (readButton()) {
 8001e30:	f000 fbb4 	bl	800259c <readButton>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f000 8081 	beq.w	8001f3e <main+0x926>
				switchToMenu(EDIT_CONFIG_LOGIC_OUT2);
 8001e3c:	200f      	movs	r0, #15
 8001e3e:	f000 faa5 	bl	800238c <switchToMenu>
			}
			break;
 8001e42:	e07c      	b.n	8001f3e <main+0x926>

		case EDIT_CONFIG_LOGIC_OUT2: //=========================================================== EDIT_CONFIG_LOGIC_T2
			if (logicaQ2 && encRead == -1) {
 8001e44:	4b1f      	ldr	r3, [pc, #124]	@ (8001ec4 <main+0x8ac>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d00e      	beq.n	8001e6a <main+0x852>
 8001e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e54:	d109      	bne.n	8001e6a <main+0x852>
				logicaQ2 = 0;
 8001e56:	4b1b      	ldr	r3, [pc, #108]	@ (8001ec4 <main+0x8ac>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	701a      	strb	r2, [r3, #0]
				printEditConfigLogT2(1, logicaQ2);
 8001e5c:	4b19      	ldr	r3, [pc, #100]	@ (8001ec4 <main+0x8ac>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	4619      	mov	r1, r3
 8001e62:	2001      	movs	r0, #1
 8001e64:	f7ff fb56 	bl	8001514 <printEditConfigLogT2>
 8001e68:	e010      	b.n	8001e8c <main+0x874>
			}
			else if (!logicaQ2 && encRead == 1) {
 8001e6a:	4b16      	ldr	r3, [pc, #88]	@ (8001ec4 <main+0x8ac>)
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d10c      	bne.n	8001e8c <main+0x874>
 8001e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d108      	bne.n	8001e8c <main+0x874>
				logicaQ2 = 1;
 8001e7a:	4b12      	ldr	r3, [pc, #72]	@ (8001ec4 <main+0x8ac>)
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	701a      	strb	r2, [r3, #0]
				printEditConfigLogT2(1, logicaQ2);
 8001e80:	4b10      	ldr	r3, [pc, #64]	@ (8001ec4 <main+0x8ac>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	4619      	mov	r1, r3
 8001e86:	2001      	movs	r0, #1
 8001e88:	f7ff fb44 	bl	8001514 <printEditConfigLogT2>
			}

			if (readButton()) {
 8001e8c:	f000 fb86 	bl	800259c <readButton>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d056      	beq.n	8001f44 <main+0x92c>
				OUT2_OFF(logicaQ2);
 8001e96:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec4 <main+0x8ac>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	bf0c      	ite	eq
 8001e9e:	2301      	moveq	r3, #1
 8001ea0:	2300      	movne	r3, #0
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001eaa:	4805      	ldr	r0, [pc, #20]	@ (8001ec0 <main+0x8a8>)
 8001eac:	f000 ffd5 	bl	8002e5a <HAL_GPIO_WritePin>
				switchToMenu(CONFIG_LOGIC_OUT2);
 8001eb0:	200d      	movs	r0, #13
 8001eb2:	f000 fa6b 	bl	800238c <switchToMenu>
			}
			break;
 8001eb6:	e045      	b.n	8001f44 <main+0x92c>
 8001eb8:	20000086 	.word	0x20000086
 8001ebc:	20000000 	.word	0x20000000
 8001ec0:	40010c00 	.word	0x40010c00
 8001ec4:	20000001 	.word	0x20000001
 8001ec8:	20000088 	.word	0x20000088
 8001ecc:	20000082 	.word	0x20000082
 8001ed0:	40010400 	.word	0x40010400

		case EXIT:				//EXIT
			if (encRead == -1) {
 8001ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001edc:	d102      	bne.n	8001ee4 <main+0x8cc>
				switchToMenu(CONFIG_LOGIC_OUT2);
 8001ede:	200d      	movs	r0, #13
 8001ee0:	f000 fa54 	bl	800238c <switchToMenu>
			}

			if (readButton()) {
 8001ee4:	f000 fb5a 	bl	800259c <readButton>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d02d      	beq.n	8001f4a <main+0x932>
				switchToMenu(CONFIG);
 8001eee:	200b      	movs	r0, #11
 8001ef0:	f000 fa4c 	bl	800238c <switchToMenu>
			}
			break;
 8001ef4:	e029      	b.n	8001f4a <main+0x932>
		default:
			break;
 8001ef6:	bf00      	nop
 8001ef8:	f7ff bbd0 	b.w	800169c <main+0x84>
			break;
 8001efc:	bf00      	nop
 8001efe:	f7ff bbcd 	b.w	800169c <main+0x84>
			break;
 8001f02:	bf00      	nop
 8001f04:	f7ff bbca 	b.w	800169c <main+0x84>
			break;
 8001f08:	bf00      	nop
 8001f0a:	f7ff bbc7 	b.w	800169c <main+0x84>
			break;
 8001f0e:	bf00      	nop
 8001f10:	f7ff bbc4 	b.w	800169c <main+0x84>
			break;
 8001f14:	bf00      	nop
 8001f16:	f7ff bbc1 	b.w	800169c <main+0x84>
			break;
 8001f1a:	bf00      	nop
 8001f1c:	f7ff bbbe 	b.w	800169c <main+0x84>
			break;
 8001f20:	bf00      	nop
 8001f22:	f7ff bbbb 	b.w	800169c <main+0x84>
			break;
 8001f26:	bf00      	nop
 8001f28:	f7ff bbb8 	b.w	800169c <main+0x84>
			break;
 8001f2c:	bf00      	nop
 8001f2e:	f7ff bbb5 	b.w	800169c <main+0x84>
			break;
 8001f32:	bf00      	nop
 8001f34:	f7ff bbb2 	b.w	800169c <main+0x84>
			break;
 8001f38:	bf00      	nop
 8001f3a:	f7ff bbaf 	b.w	800169c <main+0x84>
			break;
 8001f3e:	bf00      	nop
 8001f40:	f7ff bbac 	b.w	800169c <main+0x84>
			break;
 8001f44:	bf00      	nop
 8001f46:	f7ff bba9 	b.w	800169c <main+0x84>
			break;
 8001f4a:	bf00      	nop
		encRead = readEncoder();
 8001f4c:	f7ff bba6 	b.w	800169c <main+0x84>

08001f50 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b090      	sub	sp, #64	@ 0x40
 8001f54:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001f56:	f107 0318 	add.w	r3, r7, #24
 8001f5a:	2228      	movs	r2, #40	@ 0x28
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f001 fe9e 	bl	8003ca0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001f64:	1d3b      	adds	r3, r7, #4
 8001f66:	2200      	movs	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]
 8001f6a:	605a      	str	r2, [r3, #4]
 8001f6c:	609a      	str	r2, [r3, #8]
 8001f6e:	60da      	str	r2, [r3, #12]
 8001f70:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f72:	2301      	movs	r3, #1
 8001f74:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f76:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f7a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f80:	2301      	movs	r3, #1
 8001f82:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f84:	2302      	movs	r3, #2
 8001f86:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f88:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f8c:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001f8e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001f94:	f107 0318 	add.w	r3, r7, #24
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f000 ff8f 	bl	8002ebc <HAL_RCC_OscConfig>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <SystemClock_Config+0x58>
		Error_Handler();
 8001fa4:	f000 fb42 	bl	800262c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001fa8:	230f      	movs	r3, #15
 8001faa:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fac:	2302      	movs	r3, #2
 8001fae:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fb4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fb8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001fbe:	1d3b      	adds	r3, r7, #4
 8001fc0:	2102      	movs	r1, #2
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f001 f9fc 	bl	80033c0 <HAL_RCC_ClockConfig>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <SystemClock_Config+0x82>
		Error_Handler();
 8001fce:	f000 fb2d 	bl	800262c <Error_Handler>
	}
}
 8001fd2:	bf00      	nop
 8001fd4:	3740      	adds	r7, #64	@ 0x40
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
	...

08001fdc <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001fe2:	f107 0308 	add.w	r3, r7, #8
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	605a      	str	r2, [r3, #4]
 8001fec:	609a      	str	r2, [r3, #8]
 8001fee:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001ff0:	463b      	mov	r3, r7
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001ff8:	4b1e      	ldr	r3, [pc, #120]	@ (8002074 <MX_TIM1_Init+0x98>)
 8001ffa:	4a1f      	ldr	r2, [pc, #124]	@ (8002078 <MX_TIM1_Init+0x9c>)
 8001ffc:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 72 - 1;
 8001ffe:	4b1d      	ldr	r3, [pc, #116]	@ (8002074 <MX_TIM1_Init+0x98>)
 8002000:	2247      	movs	r2, #71	@ 0x47
 8002002:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002004:	4b1b      	ldr	r3, [pc, #108]	@ (8002074 <MX_TIM1_Init+0x98>)
 8002006:	2200      	movs	r2, #0
 8002008:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 0xffff - 1;
 800200a:	4b1a      	ldr	r3, [pc, #104]	@ (8002074 <MX_TIM1_Init+0x98>)
 800200c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002010:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002012:	4b18      	ldr	r3, [pc, #96]	@ (8002074 <MX_TIM1_Init+0x98>)
 8002014:	2200      	movs	r2, #0
 8002016:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8002018:	4b16      	ldr	r3, [pc, #88]	@ (8002074 <MX_TIM1_Init+0x98>)
 800201a:	2200      	movs	r2, #0
 800201c:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800201e:	4b15      	ldr	r3, [pc, #84]	@ (8002074 <MX_TIM1_Init+0x98>)
 8002020:	2200      	movs	r2, #0
 8002022:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8002024:	4813      	ldr	r0, [pc, #76]	@ (8002074 <MX_TIM1_Init+0x98>)
 8002026:	f001 fb27 	bl	8003678 <HAL_TIM_Base_Init>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <MX_TIM1_Init+0x58>
		Error_Handler();
 8002030:	f000 fafc 	bl	800262c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002034:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002038:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 800203a:	f107 0308 	add.w	r3, r7, #8
 800203e:	4619      	mov	r1, r3
 8002040:	480c      	ldr	r0, [pc, #48]	@ (8002074 <MX_TIM1_Init+0x98>)
 8002042:	f001 fbb3 	bl	80037ac <HAL_TIM_ConfigClockSource>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_TIM1_Init+0x74>
		Error_Handler();
 800204c:	f000 faee 	bl	800262c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002050:	2300      	movs	r3, #0
 8002052:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002054:	2300      	movs	r3, #0
 8002056:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8002058:	463b      	mov	r3, r7
 800205a:	4619      	mov	r1, r3
 800205c:	4805      	ldr	r0, [pc, #20]	@ (8002074 <MX_TIM1_Init+0x98>)
 800205e:	f001 fd65 	bl	8003b2c <HAL_TIMEx_MasterConfigSynchronization>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 8002068:	f000 fae0 	bl	800262c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 800206c:	bf00      	nop
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	20000038 	.word	0x20000038
 8002078:	40012c00 	.word	0x40012c00

0800207c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800207c:	b580      	push	{r7, lr}
 800207e:	b088      	sub	sp, #32
 8002080:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002082:	f107 0310 	add.w	r3, r7, #16
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	605a      	str	r2, [r3, #4]
 800208c:	609a      	str	r2, [r3, #8]
 800208e:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002090:	4b3e      	ldr	r3, [pc, #248]	@ (800218c <MX_GPIO_Init+0x110>)
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	4a3d      	ldr	r2, [pc, #244]	@ (800218c <MX_GPIO_Init+0x110>)
 8002096:	f043 0320 	orr.w	r3, r3, #32
 800209a:	6193      	str	r3, [r2, #24]
 800209c:	4b3b      	ldr	r3, [pc, #236]	@ (800218c <MX_GPIO_Init+0x110>)
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	f003 0320 	and.w	r3, r3, #32
 80020a4:	60fb      	str	r3, [r7, #12]
 80020a6:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80020a8:	4b38      	ldr	r3, [pc, #224]	@ (800218c <MX_GPIO_Init+0x110>)
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	4a37      	ldr	r2, [pc, #220]	@ (800218c <MX_GPIO_Init+0x110>)
 80020ae:	f043 0304 	orr.w	r3, r3, #4
 80020b2:	6193      	str	r3, [r2, #24]
 80020b4:	4b35      	ldr	r3, [pc, #212]	@ (800218c <MX_GPIO_Init+0x110>)
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	f003 0304 	and.w	r3, r3, #4
 80020bc:	60bb      	str	r3, [r7, #8]
 80020be:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80020c0:	4b32      	ldr	r3, [pc, #200]	@ (800218c <MX_GPIO_Init+0x110>)
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	4a31      	ldr	r2, [pc, #196]	@ (800218c <MX_GPIO_Init+0x110>)
 80020c6:	f043 0308 	orr.w	r3, r3, #8
 80020ca:	6193      	str	r3, [r2, #24]
 80020cc:	4b2f      	ldr	r3, [pc, #188]	@ (800218c <MX_GPIO_Init+0x110>)
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	f003 0308 	and.w	r3, r3, #8
 80020d4:	607b      	str	r3, [r7, #4]
 80020d6:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 80020d8:	2200      	movs	r2, #0
 80020da:	217e      	movs	r1, #126	@ 0x7e
 80020dc:	482c      	ldr	r0, [pc, #176]	@ (8002190 <MX_GPIO_Init+0x114>)
 80020de:	f000 febc 	bl	8002e5a <HAL_GPIO_WritePin>
			LCD_RS_Pin | LCD_E_Pin | LCD_DB4_Pin | LCD_DB5_Pin | LCD_DB6_Pin
					| LCD_DB7_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, OUT_T1_Pin | OUT_T2_Pin, GPIO_PIN_RESET);
 80020e2:	2200      	movs	r2, #0
 80020e4:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80020e8:	482a      	ldr	r0, [pc, #168]	@ (8002194 <MX_GPIO_Init+0x118>)
 80020ea:	f000 feb6 	bl	8002e5a <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LCD_RS_Pin LCD_E_Pin LCD_DB4_Pin LCD_DB5_Pin
	 LCD_DB6_Pin LCD_DB7_Pin */
	GPIO_InitStruct.Pin = LCD_RS_Pin | LCD_E_Pin | LCD_DB4_Pin | LCD_DB5_Pin
 80020ee:	237e      	movs	r3, #126	@ 0x7e
 80020f0:	613b      	str	r3, [r7, #16]
			| LCD_DB6_Pin | LCD_DB7_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020f2:	2301      	movs	r3, #1
 80020f4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f6:	2300      	movs	r3, #0
 80020f8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fa:	2302      	movs	r3, #2
 80020fc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020fe:	f107 0310 	add.w	r3, r7, #16
 8002102:	4619      	mov	r1, r3
 8002104:	4822      	ldr	r0, [pc, #136]	@ (8002190 <MX_GPIO_Init+0x114>)
 8002106:	f000 fd0d 	bl	8002b24 <HAL_GPIO_Init>

	/*Configure GPIO pin : ENC_SW_Pin */
	GPIO_InitStruct.Pin = ENC_SW_Pin;
 800210a:	2380      	movs	r3, #128	@ 0x80
 800210c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800210e:	2300      	movs	r3, #0
 8002110:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002112:	2301      	movs	r3, #1
 8002114:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(ENC_SW_GPIO_Port, &GPIO_InitStruct);
 8002116:	f107 0310 	add.w	r3, r7, #16
 800211a:	4619      	mov	r1, r3
 800211c:	481c      	ldr	r0, [pc, #112]	@ (8002190 <MX_GPIO_Init+0x114>)
 800211e:	f000 fd01 	bl	8002b24 <HAL_GPIO_Init>

	/*Configure GPIO pins : ENC_CLK_Pin ENC_DT_Pin */
	GPIO_InitStruct.Pin = ENC_CLK_Pin | ENC_DT_Pin;
 8002122:	2303      	movs	r3, #3
 8002124:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002126:	2300      	movs	r3, #0
 8002128:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800212a:	2301      	movs	r3, #1
 800212c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800212e:	f107 0310 	add.w	r3, r7, #16
 8002132:	4619      	mov	r1, r3
 8002134:	4817      	ldr	r0, [pc, #92]	@ (8002194 <MX_GPIO_Init+0x118>)
 8002136:	f000 fcf5 	bl	8002b24 <HAL_GPIO_Init>

	/*Configure GPIO pin : SIG_INPUT_Pin */
	GPIO_InitStruct.Pin = SIG_INPUT_Pin;
 800213a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800213e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002140:	4b15      	ldr	r3, [pc, #84]	@ (8002198 <MX_GPIO_Init+0x11c>)
 8002142:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002144:	2300      	movs	r3, #0
 8002146:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(SIG_INPUT_GPIO_Port, &GPIO_InitStruct);
 8002148:	f107 0310 	add.w	r3, r7, #16
 800214c:	4619      	mov	r1, r3
 800214e:	4811      	ldr	r0, [pc, #68]	@ (8002194 <MX_GPIO_Init+0x118>)
 8002150:	f000 fce8 	bl	8002b24 <HAL_GPIO_Init>

	/*Configure GPIO pins : OUT_T1_Pin OUT_T2_Pin */
	GPIO_InitStruct.Pin = OUT_T1_Pin | OUT_T2_Pin;
 8002154:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002158:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800215a:	2301      	movs	r3, #1
 800215c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215e:	2300      	movs	r3, #0
 8002160:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002162:	2302      	movs	r3, #2
 8002164:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002166:	f107 0310 	add.w	r3, r7, #16
 800216a:	4619      	mov	r1, r3
 800216c:	4809      	ldr	r0, [pc, #36]	@ (8002194 <MX_GPIO_Init+0x118>)
 800216e:	f000 fcd9 	bl	8002b24 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8002172:	2200      	movs	r2, #0
 8002174:	2101      	movs	r1, #1
 8002176:	2028      	movs	r0, #40	@ 0x28
 8002178:	f000 fc8f 	bl	8002a9a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800217c:	2028      	movs	r0, #40	@ 0x28
 800217e:	f000 fca8 	bl	8002ad2 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8002182:	bf00      	nop
 8002184:	3720      	adds	r7, #32
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40021000 	.word	0x40021000
 8002190:	40010800 	.word	0x40010800
 8002194:	40010c00 	.word	0x40010c00
 8002198:	10110000 	.word	0x10110000

0800219c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
/************************************************************************/
/*     					INTERRUPCION DEL CRUCE POR CERO			        */
/************************************************************************/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	80fb      	strh	r3, [r7, #6]
	//Quito el flag y apago la interrupcion.
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80021a6:	4b65      	ldr	r3, [pc, #404]	@ (800233c <HAL_GPIO_EXTI_Callback+0x1a0>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2200      	movs	r2, #0
 80021ac:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 80021ae:	2028      	movs	r0, #40	@ 0x28
 80021b0:	f000 fc9d 	bl	8002aee <HAL_NVIC_DisableIRQ>

	if (T1 != 0) {
 80021b4:	4b62      	ldr	r3, [pc, #392]	@ (8002340 <HAL_GPIO_EXTI_Callback+0x1a4>)
 80021b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d008      	beq.n	80021d0 <HAL_GPIO_EXTI_Callback+0x34>
		while (__HAL_TIM_GET_COUNTER(&htim1) < T1)
 80021be:	bf00      	nop
 80021c0:	4b5e      	ldr	r3, [pc, #376]	@ (800233c <HAL_GPIO_EXTI_Callback+0x1a0>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c6:	4a5e      	ldr	r2, [pc, #376]	@ (8002340 <HAL_GPIO_EXTI_Callback+0x1a4>)
 80021c8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d3f7      	bcc.n	80021c0 <HAL_GPIO_EXTI_Callback+0x24>
			;
	}

	OUT1_ON(logicaQ1);
 80021d0:	4b5c      	ldr	r3, [pc, #368]	@ (8002344 <HAL_GPIO_EXTI_Callback+0x1a8>)
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	bf14      	ite	ne
 80021d8:	2301      	movne	r3, #1
 80021da:	2300      	moveq	r3, #0
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	461a      	mov	r2, r3
 80021e0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80021e4:	4858      	ldr	r0, [pc, #352]	@ (8002348 <HAL_GPIO_EXTI_Callback+0x1ac>)
 80021e6:	f000 fe38 	bl	8002e5a <HAL_GPIO_WritePin>

	if (T3 == 0) {
 80021ea:	4b58      	ldr	r3, [pc, #352]	@ (800234c <HAL_GPIO_EXTI_Callback+0x1b0>)
 80021ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d113      	bne.n	800221c <HAL_GPIO_EXTI_Callback+0x80>
		HAL_Delay(T2);
 80021f4:	4b56      	ldr	r3, [pc, #344]	@ (8002350 <HAL_GPIO_EXTI_Callback+0x1b4>)
 80021f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f000 fb2e 	bl	800285c <HAL_Delay>
		OUT1_OFF(logicaQ1);
 8002200:	4b50      	ldr	r3, [pc, #320]	@ (8002344 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	bf0c      	ite	eq
 8002208:	2301      	moveq	r3, #1
 800220a:	2300      	movne	r3, #0
 800220c:	b2db      	uxtb	r3, r3
 800220e:	461a      	mov	r2, r3
 8002210:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002214:	484c      	ldr	r0, [pc, #304]	@ (8002348 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8002216:	f000 fe20 	bl	8002e5a <HAL_GPIO_WritePin>
 800221a:	e087      	b.n	800232c <HAL_GPIO_EXTI_Callback+0x190>
	}
	else if (T3 < T2) {
 800221c:	4b4b      	ldr	r3, [pc, #300]	@ (800234c <HAL_GPIO_EXTI_Callback+0x1b0>)
 800221e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002222:	4b4b      	ldr	r3, [pc, #300]	@ (8002350 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8002224:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002228:	429a      	cmp	r2, r3
 800222a:	da2b      	bge.n	8002284 <HAL_GPIO_EXTI_Callback+0xe8>
		HAL_Delay(T3);
 800222c:	4b47      	ldr	r3, [pc, #284]	@ (800234c <HAL_GPIO_EXTI_Callback+0x1b0>)
 800222e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002232:	4618      	mov	r0, r3
 8002234:	f000 fb12 	bl	800285c <HAL_Delay>
		OUT2_ON(logicaQ2);
 8002238:	4b46      	ldr	r3, [pc, #280]	@ (8002354 <HAL_GPIO_EXTI_Callback+0x1b8>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	bf14      	ite	ne
 8002240:	2301      	movne	r3, #1
 8002242:	2300      	moveq	r3, #0
 8002244:	b2db      	uxtb	r3, r3
 8002246:	461a      	mov	r2, r3
 8002248:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800224c:	483e      	ldr	r0, [pc, #248]	@ (8002348 <HAL_GPIO_EXTI_Callback+0x1ac>)
 800224e:	f000 fe04 	bl	8002e5a <HAL_GPIO_WritePin>
		HAL_Delay(T2 - T3);
 8002252:	4b3f      	ldr	r3, [pc, #252]	@ (8002350 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8002254:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002258:	461a      	mov	r2, r3
 800225a:	4b3c      	ldr	r3, [pc, #240]	@ (800234c <HAL_GPIO_EXTI_Callback+0x1b0>)
 800225c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	4618      	mov	r0, r3
 8002264:	f000 fafa 	bl	800285c <HAL_Delay>
		OUT1_OFF(logicaQ1);
 8002268:	4b36      	ldr	r3, [pc, #216]	@ (8002344 <HAL_GPIO_EXTI_Callback+0x1a8>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	bf0c      	ite	eq
 8002270:	2301      	moveq	r3, #1
 8002272:	2300      	movne	r3, #0
 8002274:	b2db      	uxtb	r3, r3
 8002276:	461a      	mov	r2, r3
 8002278:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800227c:	4832      	ldr	r0, [pc, #200]	@ (8002348 <HAL_GPIO_EXTI_Callback+0x1ac>)
 800227e:	f000 fdec 	bl	8002e5a <HAL_GPIO_WritePin>
 8002282:	e053      	b.n	800232c <HAL_GPIO_EXTI_Callback+0x190>
	}
	else if (T3 > T2) {
 8002284:	4b31      	ldr	r3, [pc, #196]	@ (800234c <HAL_GPIO_EXTI_Callback+0x1b0>)
 8002286:	f9b3 2000 	ldrsh.w	r2, [r3]
 800228a:	4b31      	ldr	r3, [pc, #196]	@ (8002350 <HAL_GPIO_EXTI_Callback+0x1b4>)
 800228c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002290:	429a      	cmp	r2, r3
 8002292:	dd2b      	ble.n	80022ec <HAL_GPIO_EXTI_Callback+0x150>
		HAL_Delay(T2);
 8002294:	4b2e      	ldr	r3, [pc, #184]	@ (8002350 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8002296:	f9b3 3000 	ldrsh.w	r3, [r3]
 800229a:	4618      	mov	r0, r3
 800229c:	f000 fade 	bl	800285c <HAL_Delay>
		OUT1_OFF(logicaQ1);
 80022a0:	4b28      	ldr	r3, [pc, #160]	@ (8002344 <HAL_GPIO_EXTI_Callback+0x1a8>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	bf0c      	ite	eq
 80022a8:	2301      	moveq	r3, #1
 80022aa:	2300      	movne	r3, #0
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	461a      	mov	r2, r3
 80022b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80022b4:	4824      	ldr	r0, [pc, #144]	@ (8002348 <HAL_GPIO_EXTI_Callback+0x1ac>)
 80022b6:	f000 fdd0 	bl	8002e5a <HAL_GPIO_WritePin>
		HAL_Delay(T3 - T2);
 80022ba:	4b24      	ldr	r3, [pc, #144]	@ (800234c <HAL_GPIO_EXTI_Callback+0x1b0>)
 80022bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022c0:	461a      	mov	r2, r3
 80022c2:	4b23      	ldr	r3, [pc, #140]	@ (8002350 <HAL_GPIO_EXTI_Callback+0x1b4>)
 80022c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	4618      	mov	r0, r3
 80022cc:	f000 fac6 	bl	800285c <HAL_Delay>
		OUT2_ON(logicaQ2);
 80022d0:	4b20      	ldr	r3, [pc, #128]	@ (8002354 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	bf14      	ite	ne
 80022d8:	2301      	movne	r3, #1
 80022da:	2300      	moveq	r3, #0
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	461a      	mov	r2, r3
 80022e0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80022e4:	4818      	ldr	r0, [pc, #96]	@ (8002348 <HAL_GPIO_EXTI_Callback+0x1ac>)
 80022e6:	f000 fdb8 	bl	8002e5a <HAL_GPIO_WritePin>
 80022ea:	e01f      	b.n	800232c <HAL_GPIO_EXTI_Callback+0x190>
	}
	else {
		HAL_Delay(T2);
 80022ec:	4b18      	ldr	r3, [pc, #96]	@ (8002350 <HAL_GPIO_EXTI_Callback+0x1b4>)
 80022ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f000 fab2 	bl	800285c <HAL_Delay>
		OUT1_OFF(logicaQ1);
 80022f8:	4b12      	ldr	r3, [pc, #72]	@ (8002344 <HAL_GPIO_EXTI_Callback+0x1a8>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	bf0c      	ite	eq
 8002300:	2301      	moveq	r3, #1
 8002302:	2300      	movne	r3, #0
 8002304:	b2db      	uxtb	r3, r3
 8002306:	461a      	mov	r2, r3
 8002308:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800230c:	480e      	ldr	r0, [pc, #56]	@ (8002348 <HAL_GPIO_EXTI_Callback+0x1ac>)
 800230e:	f000 fda4 	bl	8002e5a <HAL_GPIO_WritePin>
		OUT2_ON(logicaQ2);
 8002312:	4b10      	ldr	r3, [pc, #64]	@ (8002354 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	2b00      	cmp	r3, #0
 8002318:	bf14      	ite	ne
 800231a:	2301      	movne	r3, #1
 800231c:	2300      	moveq	r3, #0
 800231e:	b2db      	uxtb	r3, r3
 8002320:	461a      	mov	r2, r3
 8002322:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002326:	4808      	ldr	r0, [pc, #32]	@ (8002348 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8002328:	f000 fd97 	bl	8002e5a <HAL_GPIO_WritePin>
	}

	menu = TRIGGERED;
 800232c:	4b0a      	ldr	r3, [pc, #40]	@ (8002358 <HAL_GPIO_EXTI_Callback+0x1bc>)
 800232e:	220a      	movs	r2, #10
 8002330:	701a      	strb	r2, [r3, #0]
}
 8002332:	bf00      	nop
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	20000038 	.word	0x20000038
 8002340:	20000082 	.word	0x20000082
 8002344:	20000000 	.word	0x20000000
 8002348:	40010c00 	.word	0x40010c00
 800234c:	20000086 	.word	0x20000086
 8002350:	20000084 	.word	0x20000084
 8002354:	20000001 	.word	0x20000001
 8002358:	20000080 	.word	0x20000080

0800235c <delay_us>:

/************************************************************************/
/*     							DELAY EN US          					*/
/************************************************************************/
void delay_us(uint32_t us) {
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim1, 0);  // set the counter value a 0
 8002364:	4b08      	ldr	r3, [pc, #32]	@ (8002388 <delay_us+0x2c>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2200      	movs	r2, #0
 800236a:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us)
 800236c:	bf00      	nop
 800236e:	4b06      	ldr	r3, [pc, #24]	@ (8002388 <delay_us+0x2c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	429a      	cmp	r2, r3
 8002378:	d8f9      	bhi.n	800236e <delay_us+0x12>
		;  // wait for the counter to reach the us input in the parameter
}
 800237a:	bf00      	nop
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	bc80      	pop	{r7}
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	20000038 	.word	0x20000038

0800238c <switchToMenu>:

/************************************************************************/
/*     					PERMITE CAMBIAR ENTRE LOS MENUS          		*/
/************************************************************************/
void switchToMenu(var_menu new) {
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	71fb      	strb	r3, [r7, #7]
	menu = new;
 8002396:	4a60      	ldr	r2, [pc, #384]	@ (8002518 <switchToMenu+0x18c>)
 8002398:	79fb      	ldrb	r3, [r7, #7]
 800239a:	7013      	strb	r3, [r2, #0]
	switch (new) {
 800239c:	79fb      	ldrb	r3, [r7, #7]
 800239e:	2b10      	cmp	r3, #16
 80023a0:	f200 80b6 	bhi.w	8002510 <switchToMenu+0x184>
 80023a4:	a201      	add	r2, pc, #4	@ (adr r2, 80023ac <switchToMenu+0x20>)
 80023a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023aa:	bf00      	nop
 80023ac:	080023f1 	.word	0x080023f1
 80023b0:	080023f9 	.word	0x080023f9
 80023b4:	0800240f 	.word	0x0800240f
 80023b8:	08002421 	.word	0x08002421
 80023bc:	08002433 	.word	0x08002433
 80023c0:	08002449 	.word	0x08002449
 80023c4:	0800245b 	.word	0x0800245b
 80023c8:	0800246d 	.word	0x0800246d
 80023cc:	08002483 	.word	0x08002483
 80023d0:	080024a3 	.word	0x080024a3
 80023d4:	080024c3 	.word	0x080024c3
 80023d8:	080024c9 	.word	0x080024c9
 80023dc:	080024d1 	.word	0x080024d1
 80023e0:	080024ed 	.word	0x080024ed
 80023e4:	080024df 	.word	0x080024df
 80023e8:	080024fb 	.word	0x080024fb
 80023ec:	08002509 	.word	0x08002509
	case HOME:
		printHome(1);
 80023f0:	2001      	movs	r0, #1
 80023f2:	f7fe fbb7 	bl	8000b64 <printHome>
		break;
 80023f6:	e08b      	b.n	8002510 <switchToMenu+0x184>
	case SELECT_T1:
		printViewT1(1, T1_lcd, modeT1);
 80023f8:	4b48      	ldr	r3, [pc, #288]	@ (800251c <switchToMenu+0x190>)
 80023fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023fe:	b29b      	uxth	r3, r3
 8002400:	4a47      	ldr	r2, [pc, #284]	@ (8002520 <switchToMenu+0x194>)
 8002402:	7812      	ldrb	r2, [r2, #0]
 8002404:	4619      	mov	r1, r3
 8002406:	2001      	movs	r0, #1
 8002408:	f7fe fbd0 	bl	8000bac <printViewT1>
		break;
 800240c:	e080      	b.n	8002510 <switchToMenu+0x184>
	case SELECT_T2:
		printViewT2(1, T2);
 800240e:	4b45      	ldr	r3, [pc, #276]	@ (8002524 <switchToMenu+0x198>)
 8002410:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002414:	b29b      	uxth	r3, r3
 8002416:	4619      	mov	r1, r3
 8002418:	2001      	movs	r0, #1
 800241a:	f7fe fc1f 	bl	8000c5c <printViewT2>
		break;
 800241e:	e077      	b.n	8002510 <switchToMenu+0x184>
	case SELECT_T3:
		printViewT3(1, T3);
 8002420:	4b41      	ldr	r3, [pc, #260]	@ (8002528 <switchToMenu+0x19c>)
 8002422:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002426:	b29b      	uxth	r3, r3
 8002428:	4619      	mov	r1, r3
 800242a:	2001      	movs	r0, #1
 800242c:	f7fe fc64 	bl	8000cf8 <printViewT3>
		break;
 8002430:	e06e      	b.n	8002510 <switchToMenu+0x184>
	case EDIT_T1:
		printEditT1(1, T1_lcd, modeT1);
 8002432:	4b3a      	ldr	r3, [pc, #232]	@ (800251c <switchToMenu+0x190>)
 8002434:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002438:	b29b      	uxth	r3, r3
 800243a:	4a39      	ldr	r2, [pc, #228]	@ (8002520 <switchToMenu+0x194>)
 800243c:	7812      	ldrb	r2, [r2, #0]
 800243e:	4619      	mov	r1, r3
 8002440:	2001      	movs	r0, #1
 8002442:	f7fe fca7 	bl	8000d94 <printEditT1>
		break;
 8002446:	e063      	b.n	8002510 <switchToMenu+0x184>
	case EDIT_T2:
		printEditT2(1, T2);
 8002448:	4b36      	ldr	r3, [pc, #216]	@ (8002524 <switchToMenu+0x198>)
 800244a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800244e:	b29b      	uxth	r3, r3
 8002450:	4619      	mov	r1, r3
 8002452:	2001      	movs	r0, #1
 8002454:	f7fe fd10 	bl	8000e78 <printEditT2>
		break;
 8002458:	e05a      	b.n	8002510 <switchToMenu+0x184>
	case EDIT_T3:
		printEditT3(1, T3);
 800245a:	4b33      	ldr	r3, [pc, #204]	@ (8002528 <switchToMenu+0x19c>)
 800245c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002460:	b29b      	uxth	r3, r3
 8002462:	4619      	mov	r1, r3
 8002464:	2001      	movs	r0, #1
 8002466:	f7fe fd4f 	bl	8000f08 <printEditT3>
		break;
 800246a:	e051      	b.n	8002510 <switchToMenu+0x184>
	case EDIT_UNIT_T1:
		printEditT1Unit(1, T1_lcd, modeT1);
 800246c:	4b2b      	ldr	r3, [pc, #172]	@ (800251c <switchToMenu+0x190>)
 800246e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002472:	b29b      	uxth	r3, r3
 8002474:	4a2a      	ldr	r2, [pc, #168]	@ (8002520 <switchToMenu+0x194>)
 8002476:	7812      	ldrb	r2, [r2, #0]
 8002478:	4619      	mov	r1, r3
 800247a:	2001      	movs	r0, #1
 800247c:	f7fe fd8c 	bl	8000f98 <printEditT1Unit>
		break;
 8002480:	e046      	b.n	8002510 <switchToMenu+0x184>
	case PRE_RUN:
		printPreRun(1, T1_lcd, T2, T3);
 8002482:	4b26      	ldr	r3, [pc, #152]	@ (800251c <switchToMenu+0x190>)
 8002484:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002488:	b299      	uxth	r1, r3
 800248a:	4b26      	ldr	r3, [pc, #152]	@ (8002524 <switchToMenu+0x198>)
 800248c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002490:	b29a      	uxth	r2, r3
 8002492:	4b25      	ldr	r3, [pc, #148]	@ (8002528 <switchToMenu+0x19c>)
 8002494:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002498:	b29b      	uxth	r3, r3
 800249a:	2001      	movs	r0, #1
 800249c:	f7fe fdf4 	bl	8001088 <printPreRun>
		break;
 80024a0:	e036      	b.n	8002510 <switchToMenu+0x184>
	case RUN:
		printRunning(T1_lcd, T2, T3);
 80024a2:	4b1e      	ldr	r3, [pc, #120]	@ (800251c <switchToMenu+0x190>)
 80024a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	4a1e      	ldr	r2, [pc, #120]	@ (8002524 <switchToMenu+0x198>)
 80024ac:	f9b2 2000 	ldrsh.w	r2, [r2]
 80024b0:	b291      	uxth	r1, r2
 80024b2:	4a1d      	ldr	r2, [pc, #116]	@ (8002528 <switchToMenu+0x19c>)
 80024b4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80024b8:	b292      	uxth	r2, r2
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7fe fea6 	bl	800120c <printRunning>
		break;
 80024c0:	e026      	b.n	8002510 <switchToMenu+0x184>
	case TRIGGERED:
		printTriggered();
 80024c2:	f7fe ff71 	bl	80013a8 <printTriggered>
		break;
 80024c6:	e023      	b.n	8002510 <switchToMenu+0x184>
	case CONFIG:
		printConfigEntrar(1);
 80024c8:	2001      	movs	r0, #1
 80024ca:	f7ff f881 	bl	80015d0 <printConfigEntrar>
		break;
 80024ce:	e01f      	b.n	8002510 <switchToMenu+0x184>
	case CONFIG_LOGIC_OUT1:
		printViewConfigLogT1(1, logicaQ1);
 80024d0:	4b16      	ldr	r3, [pc, #88]	@ (800252c <switchToMenu+0x1a0>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	4619      	mov	r1, r3
 80024d6:	2001      	movs	r0, #1
 80024d8:	f7fe ff76 	bl	80013c8 <printViewConfigLogT1>
		break;
 80024dc:	e018      	b.n	8002510 <switchToMenu+0x184>
	case EDIT_CONFIG_LOGIC_OUT1:
		printEditConfigLogT1(1, logicaQ1);
 80024de:	4b13      	ldr	r3, [pc, #76]	@ (800252c <switchToMenu+0x1a0>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	4619      	mov	r1, r3
 80024e4:	2001      	movs	r0, #1
 80024e6:	f7fe ffdb 	bl	80014a0 <printEditConfigLogT1>
		break;
 80024ea:	e011      	b.n	8002510 <switchToMenu+0x184>
	case CONFIG_LOGIC_OUT2:
		printViewConfigLogT2(1, logicaQ2);
 80024ec:	4b10      	ldr	r3, [pc, #64]	@ (8002530 <switchToMenu+0x1a4>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	4619      	mov	r1, r3
 80024f2:	2001      	movs	r0, #1
 80024f4:	f7fe ff9e 	bl	8001434 <printViewConfigLogT2>
		break;
 80024f8:	e00a      	b.n	8002510 <switchToMenu+0x184>
	case EDIT_CONFIG_LOGIC_OUT2:
		printEditConfigLogT2(1, logicaQ2);
 80024fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002530 <switchToMenu+0x1a4>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	4619      	mov	r1, r3
 8002500:	2001      	movs	r0, #1
 8002502:	f7ff f807 	bl	8001514 <printEditConfigLogT2>
		break;
 8002506:	e003      	b.n	8002510 <switchToMenu+0x184>
	case EXIT:
		printConfigVolver(1);
 8002508:	2001      	movs	r0, #1
 800250a:	f7ff f83d 	bl	8001588 <printConfigVolver>
		break;
 800250e:	bf00      	nop
	}
}
 8002510:	bf00      	nop
 8002512:	3708      	adds	r7, #8
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	20000080 	.word	0x20000080
 800251c:	20000088 	.word	0x20000088
 8002520:	20000081 	.word	0x20000081
 8002524:	20000084 	.word	0x20000084
 8002528:	20000086 	.word	0x20000086
 800252c:	20000000 	.word	0x20000000
 8002530:	20000001 	.word	0x20000001

08002534 <readEncoder>:

/************************************************************************/
/*     							ENCODER ROTATIVO          				*/
/************************************************************************/
int8_t readEncoder() {
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
	int8_t result = 0;
 800253a:	2300      	movs	r3, #0
 800253c:	71fb      	strb	r3, [r7, #7]
	static uint8_t prev_CLK = 0;

	uint8_t now_CLK = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);
 800253e:	2101      	movs	r1, #1
 8002540:	4814      	ldr	r0, [pc, #80]	@ (8002594 <readEncoder+0x60>)
 8002542:	f000 fc73 	bl	8002e2c <HAL_GPIO_ReadPin>
 8002546:	4603      	mov	r3, r0
 8002548:	71bb      	strb	r3, [r7, #6]
	uint8_t now_DT = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 800254a:	2102      	movs	r1, #2
 800254c:	4811      	ldr	r0, [pc, #68]	@ (8002594 <readEncoder+0x60>)
 800254e:	f000 fc6d 	bl	8002e2c <HAL_GPIO_ReadPin>
 8002552:	4603      	mov	r3, r0
 8002554:	717b      	strb	r3, [r7, #5]

	if (prev_CLK != now_CLK) {
 8002556:	4b10      	ldr	r3, [pc, #64]	@ (8002598 <readEncoder+0x64>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	79ba      	ldrb	r2, [r7, #6]
 800255c:	429a      	cmp	r2, r3
 800255e:	d013      	beq.n	8002588 <readEncoder+0x54>
		HAL_Delay(1);
 8002560:	2001      	movs	r0, #1
 8002562:	f000 f97b 	bl	800285c <HAL_Delay>
		prev_CLK = now_CLK;
 8002566:	4a0c      	ldr	r2, [pc, #48]	@ (8002598 <readEncoder+0x64>)
 8002568:	79bb      	ldrb	r3, [r7, #6]
 800256a:	7013      	strb	r3, [r2, #0]

		if (now_CLK == 0) {
 800256c:	79bb      	ldrb	r3, [r7, #6]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10a      	bne.n	8002588 <readEncoder+0x54>
			if (now_DT == 0) {
 8002572:	797b      	ldrb	r3, [r7, #5]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d102      	bne.n	800257e <readEncoder+0x4a>
				result = INV_LOGICA_ENCODER ? 1 : -1;
 8002578:	2301      	movs	r3, #1
 800257a:	71fb      	strb	r3, [r7, #7]
 800257c:	e004      	b.n	8002588 <readEncoder+0x54>
			}
			else if (now_DT == 1) {
 800257e:	797b      	ldrb	r3, [r7, #5]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d101      	bne.n	8002588 <readEncoder+0x54>
				result = INV_LOGICA_ENCODER ? -1 : 1;
 8002584:	23ff      	movs	r3, #255	@ 0xff
 8002586:	71fb      	strb	r3, [r7, #7]
			}
		}
	}

	return (result);
 8002588:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800258c:	4618      	mov	r0, r3
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40010c00 	.word	0x40010c00
 8002598:	2000008a 	.word	0x2000008a

0800259c <readButton>:
/*	Devuelve:															*/
/* 		-1: Pulsacion larga												*/
/*		 0: No se presiono												*/
/*		 1: Presion corta												*/
/************************************************************************/
int8_t readButton() {
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
	static uint8_t bt_prev = 0;
	uint8_t bt_now = BUTTON();
 80025a2:	2180      	movs	r1, #128	@ 0x80
 80025a4:	481f      	ldr	r0, [pc, #124]	@ (8002624 <readButton+0x88>)
 80025a6:	f000 fc41 	bl	8002e2c <HAL_GPIO_ReadPin>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	bf0c      	ite	eq
 80025b0:	2301      	moveq	r3, #1
 80025b2:	2300      	movne	r3, #0
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	70fb      	strb	r3, [r7, #3]
	uint8_t result = 0;
 80025b8:	2300      	movs	r3, #0
 80025ba:	71fb      	strb	r3, [r7, #7]
	uint16_t dt = 0;
 80025bc:	2300      	movs	r3, #0
 80025be:	80bb      	strh	r3, [r7, #4]

	if (bt_now != bt_prev) {
 80025c0:	4b19      	ldr	r3, [pc, #100]	@ (8002628 <readButton+0x8c>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	78fa      	ldrb	r2, [r7, #3]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d026      	beq.n	8002618 <readButton+0x7c>
		if (bt_now == 1 && bt_prev == 0) {
 80025ca:	78fb      	ldrb	r3, [r7, #3]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d120      	bne.n	8002612 <readButton+0x76>
 80025d0:	4b15      	ldr	r3, [pc, #84]	@ (8002628 <readButton+0x8c>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d11c      	bne.n	8002612 <readButton+0x76>
			HAL_Delay(5);
 80025d8:	2005      	movs	r0, #5
 80025da:	f000 f93f 	bl	800285c <HAL_Delay>
			while (BUTTON() == 1) {
 80025de:	e011      	b.n	8002604 <readButton+0x68>
				HAL_Delay(1);
 80025e0:	2001      	movs	r0, #1
 80025e2:	f000 f93b 	bl	800285c <HAL_Delay>
				dt++;
 80025e6:	88bb      	ldrh	r3, [r7, #4]
 80025e8:	3301      	adds	r3, #1
 80025ea:	80bb      	strh	r3, [r7, #4]
				if (dt > MIN_MS_ENCODER_LT) {
 80025ec:	88bb      	ldrh	r3, [r7, #4]
 80025ee:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80025f2:	d902      	bls.n	80025fa <readButton+0x5e>
					result = -1;
 80025f4:	23ff      	movs	r3, #255	@ 0xff
 80025f6:	71fb      	strb	r3, [r7, #7]
					break;
 80025f8:	e00b      	b.n	8002612 <readButton+0x76>
				}
				else if (dt < MAX_MS_ENCODER_ST) {
 80025fa:	88bb      	ldrh	r3, [r7, #4]
 80025fc:	2b31      	cmp	r3, #49	@ 0x31
 80025fe:	d801      	bhi.n	8002604 <readButton+0x68>
					result = 1;
 8002600:	2301      	movs	r3, #1
 8002602:	71fb      	strb	r3, [r7, #7]
			while (BUTTON() == 1) {
 8002604:	2180      	movs	r1, #128	@ 0x80
 8002606:	4807      	ldr	r0, [pc, #28]	@ (8002624 <readButton+0x88>)
 8002608:	f000 fc10 	bl	8002e2c <HAL_GPIO_ReadPin>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0e6      	beq.n	80025e0 <readButton+0x44>
				}
			}
		}

		bt_prev = bt_now;
 8002612:	4a05      	ldr	r2, [pc, #20]	@ (8002628 <readButton+0x8c>)
 8002614:	78fb      	ldrb	r3, [r7, #3]
 8002616:	7013      	strb	r3, [r2, #0]
	}

	return (result);
 8002618:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800261c:	4618      	mov	r0, r3
 800261e:	3708      	adds	r7, #8
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40010800 	.word	0x40010800
 8002628:	2000008b 	.word	0x2000008b

0800262c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002630:	b672      	cpsid	i
}
 8002632:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002634:	bf00      	nop
 8002636:	e7fd      	b.n	8002634 <Error_Handler+0x8>

08002638 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800263e:	4b15      	ldr	r3, [pc, #84]	@ (8002694 <HAL_MspInit+0x5c>)
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	4a14      	ldr	r2, [pc, #80]	@ (8002694 <HAL_MspInit+0x5c>)
 8002644:	f043 0301 	orr.w	r3, r3, #1
 8002648:	6193      	str	r3, [r2, #24]
 800264a:	4b12      	ldr	r3, [pc, #72]	@ (8002694 <HAL_MspInit+0x5c>)
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	60bb      	str	r3, [r7, #8]
 8002654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002656:	4b0f      	ldr	r3, [pc, #60]	@ (8002694 <HAL_MspInit+0x5c>)
 8002658:	69db      	ldr	r3, [r3, #28]
 800265a:	4a0e      	ldr	r2, [pc, #56]	@ (8002694 <HAL_MspInit+0x5c>)
 800265c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002660:	61d3      	str	r3, [r2, #28]
 8002662:	4b0c      	ldr	r3, [pc, #48]	@ (8002694 <HAL_MspInit+0x5c>)
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800266a:	607b      	str	r3, [r7, #4]
 800266c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800266e:	4b0a      	ldr	r3, [pc, #40]	@ (8002698 <HAL_MspInit+0x60>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	4a04      	ldr	r2, [pc, #16]	@ (8002698 <HAL_MspInit+0x60>)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800268a:	bf00      	nop
 800268c:	3714      	adds	r7, #20
 800268e:	46bd      	mov	sp, r7
 8002690:	bc80      	pop	{r7}
 8002692:	4770      	bx	lr
 8002694:	40021000 	.word	0x40021000
 8002698:	40010000 	.word	0x40010000

0800269c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a09      	ldr	r2, [pc, #36]	@ (80026d0 <HAL_TIM_Base_MspInit+0x34>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d10b      	bne.n	80026c6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026ae:	4b09      	ldr	r3, [pc, #36]	@ (80026d4 <HAL_TIM_Base_MspInit+0x38>)
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	4a08      	ldr	r2, [pc, #32]	@ (80026d4 <HAL_TIM_Base_MspInit+0x38>)
 80026b4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80026b8:	6193      	str	r3, [r2, #24]
 80026ba:	4b06      	ldr	r3, [pc, #24]	@ (80026d4 <HAL_TIM_Base_MspInit+0x38>)
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026c2:	60fb      	str	r3, [r7, #12]
 80026c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80026c6:	bf00      	nop
 80026c8:	3714      	adds	r7, #20
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bc80      	pop	{r7}
 80026ce:	4770      	bx	lr
 80026d0:	40012c00 	.word	0x40012c00
 80026d4:	40021000 	.word	0x40021000

080026d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80026dc:	bf00      	nop
 80026de:	e7fd      	b.n	80026dc <NMI_Handler+0x4>

080026e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026e4:	bf00      	nop
 80026e6:	e7fd      	b.n	80026e4 <HardFault_Handler+0x4>

080026e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026ec:	bf00      	nop
 80026ee:	e7fd      	b.n	80026ec <MemManage_Handler+0x4>

080026f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026f4:	bf00      	nop
 80026f6:	e7fd      	b.n	80026f4 <BusFault_Handler+0x4>

080026f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026fc:	bf00      	nop
 80026fe:	e7fd      	b.n	80026fc <UsageFault_Handler+0x4>

08002700 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002704:	bf00      	nop
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr

0800270c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002710:	bf00      	nop
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr

08002718 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800271c:	bf00      	nop
 800271e:	46bd      	mov	sp, r7
 8002720:	bc80      	pop	{r7}
 8002722:	4770      	bx	lr

08002724 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002728:	f000 f87c 	bl	8002824 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800272c:	bf00      	nop
 800272e:	bd80      	pop	{r7, pc}

08002730 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SIG_INPUT_Pin);
 8002734:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002738:	f000 fba8 	bl	8002e8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800273c:	bf00      	nop
 800273e:	bd80      	pop	{r7, pc}

08002740 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002744:	bf00      	nop
 8002746:	46bd      	mov	sp, r7
 8002748:	bc80      	pop	{r7}
 800274a:	4770      	bx	lr

0800274c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800274c:	f7ff fff8 	bl	8002740 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002750:	480b      	ldr	r0, [pc, #44]	@ (8002780 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002752:	490c      	ldr	r1, [pc, #48]	@ (8002784 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002754:	4a0c      	ldr	r2, [pc, #48]	@ (8002788 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002756:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002758:	e002      	b.n	8002760 <LoopCopyDataInit>

0800275a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800275a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800275c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800275e:	3304      	adds	r3, #4

08002760 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002760:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002762:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002764:	d3f9      	bcc.n	800275a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002766:	4a09      	ldr	r2, [pc, #36]	@ (800278c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002768:	4c09      	ldr	r4, [pc, #36]	@ (8002790 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800276a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800276c:	e001      	b.n	8002772 <LoopFillZerobss>

0800276e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800276e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002770:	3204      	adds	r2, #4

08002772 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002772:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002774:	d3fb      	bcc.n	800276e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002776:	f001 fa9b 	bl	8003cb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800277a:	f7fe ff4d 	bl	8001618 <main>
  bx lr
 800277e:	4770      	bx	lr
  ldr r0, =_sdata
 8002780:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002784:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002788:	08004000 	.word	0x08004000
  ldr r2, =_sbss
 800278c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002790:	20000090 	.word	0x20000090

08002794 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002794:	e7fe      	b.n	8002794 <ADC1_2_IRQHandler>
	...

08002798 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800279c:	4b08      	ldr	r3, [pc, #32]	@ (80027c0 <HAL_Init+0x28>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a07      	ldr	r2, [pc, #28]	@ (80027c0 <HAL_Init+0x28>)
 80027a2:	f043 0310 	orr.w	r3, r3, #16
 80027a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027a8:	2003      	movs	r0, #3
 80027aa:	f000 f96b 	bl	8002a84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027ae:	2000      	movs	r0, #0
 80027b0:	f000 f808 	bl	80027c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027b4:	f7ff ff40 	bl	8002638 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	40022000 	.word	0x40022000

080027c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027cc:	4b12      	ldr	r3, [pc, #72]	@ (8002818 <HAL_InitTick+0x54>)
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	4b12      	ldr	r3, [pc, #72]	@ (800281c <HAL_InitTick+0x58>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	4619      	mov	r1, r3
 80027d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027da:	fbb3 f3f1 	udiv	r3, r3, r1
 80027de:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e2:	4618      	mov	r0, r3
 80027e4:	f000 f991 	bl	8002b0a <HAL_SYSTICK_Config>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e00e      	b.n	8002810 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2b0f      	cmp	r3, #15
 80027f6:	d80a      	bhi.n	800280e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027f8:	2200      	movs	r2, #0
 80027fa:	6879      	ldr	r1, [r7, #4]
 80027fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002800:	f000 f94b 	bl	8002a9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002804:	4a06      	ldr	r2, [pc, #24]	@ (8002820 <HAL_InitTick+0x5c>)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800280a:	2300      	movs	r3, #0
 800280c:	e000      	b.n	8002810 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
}
 8002810:	4618      	mov	r0, r3
 8002812:	3708      	adds	r7, #8
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	20000004 	.word	0x20000004
 800281c:	2000000c 	.word	0x2000000c
 8002820:	20000008 	.word	0x20000008

08002824 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002828:	4b05      	ldr	r3, [pc, #20]	@ (8002840 <HAL_IncTick+0x1c>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	461a      	mov	r2, r3
 800282e:	4b05      	ldr	r3, [pc, #20]	@ (8002844 <HAL_IncTick+0x20>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4413      	add	r3, r2
 8002834:	4a03      	ldr	r2, [pc, #12]	@ (8002844 <HAL_IncTick+0x20>)
 8002836:	6013      	str	r3, [r2, #0]
}
 8002838:	bf00      	nop
 800283a:	46bd      	mov	sp, r7
 800283c:	bc80      	pop	{r7}
 800283e:	4770      	bx	lr
 8002840:	2000000c 	.word	0x2000000c
 8002844:	2000008c 	.word	0x2000008c

08002848 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  return uwTick;
 800284c:	4b02      	ldr	r3, [pc, #8]	@ (8002858 <HAL_GetTick+0x10>)
 800284e:	681b      	ldr	r3, [r3, #0]
}
 8002850:	4618      	mov	r0, r3
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr
 8002858:	2000008c 	.word	0x2000008c

0800285c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002864:	f7ff fff0 	bl	8002848 <HAL_GetTick>
 8002868:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002874:	d005      	beq.n	8002882 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002876:	4b0a      	ldr	r3, [pc, #40]	@ (80028a0 <HAL_Delay+0x44>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	461a      	mov	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4413      	add	r3, r2
 8002880:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002882:	bf00      	nop
 8002884:	f7ff ffe0 	bl	8002848 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	429a      	cmp	r2, r3
 8002892:	d8f7      	bhi.n	8002884 <HAL_Delay+0x28>
  {
  }
}
 8002894:	bf00      	nop
 8002896:	bf00      	nop
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	2000000c 	.word	0x2000000c

080028a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028b4:	4b0c      	ldr	r3, [pc, #48]	@ (80028e8 <__NVIC_SetPriorityGrouping+0x44>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ba:	68ba      	ldr	r2, [r7, #8]
 80028bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028c0:	4013      	ands	r3, r2
 80028c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028d6:	4a04      	ldr	r2, [pc, #16]	@ (80028e8 <__NVIC_SetPriorityGrouping+0x44>)
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	60d3      	str	r3, [r2, #12]
}
 80028dc:	bf00      	nop
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bc80      	pop	{r7}
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	e000ed00 	.word	0xe000ed00

080028ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028f0:	4b04      	ldr	r3, [pc, #16]	@ (8002904 <__NVIC_GetPriorityGrouping+0x18>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	0a1b      	lsrs	r3, r3, #8
 80028f6:	f003 0307 	and.w	r3, r3, #7
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bc80      	pop	{r7}
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	e000ed00 	.word	0xe000ed00

08002908 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	4603      	mov	r3, r0
 8002910:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002916:	2b00      	cmp	r3, #0
 8002918:	db0b      	blt.n	8002932 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800291a:	79fb      	ldrb	r3, [r7, #7]
 800291c:	f003 021f 	and.w	r2, r3, #31
 8002920:	4906      	ldr	r1, [pc, #24]	@ (800293c <__NVIC_EnableIRQ+0x34>)
 8002922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002926:	095b      	lsrs	r3, r3, #5
 8002928:	2001      	movs	r0, #1
 800292a:	fa00 f202 	lsl.w	r2, r0, r2
 800292e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	bc80      	pop	{r7}
 800293a:	4770      	bx	lr
 800293c:	e000e100 	.word	0xe000e100

08002940 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	4603      	mov	r3, r0
 8002948:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800294a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294e:	2b00      	cmp	r3, #0
 8002950:	db12      	blt.n	8002978 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002952:	79fb      	ldrb	r3, [r7, #7]
 8002954:	f003 021f 	and.w	r2, r3, #31
 8002958:	490a      	ldr	r1, [pc, #40]	@ (8002984 <__NVIC_DisableIRQ+0x44>)
 800295a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295e:	095b      	lsrs	r3, r3, #5
 8002960:	2001      	movs	r0, #1
 8002962:	fa00 f202 	lsl.w	r2, r0, r2
 8002966:	3320      	adds	r3, #32
 8002968:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800296c:	f3bf 8f4f 	dsb	sy
}
 8002970:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002972:	f3bf 8f6f 	isb	sy
}
 8002976:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	bc80      	pop	{r7}
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	e000e100 	.word	0xe000e100

08002988 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	4603      	mov	r3, r0
 8002990:	6039      	str	r1, [r7, #0]
 8002992:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002998:	2b00      	cmp	r3, #0
 800299a:	db0a      	blt.n	80029b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	b2da      	uxtb	r2, r3
 80029a0:	490c      	ldr	r1, [pc, #48]	@ (80029d4 <__NVIC_SetPriority+0x4c>)
 80029a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a6:	0112      	lsls	r2, r2, #4
 80029a8:	b2d2      	uxtb	r2, r2
 80029aa:	440b      	add	r3, r1
 80029ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029b0:	e00a      	b.n	80029c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	b2da      	uxtb	r2, r3
 80029b6:	4908      	ldr	r1, [pc, #32]	@ (80029d8 <__NVIC_SetPriority+0x50>)
 80029b8:	79fb      	ldrb	r3, [r7, #7]
 80029ba:	f003 030f 	and.w	r3, r3, #15
 80029be:	3b04      	subs	r3, #4
 80029c0:	0112      	lsls	r2, r2, #4
 80029c2:	b2d2      	uxtb	r2, r2
 80029c4:	440b      	add	r3, r1
 80029c6:	761a      	strb	r2, [r3, #24]
}
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bc80      	pop	{r7}
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	e000e100 	.word	0xe000e100
 80029d8:	e000ed00 	.word	0xe000ed00

080029dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029dc:	b480      	push	{r7}
 80029de:	b089      	sub	sp, #36	@ 0x24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f003 0307 	and.w	r3, r3, #7
 80029ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	f1c3 0307 	rsb	r3, r3, #7
 80029f6:	2b04      	cmp	r3, #4
 80029f8:	bf28      	it	cs
 80029fa:	2304      	movcs	r3, #4
 80029fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	3304      	adds	r3, #4
 8002a02:	2b06      	cmp	r3, #6
 8002a04:	d902      	bls.n	8002a0c <NVIC_EncodePriority+0x30>
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	3b03      	subs	r3, #3
 8002a0a:	e000      	b.n	8002a0e <NVIC_EncodePriority+0x32>
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a10:	f04f 32ff 	mov.w	r2, #4294967295
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1a:	43da      	mvns	r2, r3
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	401a      	ands	r2, r3
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a24:	f04f 31ff 	mov.w	r1, #4294967295
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a2e:	43d9      	mvns	r1, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a34:	4313      	orrs	r3, r2
         );
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3724      	adds	r7, #36	@ 0x24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bc80      	pop	{r7}
 8002a3e:	4770      	bx	lr

08002a40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a50:	d301      	bcc.n	8002a56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a52:	2301      	movs	r3, #1
 8002a54:	e00f      	b.n	8002a76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a56:	4a0a      	ldr	r2, [pc, #40]	@ (8002a80 <SysTick_Config+0x40>)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a5e:	210f      	movs	r1, #15
 8002a60:	f04f 30ff 	mov.w	r0, #4294967295
 8002a64:	f7ff ff90 	bl	8002988 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a68:	4b05      	ldr	r3, [pc, #20]	@ (8002a80 <SysTick_Config+0x40>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a6e:	4b04      	ldr	r3, [pc, #16]	@ (8002a80 <SysTick_Config+0x40>)
 8002a70:	2207      	movs	r2, #7
 8002a72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	e000e010 	.word	0xe000e010

08002a84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f7ff ff09 	bl	80028a4 <__NVIC_SetPriorityGrouping>
}
 8002a92:	bf00      	nop
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b086      	sub	sp, #24
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	60b9      	str	r1, [r7, #8]
 8002aa4:	607a      	str	r2, [r7, #4]
 8002aa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002aac:	f7ff ff1e 	bl	80028ec <__NVIC_GetPriorityGrouping>
 8002ab0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	68b9      	ldr	r1, [r7, #8]
 8002ab6:	6978      	ldr	r0, [r7, #20]
 8002ab8:	f7ff ff90 	bl	80029dc <NVIC_EncodePriority>
 8002abc:	4602      	mov	r2, r0
 8002abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ac2:	4611      	mov	r1, r2
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff ff5f 	bl	8002988 <__NVIC_SetPriority>
}
 8002aca:	bf00      	nop
 8002acc:	3718      	adds	r7, #24
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b082      	sub	sp, #8
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	4603      	mov	r3, r0
 8002ada:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7ff ff11 	bl	8002908 <__NVIC_EnableIRQ>
}
 8002ae6:	bf00      	nop
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b082      	sub	sp, #8
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	4603      	mov	r3, r0
 8002af6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff ff1f 	bl	8002940 <__NVIC_DisableIRQ>
}
 8002b02:	bf00      	nop
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b082      	sub	sp, #8
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f7ff ff94 	bl	8002a40 <SysTick_Config>
 8002b18:	4603      	mov	r3, r0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
	...

08002b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b08b      	sub	sp, #44	@ 0x2c
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002b32:	2300      	movs	r3, #0
 8002b34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b36:	e169      	b.n	8002e0c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002b38:	2201      	movs	r2, #1
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	69fa      	ldr	r2, [r7, #28]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	f040 8158 	bne.w	8002e06 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	4a9a      	ldr	r2, [pc, #616]	@ (8002dc4 <HAL_GPIO_Init+0x2a0>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d05e      	beq.n	8002c1e <HAL_GPIO_Init+0xfa>
 8002b60:	4a98      	ldr	r2, [pc, #608]	@ (8002dc4 <HAL_GPIO_Init+0x2a0>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d875      	bhi.n	8002c52 <HAL_GPIO_Init+0x12e>
 8002b66:	4a98      	ldr	r2, [pc, #608]	@ (8002dc8 <HAL_GPIO_Init+0x2a4>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d058      	beq.n	8002c1e <HAL_GPIO_Init+0xfa>
 8002b6c:	4a96      	ldr	r2, [pc, #600]	@ (8002dc8 <HAL_GPIO_Init+0x2a4>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d86f      	bhi.n	8002c52 <HAL_GPIO_Init+0x12e>
 8002b72:	4a96      	ldr	r2, [pc, #600]	@ (8002dcc <HAL_GPIO_Init+0x2a8>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d052      	beq.n	8002c1e <HAL_GPIO_Init+0xfa>
 8002b78:	4a94      	ldr	r2, [pc, #592]	@ (8002dcc <HAL_GPIO_Init+0x2a8>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d869      	bhi.n	8002c52 <HAL_GPIO_Init+0x12e>
 8002b7e:	4a94      	ldr	r2, [pc, #592]	@ (8002dd0 <HAL_GPIO_Init+0x2ac>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d04c      	beq.n	8002c1e <HAL_GPIO_Init+0xfa>
 8002b84:	4a92      	ldr	r2, [pc, #584]	@ (8002dd0 <HAL_GPIO_Init+0x2ac>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d863      	bhi.n	8002c52 <HAL_GPIO_Init+0x12e>
 8002b8a:	4a92      	ldr	r2, [pc, #584]	@ (8002dd4 <HAL_GPIO_Init+0x2b0>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d046      	beq.n	8002c1e <HAL_GPIO_Init+0xfa>
 8002b90:	4a90      	ldr	r2, [pc, #576]	@ (8002dd4 <HAL_GPIO_Init+0x2b0>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d85d      	bhi.n	8002c52 <HAL_GPIO_Init+0x12e>
 8002b96:	2b12      	cmp	r3, #18
 8002b98:	d82a      	bhi.n	8002bf0 <HAL_GPIO_Init+0xcc>
 8002b9a:	2b12      	cmp	r3, #18
 8002b9c:	d859      	bhi.n	8002c52 <HAL_GPIO_Init+0x12e>
 8002b9e:	a201      	add	r2, pc, #4	@ (adr r2, 8002ba4 <HAL_GPIO_Init+0x80>)
 8002ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba4:	08002c1f 	.word	0x08002c1f
 8002ba8:	08002bf9 	.word	0x08002bf9
 8002bac:	08002c0b 	.word	0x08002c0b
 8002bb0:	08002c4d 	.word	0x08002c4d
 8002bb4:	08002c53 	.word	0x08002c53
 8002bb8:	08002c53 	.word	0x08002c53
 8002bbc:	08002c53 	.word	0x08002c53
 8002bc0:	08002c53 	.word	0x08002c53
 8002bc4:	08002c53 	.word	0x08002c53
 8002bc8:	08002c53 	.word	0x08002c53
 8002bcc:	08002c53 	.word	0x08002c53
 8002bd0:	08002c53 	.word	0x08002c53
 8002bd4:	08002c53 	.word	0x08002c53
 8002bd8:	08002c53 	.word	0x08002c53
 8002bdc:	08002c53 	.word	0x08002c53
 8002be0:	08002c53 	.word	0x08002c53
 8002be4:	08002c53 	.word	0x08002c53
 8002be8:	08002c01 	.word	0x08002c01
 8002bec:	08002c15 	.word	0x08002c15
 8002bf0:	4a79      	ldr	r2, [pc, #484]	@ (8002dd8 <HAL_GPIO_Init+0x2b4>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d013      	beq.n	8002c1e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002bf6:	e02c      	b.n	8002c52 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	623b      	str	r3, [r7, #32]
          break;
 8002bfe:	e029      	b.n	8002c54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	3304      	adds	r3, #4
 8002c06:	623b      	str	r3, [r7, #32]
          break;
 8002c08:	e024      	b.n	8002c54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	3308      	adds	r3, #8
 8002c10:	623b      	str	r3, [r7, #32]
          break;
 8002c12:	e01f      	b.n	8002c54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	330c      	adds	r3, #12
 8002c1a:	623b      	str	r3, [r7, #32]
          break;
 8002c1c:	e01a      	b.n	8002c54 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d102      	bne.n	8002c2c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c26:	2304      	movs	r3, #4
 8002c28:	623b      	str	r3, [r7, #32]
          break;
 8002c2a:	e013      	b.n	8002c54 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d105      	bne.n	8002c40 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c34:	2308      	movs	r3, #8
 8002c36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	69fa      	ldr	r2, [r7, #28]
 8002c3c:	611a      	str	r2, [r3, #16]
          break;
 8002c3e:	e009      	b.n	8002c54 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c40:	2308      	movs	r3, #8
 8002c42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	69fa      	ldr	r2, [r7, #28]
 8002c48:	615a      	str	r2, [r3, #20]
          break;
 8002c4a:	e003      	b.n	8002c54 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	623b      	str	r3, [r7, #32]
          break;
 8002c50:	e000      	b.n	8002c54 <HAL_GPIO_Init+0x130>
          break;
 8002c52:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	2bff      	cmp	r3, #255	@ 0xff
 8002c58:	d801      	bhi.n	8002c5e <HAL_GPIO_Init+0x13a>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	e001      	b.n	8002c62 <HAL_GPIO_Init+0x13e>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	3304      	adds	r3, #4
 8002c62:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	2bff      	cmp	r3, #255	@ 0xff
 8002c68:	d802      	bhi.n	8002c70 <HAL_GPIO_Init+0x14c>
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	e002      	b.n	8002c76 <HAL_GPIO_Init+0x152>
 8002c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c72:	3b08      	subs	r3, #8
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	210f      	movs	r1, #15
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	fa01 f303 	lsl.w	r3, r1, r3
 8002c84:	43db      	mvns	r3, r3
 8002c86:	401a      	ands	r2, r3
 8002c88:	6a39      	ldr	r1, [r7, #32]
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c90:	431a      	orrs	r2, r3
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f000 80b1 	beq.w	8002e06 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ca4:	4b4d      	ldr	r3, [pc, #308]	@ (8002ddc <HAL_GPIO_Init+0x2b8>)
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	4a4c      	ldr	r2, [pc, #304]	@ (8002ddc <HAL_GPIO_Init+0x2b8>)
 8002caa:	f043 0301 	orr.w	r3, r3, #1
 8002cae:	6193      	str	r3, [r2, #24]
 8002cb0:	4b4a      	ldr	r3, [pc, #296]	@ (8002ddc <HAL_GPIO_Init+0x2b8>)
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002cbc:	4a48      	ldr	r2, [pc, #288]	@ (8002de0 <HAL_GPIO_Init+0x2bc>)
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc0:	089b      	lsrs	r3, r3, #2
 8002cc2:	3302      	adds	r3, #2
 8002cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cc8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ccc:	f003 0303 	and.w	r3, r3, #3
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	220f      	movs	r2, #15
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a40      	ldr	r2, [pc, #256]	@ (8002de4 <HAL_GPIO_Init+0x2c0>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d013      	beq.n	8002d10 <HAL_GPIO_Init+0x1ec>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a3f      	ldr	r2, [pc, #252]	@ (8002de8 <HAL_GPIO_Init+0x2c4>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d00d      	beq.n	8002d0c <HAL_GPIO_Init+0x1e8>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a3e      	ldr	r2, [pc, #248]	@ (8002dec <HAL_GPIO_Init+0x2c8>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d007      	beq.n	8002d08 <HAL_GPIO_Init+0x1e4>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a3d      	ldr	r2, [pc, #244]	@ (8002df0 <HAL_GPIO_Init+0x2cc>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d101      	bne.n	8002d04 <HAL_GPIO_Init+0x1e0>
 8002d00:	2303      	movs	r3, #3
 8002d02:	e006      	b.n	8002d12 <HAL_GPIO_Init+0x1ee>
 8002d04:	2304      	movs	r3, #4
 8002d06:	e004      	b.n	8002d12 <HAL_GPIO_Init+0x1ee>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	e002      	b.n	8002d12 <HAL_GPIO_Init+0x1ee>
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e000      	b.n	8002d12 <HAL_GPIO_Init+0x1ee>
 8002d10:	2300      	movs	r3, #0
 8002d12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d14:	f002 0203 	and.w	r2, r2, #3
 8002d18:	0092      	lsls	r2, r2, #2
 8002d1a:	4093      	lsls	r3, r2
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d22:	492f      	ldr	r1, [pc, #188]	@ (8002de0 <HAL_GPIO_Init+0x2bc>)
 8002d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d26:	089b      	lsrs	r3, r3, #2
 8002d28:	3302      	adds	r3, #2
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d006      	beq.n	8002d4a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d3c:	4b2d      	ldr	r3, [pc, #180]	@ (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	492c      	ldr	r1, [pc, #176]	@ (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	608b      	str	r3, [r1, #8]
 8002d48:	e006      	b.n	8002d58 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d4a:	4b2a      	ldr	r3, [pc, #168]	@ (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002d4c:	689a      	ldr	r2, [r3, #8]
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	43db      	mvns	r3, r3
 8002d52:	4928      	ldr	r1, [pc, #160]	@ (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002d54:	4013      	ands	r3, r2
 8002d56:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d006      	beq.n	8002d72 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d64:	4b23      	ldr	r3, [pc, #140]	@ (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002d66:	68da      	ldr	r2, [r3, #12]
 8002d68:	4922      	ldr	r1, [pc, #136]	@ (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	60cb      	str	r3, [r1, #12]
 8002d70:	e006      	b.n	8002d80 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d72:	4b20      	ldr	r3, [pc, #128]	@ (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002d74:	68da      	ldr	r2, [r3, #12]
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	491e      	ldr	r1, [pc, #120]	@ (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d006      	beq.n	8002d9a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002d8c:	4b19      	ldr	r3, [pc, #100]	@ (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	4918      	ldr	r1, [pc, #96]	@ (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	604b      	str	r3, [r1, #4]
 8002d98:	e006      	b.n	8002da8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d9a:	4b16      	ldr	r3, [pc, #88]	@ (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	43db      	mvns	r3, r3
 8002da2:	4914      	ldr	r1, [pc, #80]	@ (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002da4:	4013      	ands	r3, r2
 8002da6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d021      	beq.n	8002df8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002db4:	4b0f      	ldr	r3, [pc, #60]	@ (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	490e      	ldr	r1, [pc, #56]	@ (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	600b      	str	r3, [r1, #0]
 8002dc0:	e021      	b.n	8002e06 <HAL_GPIO_Init+0x2e2>
 8002dc2:	bf00      	nop
 8002dc4:	10320000 	.word	0x10320000
 8002dc8:	10310000 	.word	0x10310000
 8002dcc:	10220000 	.word	0x10220000
 8002dd0:	10210000 	.word	0x10210000
 8002dd4:	10120000 	.word	0x10120000
 8002dd8:	10110000 	.word	0x10110000
 8002ddc:	40021000 	.word	0x40021000
 8002de0:	40010000 	.word	0x40010000
 8002de4:	40010800 	.word	0x40010800
 8002de8:	40010c00 	.word	0x40010c00
 8002dec:	40011000 	.word	0x40011000
 8002df0:	40011400 	.word	0x40011400
 8002df4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002df8:	4b0b      	ldr	r3, [pc, #44]	@ (8002e28 <HAL_GPIO_Init+0x304>)
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	43db      	mvns	r3, r3
 8002e00:	4909      	ldr	r1, [pc, #36]	@ (8002e28 <HAL_GPIO_Init+0x304>)
 8002e02:	4013      	ands	r3, r2
 8002e04:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e08:	3301      	adds	r3, #1
 8002e0a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e12:	fa22 f303 	lsr.w	r3, r2, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f47f ae8e 	bne.w	8002b38 <HAL_GPIO_Init+0x14>
  }
}
 8002e1c:	bf00      	nop
 8002e1e:	bf00      	nop
 8002e20:	372c      	adds	r7, #44	@ 0x2c
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bc80      	pop	{r7}
 8002e26:	4770      	bx	lr
 8002e28:	40010400 	.word	0x40010400

08002e2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	460b      	mov	r3, r1
 8002e36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689a      	ldr	r2, [r3, #8]
 8002e3c:	887b      	ldrh	r3, [r7, #2]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d002      	beq.n	8002e4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e44:	2301      	movs	r3, #1
 8002e46:	73fb      	strb	r3, [r7, #15]
 8002e48:	e001      	b.n	8002e4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3714      	adds	r7, #20
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bc80      	pop	{r7}
 8002e58:	4770      	bx	lr

08002e5a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	b083      	sub	sp, #12
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
 8002e62:	460b      	mov	r3, r1
 8002e64:	807b      	strh	r3, [r7, #2]
 8002e66:	4613      	mov	r3, r2
 8002e68:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e6a:	787b      	ldrb	r3, [r7, #1]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d003      	beq.n	8002e78 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e70:	887a      	ldrh	r2, [r7, #2]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002e76:	e003      	b.n	8002e80 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e78:	887b      	ldrh	r3, [r7, #2]
 8002e7a:	041a      	lsls	r2, r3, #16
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	611a      	str	r2, [r3, #16]
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bc80      	pop	{r7}
 8002e88:	4770      	bx	lr
	...

08002e8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	4603      	mov	r3, r0
 8002e94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e96:	4b08      	ldr	r3, [pc, #32]	@ (8002eb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e98:	695a      	ldr	r2, [r3, #20]
 8002e9a:	88fb      	ldrh	r3, [r7, #6]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d006      	beq.n	8002eb0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ea2:	4a05      	ldr	r2, [pc, #20]	@ (8002eb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ea4:	88fb      	ldrh	r3, [r7, #6]
 8002ea6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ea8:	88fb      	ldrh	r3, [r7, #6]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff f976 	bl	800219c <HAL_GPIO_EXTI_Callback>
  }
}
 8002eb0:	bf00      	nop
 8002eb2:	3708      	adds	r7, #8
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	40010400 	.word	0x40010400

08002ebc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e272      	b.n	80033b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f000 8087 	beq.w	8002fea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002edc:	4b92      	ldr	r3, [pc, #584]	@ (8003128 <HAL_RCC_OscConfig+0x26c>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f003 030c 	and.w	r3, r3, #12
 8002ee4:	2b04      	cmp	r3, #4
 8002ee6:	d00c      	beq.n	8002f02 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ee8:	4b8f      	ldr	r3, [pc, #572]	@ (8003128 <HAL_RCC_OscConfig+0x26c>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f003 030c 	and.w	r3, r3, #12
 8002ef0:	2b08      	cmp	r3, #8
 8002ef2:	d112      	bne.n	8002f1a <HAL_RCC_OscConfig+0x5e>
 8002ef4:	4b8c      	ldr	r3, [pc, #560]	@ (8003128 <HAL_RCC_OscConfig+0x26c>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002efc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f00:	d10b      	bne.n	8002f1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f02:	4b89      	ldr	r3, [pc, #548]	@ (8003128 <HAL_RCC_OscConfig+0x26c>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d06c      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x12c>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d168      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e24c      	b.n	80033b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f22:	d106      	bne.n	8002f32 <HAL_RCC_OscConfig+0x76>
 8002f24:	4b80      	ldr	r3, [pc, #512]	@ (8003128 <HAL_RCC_OscConfig+0x26c>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a7f      	ldr	r2, [pc, #508]	@ (8003128 <HAL_RCC_OscConfig+0x26c>)
 8002f2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f2e:	6013      	str	r3, [r2, #0]
 8002f30:	e02e      	b.n	8002f90 <HAL_RCC_OscConfig+0xd4>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d10c      	bne.n	8002f54 <HAL_RCC_OscConfig+0x98>
 8002f3a:	4b7b      	ldr	r3, [pc, #492]	@ (8003128 <HAL_RCC_OscConfig+0x26c>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a7a      	ldr	r2, [pc, #488]	@ (8003128 <HAL_RCC_OscConfig+0x26c>)
 8002f40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f44:	6013      	str	r3, [r2, #0]
 8002f46:	4b78      	ldr	r3, [pc, #480]	@ (8003128 <HAL_RCC_OscConfig+0x26c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a77      	ldr	r2, [pc, #476]	@ (8003128 <HAL_RCC_OscConfig+0x26c>)
 8002f4c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f50:	6013      	str	r3, [r2, #0]
 8002f52:	e01d      	b.n	8002f90 <HAL_RCC_OscConfig+0xd4>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f5c:	d10c      	bne.n	8002f78 <HAL_RCC_OscConfig+0xbc>
 8002f5e:	4b72      	ldr	r3, [pc, #456]	@ (8003128 <HAL_RCC_OscConfig+0x26c>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a71      	ldr	r2, [pc, #452]	@ (8003128 <HAL_RCC_OscConfig+0x26c>)
 8002f64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f68:	6013      	str	r3, [r2, #0]
 8002f6a:	4b6f      	ldr	r3, [pc, #444]	@ (8003128 <HAL_RCC_OscConfig+0x26c>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a6e      	ldr	r2, [pc, #440]	@ (8003128 <HAL_RCC_OscConfig+0x26c>)
 8002f70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f74:	6013      	str	r3, [r2, #0]
 8002f76:	e00b      	b.n	8002f90 <HAL_RCC_OscConfig+0xd4>
 8002f78:	4b6b      	ldr	r3, [pc, #428]	@ (8003128 <HAL_RCC_OscConfig+0x26c>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a6a      	ldr	r2, [pc, #424]	@ (8003128 <HAL_RCC_OscConfig+0x26c>)
 8002f7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f82:	6013      	str	r3, [r2, #0]
 8002f84:	4b68      	ldr	r3, [pc, #416]	@ (8003128 <HAL_RCC_OscConfig+0x26c>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a67      	ldr	r2, [pc, #412]	@ (8003128 <HAL_RCC_OscConfig+0x26c>)
 8002f8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f8e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d013      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f98:	f7ff fc56 	bl	8002848 <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fa0:	f7ff fc52 	bl	8002848 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b64      	cmp	r3, #100	@ 0x64
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e200      	b.n	80033b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fb2:	4b5d      	ldr	r3, [pc, #372]	@ (8003128 <HAL_RCC_OscConfig+0x26c>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d0f0      	beq.n	8002fa0 <HAL_RCC_OscConfig+0xe4>
 8002fbe:	e014      	b.n	8002fea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc0:	f7ff fc42 	bl	8002848 <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fc6:	e008      	b.n	8002fda <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fc8:	f7ff fc3e 	bl	8002848 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b64      	cmp	r3, #100	@ 0x64
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e1ec      	b.n	80033b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fda:	4b53      	ldr	r3, [pc, #332]	@ (8003128 <HAL_RCC_OscConfig+0x26c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1f0      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x10c>
 8002fe6:	e000      	b.n	8002fea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fe8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d063      	beq.n	80030be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ff6:	4b4c      	ldr	r3, [pc, #304]	@ (8003128 <HAL_RCC_OscConfig+0x26c>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f003 030c 	and.w	r3, r3, #12
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00b      	beq.n	800301a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003002:	4b49      	ldr	r3, [pc, #292]	@ (8003128 <HAL_RCC_OscConfig+0x26c>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f003 030c 	and.w	r3, r3, #12
 800300a:	2b08      	cmp	r3, #8
 800300c:	d11c      	bne.n	8003048 <HAL_RCC_OscConfig+0x18c>
 800300e:	4b46      	ldr	r3, [pc, #280]	@ (8003128 <HAL_RCC_OscConfig+0x26c>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d116      	bne.n	8003048 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800301a:	4b43      	ldr	r3, [pc, #268]	@ (8003128 <HAL_RCC_OscConfig+0x26c>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d005      	beq.n	8003032 <HAL_RCC_OscConfig+0x176>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d001      	beq.n	8003032 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e1c0      	b.n	80033b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003032:	4b3d      	ldr	r3, [pc, #244]	@ (8003128 <HAL_RCC_OscConfig+0x26c>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	4939      	ldr	r1, [pc, #228]	@ (8003128 <HAL_RCC_OscConfig+0x26c>)
 8003042:	4313      	orrs	r3, r2
 8003044:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003046:	e03a      	b.n	80030be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d020      	beq.n	8003092 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003050:	4b36      	ldr	r3, [pc, #216]	@ (800312c <HAL_RCC_OscConfig+0x270>)
 8003052:	2201      	movs	r2, #1
 8003054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003056:	f7ff fbf7 	bl	8002848 <HAL_GetTick>
 800305a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800305c:	e008      	b.n	8003070 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800305e:	f7ff fbf3 	bl	8002848 <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d901      	bls.n	8003070 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e1a1      	b.n	80033b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003070:	4b2d      	ldr	r3, [pc, #180]	@ (8003128 <HAL_RCC_OscConfig+0x26c>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d0f0      	beq.n	800305e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800307c:	4b2a      	ldr	r3, [pc, #168]	@ (8003128 <HAL_RCC_OscConfig+0x26c>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	695b      	ldr	r3, [r3, #20]
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	4927      	ldr	r1, [pc, #156]	@ (8003128 <HAL_RCC_OscConfig+0x26c>)
 800308c:	4313      	orrs	r3, r2
 800308e:	600b      	str	r3, [r1, #0]
 8003090:	e015      	b.n	80030be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003092:	4b26      	ldr	r3, [pc, #152]	@ (800312c <HAL_RCC_OscConfig+0x270>)
 8003094:	2200      	movs	r2, #0
 8003096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003098:	f7ff fbd6 	bl	8002848 <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030a0:	f7ff fbd2 	bl	8002848 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e180      	b.n	80033b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030b2:	4b1d      	ldr	r3, [pc, #116]	@ (8003128 <HAL_RCC_OscConfig+0x26c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1f0      	bne.n	80030a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0308 	and.w	r3, r3, #8
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d03a      	beq.n	8003140 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d019      	beq.n	8003106 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030d2:	4b17      	ldr	r3, [pc, #92]	@ (8003130 <HAL_RCC_OscConfig+0x274>)
 80030d4:	2201      	movs	r2, #1
 80030d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030d8:	f7ff fbb6 	bl	8002848 <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030e0:	f7ff fbb2 	bl	8002848 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e160      	b.n	80033b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003128 <HAL_RCC_OscConfig+0x26c>)
 80030f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d0f0      	beq.n	80030e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80030fe:	2001      	movs	r0, #1
 8003100:	f000 fa9c 	bl	800363c <RCC_Delay>
 8003104:	e01c      	b.n	8003140 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003106:	4b0a      	ldr	r3, [pc, #40]	@ (8003130 <HAL_RCC_OscConfig+0x274>)
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800310c:	f7ff fb9c 	bl	8002848 <HAL_GetTick>
 8003110:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003112:	e00f      	b.n	8003134 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003114:	f7ff fb98 	bl	8002848 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d908      	bls.n	8003134 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e146      	b.n	80033b4 <HAL_RCC_OscConfig+0x4f8>
 8003126:	bf00      	nop
 8003128:	40021000 	.word	0x40021000
 800312c:	42420000 	.word	0x42420000
 8003130:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003134:	4b92      	ldr	r3, [pc, #584]	@ (8003380 <HAL_RCC_OscConfig+0x4c4>)
 8003136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003138:	f003 0302 	and.w	r3, r3, #2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d1e9      	bne.n	8003114 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0304 	and.w	r3, r3, #4
 8003148:	2b00      	cmp	r3, #0
 800314a:	f000 80a6 	beq.w	800329a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800314e:	2300      	movs	r3, #0
 8003150:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003152:	4b8b      	ldr	r3, [pc, #556]	@ (8003380 <HAL_RCC_OscConfig+0x4c4>)
 8003154:	69db      	ldr	r3, [r3, #28]
 8003156:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d10d      	bne.n	800317a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800315e:	4b88      	ldr	r3, [pc, #544]	@ (8003380 <HAL_RCC_OscConfig+0x4c4>)
 8003160:	69db      	ldr	r3, [r3, #28]
 8003162:	4a87      	ldr	r2, [pc, #540]	@ (8003380 <HAL_RCC_OscConfig+0x4c4>)
 8003164:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003168:	61d3      	str	r3, [r2, #28]
 800316a:	4b85      	ldr	r3, [pc, #532]	@ (8003380 <HAL_RCC_OscConfig+0x4c4>)
 800316c:	69db      	ldr	r3, [r3, #28]
 800316e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003172:	60bb      	str	r3, [r7, #8]
 8003174:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003176:	2301      	movs	r3, #1
 8003178:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800317a:	4b82      	ldr	r3, [pc, #520]	@ (8003384 <HAL_RCC_OscConfig+0x4c8>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003182:	2b00      	cmp	r3, #0
 8003184:	d118      	bne.n	80031b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003186:	4b7f      	ldr	r3, [pc, #508]	@ (8003384 <HAL_RCC_OscConfig+0x4c8>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a7e      	ldr	r2, [pc, #504]	@ (8003384 <HAL_RCC_OscConfig+0x4c8>)
 800318c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003190:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003192:	f7ff fb59 	bl	8002848 <HAL_GetTick>
 8003196:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003198:	e008      	b.n	80031ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800319a:	f7ff fb55 	bl	8002848 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b64      	cmp	r3, #100	@ 0x64
 80031a6:	d901      	bls.n	80031ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e103      	b.n	80033b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ac:	4b75      	ldr	r3, [pc, #468]	@ (8003384 <HAL_RCC_OscConfig+0x4c8>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d0f0      	beq.n	800319a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d106      	bne.n	80031ce <HAL_RCC_OscConfig+0x312>
 80031c0:	4b6f      	ldr	r3, [pc, #444]	@ (8003380 <HAL_RCC_OscConfig+0x4c4>)
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	4a6e      	ldr	r2, [pc, #440]	@ (8003380 <HAL_RCC_OscConfig+0x4c4>)
 80031c6:	f043 0301 	orr.w	r3, r3, #1
 80031ca:	6213      	str	r3, [r2, #32]
 80031cc:	e02d      	b.n	800322a <HAL_RCC_OscConfig+0x36e>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10c      	bne.n	80031f0 <HAL_RCC_OscConfig+0x334>
 80031d6:	4b6a      	ldr	r3, [pc, #424]	@ (8003380 <HAL_RCC_OscConfig+0x4c4>)
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	4a69      	ldr	r2, [pc, #420]	@ (8003380 <HAL_RCC_OscConfig+0x4c4>)
 80031dc:	f023 0301 	bic.w	r3, r3, #1
 80031e0:	6213      	str	r3, [r2, #32]
 80031e2:	4b67      	ldr	r3, [pc, #412]	@ (8003380 <HAL_RCC_OscConfig+0x4c4>)
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	4a66      	ldr	r2, [pc, #408]	@ (8003380 <HAL_RCC_OscConfig+0x4c4>)
 80031e8:	f023 0304 	bic.w	r3, r3, #4
 80031ec:	6213      	str	r3, [r2, #32]
 80031ee:	e01c      	b.n	800322a <HAL_RCC_OscConfig+0x36e>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	2b05      	cmp	r3, #5
 80031f6:	d10c      	bne.n	8003212 <HAL_RCC_OscConfig+0x356>
 80031f8:	4b61      	ldr	r3, [pc, #388]	@ (8003380 <HAL_RCC_OscConfig+0x4c4>)
 80031fa:	6a1b      	ldr	r3, [r3, #32]
 80031fc:	4a60      	ldr	r2, [pc, #384]	@ (8003380 <HAL_RCC_OscConfig+0x4c4>)
 80031fe:	f043 0304 	orr.w	r3, r3, #4
 8003202:	6213      	str	r3, [r2, #32]
 8003204:	4b5e      	ldr	r3, [pc, #376]	@ (8003380 <HAL_RCC_OscConfig+0x4c4>)
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	4a5d      	ldr	r2, [pc, #372]	@ (8003380 <HAL_RCC_OscConfig+0x4c4>)
 800320a:	f043 0301 	orr.w	r3, r3, #1
 800320e:	6213      	str	r3, [r2, #32]
 8003210:	e00b      	b.n	800322a <HAL_RCC_OscConfig+0x36e>
 8003212:	4b5b      	ldr	r3, [pc, #364]	@ (8003380 <HAL_RCC_OscConfig+0x4c4>)
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	4a5a      	ldr	r2, [pc, #360]	@ (8003380 <HAL_RCC_OscConfig+0x4c4>)
 8003218:	f023 0301 	bic.w	r3, r3, #1
 800321c:	6213      	str	r3, [r2, #32]
 800321e:	4b58      	ldr	r3, [pc, #352]	@ (8003380 <HAL_RCC_OscConfig+0x4c4>)
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	4a57      	ldr	r2, [pc, #348]	@ (8003380 <HAL_RCC_OscConfig+0x4c4>)
 8003224:	f023 0304 	bic.w	r3, r3, #4
 8003228:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d015      	beq.n	800325e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003232:	f7ff fb09 	bl	8002848 <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003238:	e00a      	b.n	8003250 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800323a:	f7ff fb05 	bl	8002848 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003248:	4293      	cmp	r3, r2
 800324a:	d901      	bls.n	8003250 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e0b1      	b.n	80033b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003250:	4b4b      	ldr	r3, [pc, #300]	@ (8003380 <HAL_RCC_OscConfig+0x4c4>)
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	f003 0302 	and.w	r3, r3, #2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d0ee      	beq.n	800323a <HAL_RCC_OscConfig+0x37e>
 800325c:	e014      	b.n	8003288 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800325e:	f7ff faf3 	bl	8002848 <HAL_GetTick>
 8003262:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003264:	e00a      	b.n	800327c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003266:	f7ff faef 	bl	8002848 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003274:	4293      	cmp	r3, r2
 8003276:	d901      	bls.n	800327c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e09b      	b.n	80033b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800327c:	4b40      	ldr	r3, [pc, #256]	@ (8003380 <HAL_RCC_OscConfig+0x4c4>)
 800327e:	6a1b      	ldr	r3, [r3, #32]
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1ee      	bne.n	8003266 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003288:	7dfb      	ldrb	r3, [r7, #23]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d105      	bne.n	800329a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800328e:	4b3c      	ldr	r3, [pc, #240]	@ (8003380 <HAL_RCC_OscConfig+0x4c4>)
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	4a3b      	ldr	r2, [pc, #236]	@ (8003380 <HAL_RCC_OscConfig+0x4c4>)
 8003294:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003298:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	69db      	ldr	r3, [r3, #28]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f000 8087 	beq.w	80033b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032a4:	4b36      	ldr	r3, [pc, #216]	@ (8003380 <HAL_RCC_OscConfig+0x4c4>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f003 030c 	and.w	r3, r3, #12
 80032ac:	2b08      	cmp	r3, #8
 80032ae:	d061      	beq.n	8003374 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	69db      	ldr	r3, [r3, #28]
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d146      	bne.n	8003346 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032b8:	4b33      	ldr	r3, [pc, #204]	@ (8003388 <HAL_RCC_OscConfig+0x4cc>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032be:	f7ff fac3 	bl	8002848 <HAL_GetTick>
 80032c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032c4:	e008      	b.n	80032d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032c6:	f7ff fabf 	bl	8002848 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e06d      	b.n	80033b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032d8:	4b29      	ldr	r3, [pc, #164]	@ (8003380 <HAL_RCC_OscConfig+0x4c4>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1f0      	bne.n	80032c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032ec:	d108      	bne.n	8003300 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80032ee:	4b24      	ldr	r3, [pc, #144]	@ (8003380 <HAL_RCC_OscConfig+0x4c4>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	4921      	ldr	r1, [pc, #132]	@ (8003380 <HAL_RCC_OscConfig+0x4c4>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003300:	4b1f      	ldr	r3, [pc, #124]	@ (8003380 <HAL_RCC_OscConfig+0x4c4>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a19      	ldr	r1, [r3, #32]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003310:	430b      	orrs	r3, r1
 8003312:	491b      	ldr	r1, [pc, #108]	@ (8003380 <HAL_RCC_OscConfig+0x4c4>)
 8003314:	4313      	orrs	r3, r2
 8003316:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003318:	4b1b      	ldr	r3, [pc, #108]	@ (8003388 <HAL_RCC_OscConfig+0x4cc>)
 800331a:	2201      	movs	r2, #1
 800331c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800331e:	f7ff fa93 	bl	8002848 <HAL_GetTick>
 8003322:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003324:	e008      	b.n	8003338 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003326:	f7ff fa8f 	bl	8002848 <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	2b02      	cmp	r3, #2
 8003332:	d901      	bls.n	8003338 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e03d      	b.n	80033b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003338:	4b11      	ldr	r3, [pc, #68]	@ (8003380 <HAL_RCC_OscConfig+0x4c4>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d0f0      	beq.n	8003326 <HAL_RCC_OscConfig+0x46a>
 8003344:	e035      	b.n	80033b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003346:	4b10      	ldr	r3, [pc, #64]	@ (8003388 <HAL_RCC_OscConfig+0x4cc>)
 8003348:	2200      	movs	r2, #0
 800334a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800334c:	f7ff fa7c 	bl	8002848 <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003352:	e008      	b.n	8003366 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003354:	f7ff fa78 	bl	8002848 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e026      	b.n	80033b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003366:	4b06      	ldr	r3, [pc, #24]	@ (8003380 <HAL_RCC_OscConfig+0x4c4>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1f0      	bne.n	8003354 <HAL_RCC_OscConfig+0x498>
 8003372:	e01e      	b.n	80033b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	69db      	ldr	r3, [r3, #28]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d107      	bne.n	800338c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e019      	b.n	80033b4 <HAL_RCC_OscConfig+0x4f8>
 8003380:	40021000 	.word	0x40021000
 8003384:	40007000 	.word	0x40007000
 8003388:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800338c:	4b0b      	ldr	r3, [pc, #44]	@ (80033bc <HAL_RCC_OscConfig+0x500>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	429a      	cmp	r2, r3
 800339e:	d106      	bne.n	80033ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d001      	beq.n	80033b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e000      	b.n	80033b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3718      	adds	r7, #24
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40021000 	.word	0x40021000

080033c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d101      	bne.n	80033d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e0d0      	b.n	8003576 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033d4:	4b6a      	ldr	r3, [pc, #424]	@ (8003580 <HAL_RCC_ClockConfig+0x1c0>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0307 	and.w	r3, r3, #7
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d910      	bls.n	8003404 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033e2:	4b67      	ldr	r3, [pc, #412]	@ (8003580 <HAL_RCC_ClockConfig+0x1c0>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f023 0207 	bic.w	r2, r3, #7
 80033ea:	4965      	ldr	r1, [pc, #404]	@ (8003580 <HAL_RCC_ClockConfig+0x1c0>)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033f2:	4b63      	ldr	r3, [pc, #396]	@ (8003580 <HAL_RCC_ClockConfig+0x1c0>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0307 	and.w	r3, r3, #7
 80033fa:	683a      	ldr	r2, [r7, #0]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d001      	beq.n	8003404 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e0b8      	b.n	8003576 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0302 	and.w	r3, r3, #2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d020      	beq.n	8003452 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0304 	and.w	r3, r3, #4
 8003418:	2b00      	cmp	r3, #0
 800341a:	d005      	beq.n	8003428 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800341c:	4b59      	ldr	r3, [pc, #356]	@ (8003584 <HAL_RCC_ClockConfig+0x1c4>)
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	4a58      	ldr	r2, [pc, #352]	@ (8003584 <HAL_RCC_ClockConfig+0x1c4>)
 8003422:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003426:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0308 	and.w	r3, r3, #8
 8003430:	2b00      	cmp	r3, #0
 8003432:	d005      	beq.n	8003440 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003434:	4b53      	ldr	r3, [pc, #332]	@ (8003584 <HAL_RCC_ClockConfig+0x1c4>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	4a52      	ldr	r2, [pc, #328]	@ (8003584 <HAL_RCC_ClockConfig+0x1c4>)
 800343a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800343e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003440:	4b50      	ldr	r3, [pc, #320]	@ (8003584 <HAL_RCC_ClockConfig+0x1c4>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	494d      	ldr	r1, [pc, #308]	@ (8003584 <HAL_RCC_ClockConfig+0x1c4>)
 800344e:	4313      	orrs	r3, r2
 8003450:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b00      	cmp	r3, #0
 800345c:	d040      	beq.n	80034e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d107      	bne.n	8003476 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003466:	4b47      	ldr	r3, [pc, #284]	@ (8003584 <HAL_RCC_ClockConfig+0x1c4>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d115      	bne.n	800349e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e07f      	b.n	8003576 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	2b02      	cmp	r3, #2
 800347c:	d107      	bne.n	800348e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800347e:	4b41      	ldr	r3, [pc, #260]	@ (8003584 <HAL_RCC_ClockConfig+0x1c4>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d109      	bne.n	800349e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e073      	b.n	8003576 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800348e:	4b3d      	ldr	r3, [pc, #244]	@ (8003584 <HAL_RCC_ClockConfig+0x1c4>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e06b      	b.n	8003576 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800349e:	4b39      	ldr	r3, [pc, #228]	@ (8003584 <HAL_RCC_ClockConfig+0x1c4>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f023 0203 	bic.w	r2, r3, #3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	4936      	ldr	r1, [pc, #216]	@ (8003584 <HAL_RCC_ClockConfig+0x1c4>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034b0:	f7ff f9ca 	bl	8002848 <HAL_GetTick>
 80034b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034b6:	e00a      	b.n	80034ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034b8:	f7ff f9c6 	bl	8002848 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e053      	b.n	8003576 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ce:	4b2d      	ldr	r3, [pc, #180]	@ (8003584 <HAL_RCC_ClockConfig+0x1c4>)
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f003 020c 	and.w	r2, r3, #12
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	429a      	cmp	r2, r3
 80034de:	d1eb      	bne.n	80034b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034e0:	4b27      	ldr	r3, [pc, #156]	@ (8003580 <HAL_RCC_ClockConfig+0x1c0>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d210      	bcs.n	8003510 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ee:	4b24      	ldr	r3, [pc, #144]	@ (8003580 <HAL_RCC_ClockConfig+0x1c0>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f023 0207 	bic.w	r2, r3, #7
 80034f6:	4922      	ldr	r1, [pc, #136]	@ (8003580 <HAL_RCC_ClockConfig+0x1c0>)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034fe:	4b20      	ldr	r3, [pc, #128]	@ (8003580 <HAL_RCC_ClockConfig+0x1c0>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0307 	and.w	r3, r3, #7
 8003506:	683a      	ldr	r2, [r7, #0]
 8003508:	429a      	cmp	r2, r3
 800350a:	d001      	beq.n	8003510 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e032      	b.n	8003576 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0304 	and.w	r3, r3, #4
 8003518:	2b00      	cmp	r3, #0
 800351a:	d008      	beq.n	800352e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800351c:	4b19      	ldr	r3, [pc, #100]	@ (8003584 <HAL_RCC_ClockConfig+0x1c4>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	4916      	ldr	r1, [pc, #88]	@ (8003584 <HAL_RCC_ClockConfig+0x1c4>)
 800352a:	4313      	orrs	r3, r2
 800352c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0308 	and.w	r3, r3, #8
 8003536:	2b00      	cmp	r3, #0
 8003538:	d009      	beq.n	800354e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800353a:	4b12      	ldr	r3, [pc, #72]	@ (8003584 <HAL_RCC_ClockConfig+0x1c4>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	490e      	ldr	r1, [pc, #56]	@ (8003584 <HAL_RCC_ClockConfig+0x1c4>)
 800354a:	4313      	orrs	r3, r2
 800354c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800354e:	f000 f821 	bl	8003594 <HAL_RCC_GetSysClockFreq>
 8003552:	4602      	mov	r2, r0
 8003554:	4b0b      	ldr	r3, [pc, #44]	@ (8003584 <HAL_RCC_ClockConfig+0x1c4>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	091b      	lsrs	r3, r3, #4
 800355a:	f003 030f 	and.w	r3, r3, #15
 800355e:	490a      	ldr	r1, [pc, #40]	@ (8003588 <HAL_RCC_ClockConfig+0x1c8>)
 8003560:	5ccb      	ldrb	r3, [r1, r3]
 8003562:	fa22 f303 	lsr.w	r3, r2, r3
 8003566:	4a09      	ldr	r2, [pc, #36]	@ (800358c <HAL_RCC_ClockConfig+0x1cc>)
 8003568:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800356a:	4b09      	ldr	r3, [pc, #36]	@ (8003590 <HAL_RCC_ClockConfig+0x1d0>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4618      	mov	r0, r3
 8003570:	f7ff f928 	bl	80027c4 <HAL_InitTick>

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	40022000 	.word	0x40022000
 8003584:	40021000 	.word	0x40021000
 8003588:	08003fb0 	.word	0x08003fb0
 800358c:	20000004 	.word	0x20000004
 8003590:	20000008 	.word	0x20000008

08003594 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003594:	b480      	push	{r7}
 8003596:	b087      	sub	sp, #28
 8003598:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800359a:	2300      	movs	r3, #0
 800359c:	60fb      	str	r3, [r7, #12]
 800359e:	2300      	movs	r3, #0
 80035a0:	60bb      	str	r3, [r7, #8]
 80035a2:	2300      	movs	r3, #0
 80035a4:	617b      	str	r3, [r7, #20]
 80035a6:	2300      	movs	r3, #0
 80035a8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80035aa:	2300      	movs	r3, #0
 80035ac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80035ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003628 <HAL_RCC_GetSysClockFreq+0x94>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f003 030c 	and.w	r3, r3, #12
 80035ba:	2b04      	cmp	r3, #4
 80035bc:	d002      	beq.n	80035c4 <HAL_RCC_GetSysClockFreq+0x30>
 80035be:	2b08      	cmp	r3, #8
 80035c0:	d003      	beq.n	80035ca <HAL_RCC_GetSysClockFreq+0x36>
 80035c2:	e027      	b.n	8003614 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035c4:	4b19      	ldr	r3, [pc, #100]	@ (800362c <HAL_RCC_GetSysClockFreq+0x98>)
 80035c6:	613b      	str	r3, [r7, #16]
      break;
 80035c8:	e027      	b.n	800361a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	0c9b      	lsrs	r3, r3, #18
 80035ce:	f003 030f 	and.w	r3, r3, #15
 80035d2:	4a17      	ldr	r2, [pc, #92]	@ (8003630 <HAL_RCC_GetSysClockFreq+0x9c>)
 80035d4:	5cd3      	ldrb	r3, [r2, r3]
 80035d6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d010      	beq.n	8003604 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035e2:	4b11      	ldr	r3, [pc, #68]	@ (8003628 <HAL_RCC_GetSysClockFreq+0x94>)
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	0c5b      	lsrs	r3, r3, #17
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	4a11      	ldr	r2, [pc, #68]	@ (8003634 <HAL_RCC_GetSysClockFreq+0xa0>)
 80035ee:	5cd3      	ldrb	r3, [r2, r3]
 80035f0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a0d      	ldr	r2, [pc, #52]	@ (800362c <HAL_RCC_GetSysClockFreq+0x98>)
 80035f6:	fb03 f202 	mul.w	r2, r3, r2
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003600:	617b      	str	r3, [r7, #20]
 8003602:	e004      	b.n	800360e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a0c      	ldr	r2, [pc, #48]	@ (8003638 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003608:	fb02 f303 	mul.w	r3, r2, r3
 800360c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	613b      	str	r3, [r7, #16]
      break;
 8003612:	e002      	b.n	800361a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003614:	4b05      	ldr	r3, [pc, #20]	@ (800362c <HAL_RCC_GetSysClockFreq+0x98>)
 8003616:	613b      	str	r3, [r7, #16]
      break;
 8003618:	bf00      	nop
    }
  }
  return sysclockfreq;
 800361a:	693b      	ldr	r3, [r7, #16]
}
 800361c:	4618      	mov	r0, r3
 800361e:	371c      	adds	r7, #28
 8003620:	46bd      	mov	sp, r7
 8003622:	bc80      	pop	{r7}
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	40021000 	.word	0x40021000
 800362c:	007a1200 	.word	0x007a1200
 8003630:	08003fc0 	.word	0x08003fc0
 8003634:	08003fd0 	.word	0x08003fd0
 8003638:	003d0900 	.word	0x003d0900

0800363c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003644:	4b0a      	ldr	r3, [pc, #40]	@ (8003670 <RCC_Delay+0x34>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a0a      	ldr	r2, [pc, #40]	@ (8003674 <RCC_Delay+0x38>)
 800364a:	fba2 2303 	umull	r2, r3, r2, r3
 800364e:	0a5b      	lsrs	r3, r3, #9
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	fb02 f303 	mul.w	r3, r2, r3
 8003656:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003658:	bf00      	nop
  }
  while (Delay --);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	1e5a      	subs	r2, r3, #1
 800365e:	60fa      	str	r2, [r7, #12]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d1f9      	bne.n	8003658 <RCC_Delay+0x1c>
}
 8003664:	bf00      	nop
 8003666:	bf00      	nop
 8003668:	3714      	adds	r7, #20
 800366a:	46bd      	mov	sp, r7
 800366c:	bc80      	pop	{r7}
 800366e:	4770      	bx	lr
 8003670:	20000004 	.word	0x20000004
 8003674:	10624dd3 	.word	0x10624dd3

08003678 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e041      	b.n	800370e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d106      	bne.n	80036a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f7fe fffc 	bl	800269c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2202      	movs	r2, #2
 80036a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	3304      	adds	r3, #4
 80036b4:	4619      	mov	r1, r3
 80036b6:	4610      	mov	r0, r2
 80036b8:	f000 f940 	bl	800393c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
	...

08003718 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2b01      	cmp	r3, #1
 800372a:	d001      	beq.n	8003730 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e032      	b.n	8003796 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2202      	movs	r2, #2
 8003734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a18      	ldr	r2, [pc, #96]	@ (80037a0 <HAL_TIM_Base_Start+0x88>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d00e      	beq.n	8003760 <HAL_TIM_Base_Start+0x48>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800374a:	d009      	beq.n	8003760 <HAL_TIM_Base_Start+0x48>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a14      	ldr	r2, [pc, #80]	@ (80037a4 <HAL_TIM_Base_Start+0x8c>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d004      	beq.n	8003760 <HAL_TIM_Base_Start+0x48>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a13      	ldr	r2, [pc, #76]	@ (80037a8 <HAL_TIM_Base_Start+0x90>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d111      	bne.n	8003784 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f003 0307 	and.w	r3, r3, #7
 800376a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2b06      	cmp	r3, #6
 8003770:	d010      	beq.n	8003794 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f042 0201 	orr.w	r2, r2, #1
 8003780:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003782:	e007      	b.n	8003794 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f042 0201 	orr.w	r2, r2, #1
 8003792:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3714      	adds	r7, #20
 800379a:	46bd      	mov	sp, r7
 800379c:	bc80      	pop	{r7}
 800379e:	4770      	bx	lr
 80037a0:	40012c00 	.word	0x40012c00
 80037a4:	40000400 	.word	0x40000400
 80037a8:	40000800 	.word	0x40000800

080037ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037b6:	2300      	movs	r3, #0
 80037b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d101      	bne.n	80037c8 <HAL_TIM_ConfigClockSource+0x1c>
 80037c4:	2302      	movs	r3, #2
 80037c6:	e0b4      	b.n	8003932 <HAL_TIM_ConfigClockSource+0x186>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2202      	movs	r2, #2
 80037d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80037e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80037ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68ba      	ldr	r2, [r7, #8]
 80037f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003800:	d03e      	beq.n	8003880 <HAL_TIM_ConfigClockSource+0xd4>
 8003802:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003806:	f200 8087 	bhi.w	8003918 <HAL_TIM_ConfigClockSource+0x16c>
 800380a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800380e:	f000 8086 	beq.w	800391e <HAL_TIM_ConfigClockSource+0x172>
 8003812:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003816:	d87f      	bhi.n	8003918 <HAL_TIM_ConfigClockSource+0x16c>
 8003818:	2b70      	cmp	r3, #112	@ 0x70
 800381a:	d01a      	beq.n	8003852 <HAL_TIM_ConfigClockSource+0xa6>
 800381c:	2b70      	cmp	r3, #112	@ 0x70
 800381e:	d87b      	bhi.n	8003918 <HAL_TIM_ConfigClockSource+0x16c>
 8003820:	2b60      	cmp	r3, #96	@ 0x60
 8003822:	d050      	beq.n	80038c6 <HAL_TIM_ConfigClockSource+0x11a>
 8003824:	2b60      	cmp	r3, #96	@ 0x60
 8003826:	d877      	bhi.n	8003918 <HAL_TIM_ConfigClockSource+0x16c>
 8003828:	2b50      	cmp	r3, #80	@ 0x50
 800382a:	d03c      	beq.n	80038a6 <HAL_TIM_ConfigClockSource+0xfa>
 800382c:	2b50      	cmp	r3, #80	@ 0x50
 800382e:	d873      	bhi.n	8003918 <HAL_TIM_ConfigClockSource+0x16c>
 8003830:	2b40      	cmp	r3, #64	@ 0x40
 8003832:	d058      	beq.n	80038e6 <HAL_TIM_ConfigClockSource+0x13a>
 8003834:	2b40      	cmp	r3, #64	@ 0x40
 8003836:	d86f      	bhi.n	8003918 <HAL_TIM_ConfigClockSource+0x16c>
 8003838:	2b30      	cmp	r3, #48	@ 0x30
 800383a:	d064      	beq.n	8003906 <HAL_TIM_ConfigClockSource+0x15a>
 800383c:	2b30      	cmp	r3, #48	@ 0x30
 800383e:	d86b      	bhi.n	8003918 <HAL_TIM_ConfigClockSource+0x16c>
 8003840:	2b20      	cmp	r3, #32
 8003842:	d060      	beq.n	8003906 <HAL_TIM_ConfigClockSource+0x15a>
 8003844:	2b20      	cmp	r3, #32
 8003846:	d867      	bhi.n	8003918 <HAL_TIM_ConfigClockSource+0x16c>
 8003848:	2b00      	cmp	r3, #0
 800384a:	d05c      	beq.n	8003906 <HAL_TIM_ConfigClockSource+0x15a>
 800384c:	2b10      	cmp	r3, #16
 800384e:	d05a      	beq.n	8003906 <HAL_TIM_ConfigClockSource+0x15a>
 8003850:	e062      	b.n	8003918 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003862:	f000 f944 	bl	8003aee <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003874:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68ba      	ldr	r2, [r7, #8]
 800387c:	609a      	str	r2, [r3, #8]
      break;
 800387e:	e04f      	b.n	8003920 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003890:	f000 f92d 	bl	8003aee <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	689a      	ldr	r2, [r3, #8]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80038a2:	609a      	str	r2, [r3, #8]
      break;
 80038a4:	e03c      	b.n	8003920 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038b2:	461a      	mov	r2, r3
 80038b4:	f000 f8a4 	bl	8003a00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2150      	movs	r1, #80	@ 0x50
 80038be:	4618      	mov	r0, r3
 80038c0:	f000 f8fb 	bl	8003aba <TIM_ITRx_SetConfig>
      break;
 80038c4:	e02c      	b.n	8003920 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038d2:	461a      	mov	r2, r3
 80038d4:	f000 f8c2 	bl	8003a5c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2160      	movs	r1, #96	@ 0x60
 80038de:	4618      	mov	r0, r3
 80038e0:	f000 f8eb 	bl	8003aba <TIM_ITRx_SetConfig>
      break;
 80038e4:	e01c      	b.n	8003920 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038f2:	461a      	mov	r2, r3
 80038f4:	f000 f884 	bl	8003a00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2140      	movs	r1, #64	@ 0x40
 80038fe:	4618      	mov	r0, r3
 8003900:	f000 f8db 	bl	8003aba <TIM_ITRx_SetConfig>
      break;
 8003904:	e00c      	b.n	8003920 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4619      	mov	r1, r3
 8003910:	4610      	mov	r0, r2
 8003912:	f000 f8d2 	bl	8003aba <TIM_ITRx_SetConfig>
      break;
 8003916:	e003      	b.n	8003920 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	73fb      	strb	r3, [r7, #15]
      break;
 800391c:	e000      	b.n	8003920 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800391e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003930:	7bfb      	ldrb	r3, [r7, #15]
}
 8003932:	4618      	mov	r0, r3
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
	...

0800393c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a29      	ldr	r2, [pc, #164]	@ (80039f4 <TIM_Base_SetConfig+0xb8>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d00b      	beq.n	800396c <TIM_Base_SetConfig+0x30>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800395a:	d007      	beq.n	800396c <TIM_Base_SetConfig+0x30>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a26      	ldr	r2, [pc, #152]	@ (80039f8 <TIM_Base_SetConfig+0xbc>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d003      	beq.n	800396c <TIM_Base_SetConfig+0x30>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a25      	ldr	r2, [pc, #148]	@ (80039fc <TIM_Base_SetConfig+0xc0>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d108      	bne.n	800397e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003972:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	4313      	orrs	r3, r2
 800397c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a1c      	ldr	r2, [pc, #112]	@ (80039f4 <TIM_Base_SetConfig+0xb8>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d00b      	beq.n	800399e <TIM_Base_SetConfig+0x62>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800398c:	d007      	beq.n	800399e <TIM_Base_SetConfig+0x62>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a19      	ldr	r2, [pc, #100]	@ (80039f8 <TIM_Base_SetConfig+0xbc>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d003      	beq.n	800399e <TIM_Base_SetConfig+0x62>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a18      	ldr	r2, [pc, #96]	@ (80039fc <TIM_Base_SetConfig+0xc0>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d108      	bne.n	80039b0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	689a      	ldr	r2, [r3, #8]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a07      	ldr	r2, [pc, #28]	@ (80039f4 <TIM_Base_SetConfig+0xb8>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d103      	bne.n	80039e4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	691a      	ldr	r2, [r3, #16]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	615a      	str	r2, [r3, #20]
}
 80039ea:	bf00      	nop
 80039ec:	3714      	adds	r7, #20
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bc80      	pop	{r7}
 80039f2:	4770      	bx	lr
 80039f4:	40012c00 	.word	0x40012c00
 80039f8:	40000400 	.word	0x40000400
 80039fc:	40000800 	.word	0x40000800

08003a00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b087      	sub	sp, #28
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6a1b      	ldr	r3, [r3, #32]
 8003a10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	f023 0201 	bic.w	r2, r3, #1
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	011b      	lsls	r3, r3, #4
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	f023 030a 	bic.w	r3, r3, #10
 8003a3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	693a      	ldr	r2, [r7, #16]
 8003a4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	621a      	str	r2, [r3, #32]
}
 8003a52:	bf00      	nop
 8003a54:	371c      	adds	r7, #28
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bc80      	pop	{r7}
 8003a5a:	4770      	bx	lr

08003a5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b087      	sub	sp, #28
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6a1b      	ldr	r3, [r3, #32]
 8003a6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	f023 0210 	bic.w	r2, r3, #16
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003a86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	031b      	lsls	r3, r3, #12
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003a98:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	011b      	lsls	r3, r3, #4
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	621a      	str	r2, [r3, #32]
}
 8003ab0:	bf00      	nop
 8003ab2:	371c      	adds	r7, #28
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bc80      	pop	{r7}
 8003ab8:	4770      	bx	lr

08003aba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003aba:	b480      	push	{r7}
 8003abc:	b085      	sub	sp, #20
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
 8003ac2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ad0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ad2:	683a      	ldr	r2, [r7, #0]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	f043 0307 	orr.w	r3, r3, #7
 8003adc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	609a      	str	r2, [r3, #8]
}
 8003ae4:	bf00      	nop
 8003ae6:	3714      	adds	r7, #20
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bc80      	pop	{r7}
 8003aec:	4770      	bx	lr

08003aee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003aee:	b480      	push	{r7}
 8003af0:	b087      	sub	sp, #28
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	60f8      	str	r0, [r7, #12]
 8003af6:	60b9      	str	r1, [r7, #8]
 8003af8:	607a      	str	r2, [r7, #4]
 8003afa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b08:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	021a      	lsls	r2, r3, #8
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	431a      	orrs	r2, r3
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	697a      	ldr	r2, [r7, #20]
 8003b20:	609a      	str	r2, [r3, #8]
}
 8003b22:	bf00      	nop
 8003b24:	371c      	adds	r7, #28
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bc80      	pop	{r7}
 8003b2a:	4770      	bx	lr

08003b2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b085      	sub	sp, #20
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d101      	bne.n	8003b44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b40:	2302      	movs	r3, #2
 8003b42:	e046      	b.n	8003bd2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2202      	movs	r2, #2
 8003b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a16      	ldr	r2, [pc, #88]	@ (8003bdc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d00e      	beq.n	8003ba6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b90:	d009      	beq.n	8003ba6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a12      	ldr	r2, [pc, #72]	@ (8003be0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d004      	beq.n	8003ba6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a10      	ldr	r2, [pc, #64]	@ (8003be4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d10c      	bne.n	8003bc0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	68ba      	ldr	r2, [r7, #8]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68ba      	ldr	r2, [r7, #8]
 8003bbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3714      	adds	r7, #20
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bc80      	pop	{r7}
 8003bda:	4770      	bx	lr
 8003bdc:	40012c00 	.word	0x40012c00
 8003be0:	40000400 	.word	0x40000400
 8003be4:	40000800 	.word	0x40000800

08003be8 <__itoa>:
 8003be8:	1e93      	subs	r3, r2, #2
 8003bea:	2b22      	cmp	r3, #34	@ 0x22
 8003bec:	b510      	push	{r4, lr}
 8003bee:	460c      	mov	r4, r1
 8003bf0:	d904      	bls.n	8003bfc <__itoa+0x14>
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	461c      	mov	r4, r3
 8003bf6:	700b      	strb	r3, [r1, #0]
 8003bf8:	4620      	mov	r0, r4
 8003bfa:	bd10      	pop	{r4, pc}
 8003bfc:	2a0a      	cmp	r2, #10
 8003bfe:	d109      	bne.n	8003c14 <__itoa+0x2c>
 8003c00:	2800      	cmp	r0, #0
 8003c02:	da07      	bge.n	8003c14 <__itoa+0x2c>
 8003c04:	232d      	movs	r3, #45	@ 0x2d
 8003c06:	700b      	strb	r3, [r1, #0]
 8003c08:	2101      	movs	r1, #1
 8003c0a:	4240      	negs	r0, r0
 8003c0c:	4421      	add	r1, r4
 8003c0e:	f000 f805 	bl	8003c1c <__utoa>
 8003c12:	e7f1      	b.n	8003bf8 <__itoa+0x10>
 8003c14:	2100      	movs	r1, #0
 8003c16:	e7f9      	b.n	8003c0c <__itoa+0x24>

08003c18 <itoa>:
 8003c18:	f7ff bfe6 	b.w	8003be8 <__itoa>

08003c1c <__utoa>:
 8003c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c1e:	b08b      	sub	sp, #44	@ 0x2c
 8003c20:	4605      	mov	r5, r0
 8003c22:	460b      	mov	r3, r1
 8003c24:	466e      	mov	r6, sp
 8003c26:	4c1d      	ldr	r4, [pc, #116]	@ (8003c9c <__utoa+0x80>)
 8003c28:	f104 0c20 	add.w	ip, r4, #32
 8003c2c:	4637      	mov	r7, r6
 8003c2e:	6820      	ldr	r0, [r4, #0]
 8003c30:	6861      	ldr	r1, [r4, #4]
 8003c32:	3408      	adds	r4, #8
 8003c34:	c703      	stmia	r7!, {r0, r1}
 8003c36:	4564      	cmp	r4, ip
 8003c38:	463e      	mov	r6, r7
 8003c3a:	d1f7      	bne.n	8003c2c <__utoa+0x10>
 8003c3c:	7921      	ldrb	r1, [r4, #4]
 8003c3e:	6820      	ldr	r0, [r4, #0]
 8003c40:	7139      	strb	r1, [r7, #4]
 8003c42:	1e91      	subs	r1, r2, #2
 8003c44:	2922      	cmp	r1, #34	@ 0x22
 8003c46:	6038      	str	r0, [r7, #0]
 8003c48:	f04f 0100 	mov.w	r1, #0
 8003c4c:	d904      	bls.n	8003c58 <__utoa+0x3c>
 8003c4e:	7019      	strb	r1, [r3, #0]
 8003c50:	460b      	mov	r3, r1
 8003c52:	4618      	mov	r0, r3
 8003c54:	b00b      	add	sp, #44	@ 0x2c
 8003c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c58:	1e58      	subs	r0, r3, #1
 8003c5a:	4684      	mov	ip, r0
 8003c5c:	fbb5 f7f2 	udiv	r7, r5, r2
 8003c60:	fb02 5617 	mls	r6, r2, r7, r5
 8003c64:	3628      	adds	r6, #40	@ 0x28
 8003c66:	446e      	add	r6, sp
 8003c68:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8003c6c:	460c      	mov	r4, r1
 8003c6e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8003c72:	462e      	mov	r6, r5
 8003c74:	42b2      	cmp	r2, r6
 8003c76:	463d      	mov	r5, r7
 8003c78:	f101 0101 	add.w	r1, r1, #1
 8003c7c:	d9ee      	bls.n	8003c5c <__utoa+0x40>
 8003c7e:	2200      	movs	r2, #0
 8003c80:	545a      	strb	r2, [r3, r1]
 8003c82:	1919      	adds	r1, r3, r4
 8003c84:	1aa5      	subs	r5, r4, r2
 8003c86:	42aa      	cmp	r2, r5
 8003c88:	dae3      	bge.n	8003c52 <__utoa+0x36>
 8003c8a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8003c8e:	780e      	ldrb	r6, [r1, #0]
 8003c90:	3201      	adds	r2, #1
 8003c92:	7006      	strb	r6, [r0, #0]
 8003c94:	f801 5901 	strb.w	r5, [r1], #-1
 8003c98:	e7f4      	b.n	8003c84 <__utoa+0x68>
 8003c9a:	bf00      	nop
 8003c9c:	08003fd2 	.word	0x08003fd2

08003ca0 <memset>:
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	4402      	add	r2, r0
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d100      	bne.n	8003caa <memset+0xa>
 8003ca8:	4770      	bx	lr
 8003caa:	f803 1b01 	strb.w	r1, [r3], #1
 8003cae:	e7f9      	b.n	8003ca4 <memset+0x4>

08003cb0 <__libc_init_array>:
 8003cb0:	b570      	push	{r4, r5, r6, lr}
 8003cb2:	2600      	movs	r6, #0
 8003cb4:	4d0c      	ldr	r5, [pc, #48]	@ (8003ce8 <__libc_init_array+0x38>)
 8003cb6:	4c0d      	ldr	r4, [pc, #52]	@ (8003cec <__libc_init_array+0x3c>)
 8003cb8:	1b64      	subs	r4, r4, r5
 8003cba:	10a4      	asrs	r4, r4, #2
 8003cbc:	42a6      	cmp	r6, r4
 8003cbe:	d109      	bne.n	8003cd4 <__libc_init_array+0x24>
 8003cc0:	f000 f81a 	bl	8003cf8 <_init>
 8003cc4:	2600      	movs	r6, #0
 8003cc6:	4d0a      	ldr	r5, [pc, #40]	@ (8003cf0 <__libc_init_array+0x40>)
 8003cc8:	4c0a      	ldr	r4, [pc, #40]	@ (8003cf4 <__libc_init_array+0x44>)
 8003cca:	1b64      	subs	r4, r4, r5
 8003ccc:	10a4      	asrs	r4, r4, #2
 8003cce:	42a6      	cmp	r6, r4
 8003cd0:	d105      	bne.n	8003cde <__libc_init_array+0x2e>
 8003cd2:	bd70      	pop	{r4, r5, r6, pc}
 8003cd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cd8:	4798      	blx	r3
 8003cda:	3601      	adds	r6, #1
 8003cdc:	e7ee      	b.n	8003cbc <__libc_init_array+0xc>
 8003cde:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ce2:	4798      	blx	r3
 8003ce4:	3601      	adds	r6, #1
 8003ce6:	e7f2      	b.n	8003cce <__libc_init_array+0x1e>
 8003ce8:	08003ff8 	.word	0x08003ff8
 8003cec:	08003ff8 	.word	0x08003ff8
 8003cf0:	08003ff8 	.word	0x08003ff8
 8003cf4:	08003ffc 	.word	0x08003ffc

08003cf8 <_init>:
 8003cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cfa:	bf00      	nop
 8003cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cfe:	bc08      	pop	{r3}
 8003d00:	469e      	mov	lr, r3
 8003d02:	4770      	bx	lr

08003d04 <_fini>:
 8003d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d06:	bf00      	nop
 8003d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d0a:	bc08      	pop	{r3}
 8003d0c:	469e      	mov	lr, r3
 8003d0e:	4770      	bx	lr
